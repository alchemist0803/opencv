{"ast":null,"code":"/*\n * The method is present in: Otsu, N (1979), \"A threshold selection method from gray-level histograms\", IEEE Trans. Sys., Man., Cyber. 9: 62-66\n * The Otsu implementation is based on: https://en.wikipedia.org/wiki/Otsu's_method\n * @param histogram - the histogram of the image\n * @returns {number} - the threshold\n */\n\nexport default function otsu(histogramCounts, total) {\n  let sumB = 0;\n  let wB = 0;\n  let maximum = 0;\n  let level = 0;\n  let sum1 = 0;\n  for (let i = 0; i < histogramCounts.length; i++) {\n    sum1 += i * histogramCounts[i];\n  }\n  for (let ii = 0; ii < histogramCounts.length; ii++) {\n    wB = wB + histogramCounts[ii];\n    const wF = total - wB;\n    if (wB === 0 || wF === 0) {\n      continue;\n    }\n    sumB = sumB + ii * histogramCounts[ii];\n    const mF = (sum1 - sumB) / wF;\n    const between = wB * wF * (sumB / wB - mF) * (sumB / wB - mF);\n    if (between >= maximum) {\n      level = ii;\n      maximum = between;\n    }\n  }\n  return level;\n}","map":{"version":3,"names":["otsu","histogramCounts","total","sumB","wB","maximum","level","sum1","i","length","ii","wF","mF","between"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/mask/otsu.js"],"sourcesContent":["/*\n * The method is present in: Otsu, N (1979), \"A threshold selection method from gray-level histograms\", IEEE Trans. Sys., Man., Cyber. 9: 62-66\n * The Otsu implementation is based on: https://en.wikipedia.org/wiki/Otsu's_method\n * @param histogram - the histogram of the image\n * @returns {number} - the threshold\n */\n\nexport default function otsu(histogramCounts, total) {\n  let sumB = 0;\n  let wB = 0;\n  let maximum = 0;\n  let level = 0;\n\n  let sum1 = 0;\n  for (let i = 0; i < histogramCounts.length; i++) {\n    sum1 += i * histogramCounts[i];\n  }\n\n  for (let ii = 0; ii < histogramCounts.length; ii++) {\n    wB = wB + histogramCounts[ii];\n    const wF = total - wB;\n    if (wB === 0 || wF === 0) {\n      continue;\n    }\n    sumB = sumB + ii * histogramCounts[ii];\n    const mF = (sum1 - sumB) / wF;\n    const between = wB * wF * (sumB / wB - mF) * (sumB / wB - mF);\n    if (between >= maximum) {\n      level = ii;\n      maximum = between;\n    }\n  }\n\n  return level;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASA,IAAIA,CAACC,eAAe,EAAEC,KAAK,EAAE;EACnD,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,KAAK,GAAG,CAAC;EAEb,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,eAAe,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/CD,IAAI,IAAIC,CAAC,GAAGP,eAAe,CAACO,CAAC,CAAC;EAChC;EAEA,KAAK,IAAIE,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGT,eAAe,CAACQ,MAAM,EAAEC,EAAE,EAAE,EAAE;IAClDN,EAAE,GAAGA,EAAE,GAAGH,eAAe,CAACS,EAAE,CAAC;IAC7B,MAAMC,EAAE,GAAGT,KAAK,GAAGE,EAAE;IACrB,IAAIA,EAAE,KAAK,CAAC,IAAIO,EAAE,KAAK,CAAC,EAAE;MACxB;IACF;IACAR,IAAI,GAAGA,IAAI,GAAGO,EAAE,GAAGT,eAAe,CAACS,EAAE,CAAC;IACtC,MAAME,EAAE,GAAG,CAACL,IAAI,GAAGJ,IAAI,IAAIQ,EAAE;IAC7B,MAAME,OAAO,GAAGT,EAAE,GAAGO,EAAE,IAAIR,IAAI,GAAGC,EAAE,GAAGQ,EAAE,CAAC,IAAIT,IAAI,GAAGC,EAAE,GAAGQ,EAAE,CAAC;IAC7D,IAAIC,OAAO,IAAIR,OAAO,EAAE;MACtBC,KAAK,GAAGI,EAAE;MACVL,OAAO,GAAGQ,OAAO;IACnB;EACF;EAEA,OAAOP,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}