{"ast":null,"code":"/*\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Isodata: Ridler, TW & Calvard, S (1978), \"Picture thresholding using an iterative selection method\"\n * IEEE Transactions on Systems, Man and Cybernetics 8: 630-632.\n *\n */\nexport default function isodata(histogram) {\n  let l; // the average grey value of pixels with intensities < g\n  let toth; // the the average grey value of pixels with intensities > g\n  let totl; // the total the average grey value of pixels with intensities < g\n  let h; // the average grey value of pixels with intensities > g\n  let g = 0; // threshold value\n\n  for (let i = 1; i < histogram.length; i++) {\n    if (histogram[i] > 0) {\n      g = i + 1;\n      break;\n    }\n  }\n  while (true) {\n    l = 0;\n    totl = 0;\n    for (let i = 0; i < g; i++) {\n      totl = totl + histogram[i];\n      l = l + histogram[i] * i;\n    }\n    h = 0;\n    toth = 0;\n    for (let i = g + 1; i < histogram.length; i++) {\n      toth += histogram[i];\n      h += histogram[i] * i;\n    }\n    if (totl > 0 && toth > 0) {\n      l /= totl;\n      h /= toth;\n      if (g === Math.round((l + h) / 2.0)) {\n        break;\n      }\n    }\n    g++;\n    if (g > histogram.length - 2) {\n      throw new Error('Threshold not found');\n    }\n  }\n  return g;\n}","map":{"version":3,"names":["isodata","histogram","l","toth","totl","h","g","i","length","Math","round","Error"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/mask/isodata.js"],"sourcesContent":["/*\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Isodata: Ridler, TW & Calvard, S (1978), \"Picture thresholding using an iterative selection method\"\n * IEEE Transactions on Systems, Man and Cybernetics 8: 630-632.\n *\n */\nexport default function isodata(histogram) {\n  let l; // the average grey value of pixels with intensities < g\n  let toth; // the the average grey value of pixels with intensities > g\n  let totl; // the total the average grey value of pixels with intensities < g\n  let h; // the average grey value of pixels with intensities > g\n  let g = 0; // threshold value\n\n  for (let i = 1; i < histogram.length; i++) {\n    if (histogram[i] > 0) {\n      g = i + 1;\n      break;\n    }\n  }\n\n  while (true) {\n    l = 0;\n    totl = 0;\n    for (let i = 0; i < g; i++) {\n      totl = totl + histogram[i];\n      l = l + histogram[i] * i;\n    }\n    h = 0;\n    toth = 0;\n    for (let i = g + 1; i < histogram.length; i++) {\n      toth += histogram[i];\n      h += histogram[i] * i;\n    }\n    if (totl > 0 && toth > 0) {\n      l /= totl;\n      h /= toth;\n      if (g === Math.round((l + h) / 2.0)) {\n        break;\n      }\n    }\n    g++;\n    if (g > histogram.length - 2) {\n      throw new Error('Threshold not found');\n    }\n  }\n  return g;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,OAAOA,CAACC,SAAS,EAAE;EACzC,IAAIC,CAAC,CAAC,CAAC;EACP,IAAIC,IAAI,CAAC,CAAC;EACV,IAAIC,IAAI,CAAC,CAAC;EACV,IAAIC,CAAC,CAAC,CAAC;EACP,IAAIC,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACzC,IAAIN,SAAS,CAACM,CAAC,CAAC,GAAG,CAAC,EAAE;MACpBD,CAAC,GAAGC,CAAC,GAAG,CAAC;MACT;IACF;EACF;EAEA,OAAO,IAAI,EAAE;IACXL,CAAC,GAAG,CAAC;IACLE,IAAI,GAAG,CAAC;IACR,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,EAAEC,CAAC,EAAE,EAAE;MAC1BH,IAAI,GAAGA,IAAI,GAAGH,SAAS,CAACM,CAAC,CAAC;MAC1BL,CAAC,GAAGA,CAAC,GAAGD,SAAS,CAACM,CAAC,CAAC,GAAGA,CAAC;IAC1B;IACAF,CAAC,GAAG,CAAC;IACLF,IAAI,GAAG,CAAC;IACR,KAAK,IAAII,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGN,SAAS,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7CJ,IAAI,IAAIF,SAAS,CAACM,CAAC,CAAC;MACpBF,CAAC,IAAIJ,SAAS,CAACM,CAAC,CAAC,GAAGA,CAAC;IACvB;IACA,IAAIH,IAAI,GAAG,CAAC,IAAID,IAAI,GAAG,CAAC,EAAE;MACxBD,CAAC,IAAIE,IAAI;MACTC,CAAC,IAAIF,IAAI;MACT,IAAIG,CAAC,KAAKG,IAAI,CAACC,KAAK,CAAC,CAACR,CAAC,GAAGG,CAAC,IAAI,GAAG,CAAC,EAAE;QACnC;MACF;IACF;IACAC,CAAC,EAAE;IACH,IAAIA,CAAC,GAAGL,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF;EACA,OAAOL,CAAC;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}