{"ast":null,"code":"import newArray from 'new-array';\n\n/**\n * Returns an array with the maximal value of each channel\n * @memberof Image\n * @instance\n * @return {number[]} Array having has size the number of channels\n */\nexport default function max() {\n  this.checkProcessable('max', {\n    bitDepth: [8, 16, 32]\n  });\n  let result = newArray(this.channels, -Infinity);\n  for (let i = 0; i < this.data.length; i += this.channels) {\n    for (let c = 0; c < this.channels; c++) {\n      if (this.data[i + c] > result[c]) {\n        result[c] = this.data[i + c];\n      }\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["newArray","max","checkProcessable","bitDepth","result","channels","Infinity","i","data","length","c"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/compute/max.js"],"sourcesContent":["import newArray from 'new-array';\n\n/**\n * Returns an array with the maximal value of each channel\n * @memberof Image\n * @instance\n * @return {number[]} Array having has size the number of channels\n */\nexport default function max() {\n  this.checkProcessable('max', {\n    bitDepth: [8, 16, 32],\n  });\n\n  let result = newArray(this.channels, -Infinity);\n\n  for (let i = 0; i < this.data.length; i += this.channels) {\n    for (let c = 0; c < this.channels; c++) {\n      if (this.data[i + c] > result[c]) {\n        result[c] = this.data[i + c];\n      }\n    }\n  }\n  return result;\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAI,CAACC,gBAAgB,CAAC,KAAK,EAAE;IAC3BC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE;EACtB,CAAC,CAAC;EAEF,IAAIC,MAAM,GAAGJ,QAAQ,CAAC,IAAI,CAACK,QAAQ,EAAE,CAACC,QAAQ,CAAC;EAE/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,IAAI,CAACC,MAAM,EAAEF,CAAC,IAAI,IAAI,CAACF,QAAQ,EAAE;IACxD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,QAAQ,EAAEK,CAAC,EAAE,EAAE;MACtC,IAAI,IAAI,CAACF,IAAI,CAACD,CAAC,GAAGG,CAAC,CAAC,GAAGN,MAAM,CAACM,CAAC,CAAC,EAAE;QAChCN,MAAM,CAACM,CAAC,CAAC,GAAG,IAAI,CAACF,IAAI,CAACD,CAAC,GAAGG,CAAC,CAAC;MAC9B;IACF;EACF;EACA,OAAON,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}