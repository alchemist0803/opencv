{"ast":null,"code":"/**\n * The roiMap is an array of the size of the original image data that contains\n * positive and negative numbers. When the number is common, it corresponds\n * to one region of interest (ROI)\n *\n * @class RoiMap\n * @private\n */\nimport commonBorderLength from './util/commonBorderLength';\nimport mergeRoi from './util/mergeRoi';\nexport default class RoiMap {\n  constructor(parent, data) {\n    this.parent = parent;\n    this.width = parent.width;\n    this.height = parent.height;\n    this.data = data;\n    this.negative = 0;\n    this.positive = 0;\n  }\n  get total() {\n    return this.negative + this.positive;\n  }\n  get minMax() {\n    let min = Number.MAX_SAFE_INTEGER;\n    let max = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.data[i] < min) min = this.data[i];\n      if (this.data[i] > max) max = this.data[i];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  get commonBorderLength() {\n    return commonBorderLength(this);\n  }\n  mergeRoi(options = {}) {\n    return mergeRoi.call(this, options);\n  }\n  mergeRois(rois) {\n    const first = rois[0];\n    const others = rois.slice(1);\n    for (let i = 0; i < this.data.length; i++) {\n      if (others.includes(this.data[i])) {\n        this.data[i] = first;\n      }\n    }\n  }\n  rowsInfo() {\n    let rowsInfo = new Array(this.height);\n    let currentRow = 0;\n    for (let i = 0; i < this.data.length; i += this.width) {\n      let info = {\n        row: currentRow,\n        positivePixel: 0,\n        negativePixel: 0,\n        zeroPixel: 0,\n        positiveRoi: 0,\n        negativeRoi: 0,\n        medianChange: 0\n      };\n      rowsInfo[currentRow++] = info;\n      let positives = {};\n      let negatives = {};\n      let changes = [];\n      let previous = this.data[i];\n      let current = 0;\n      for (let j = i; j < i + this.width; j++) {\n        let value = this.data[j];\n        if (previous !== value) {\n          previous = value;\n          changes.push(current);\n          current = 0;\n        }\n        current++;\n        if (value > 0) {\n          info.positivePixel++;\n          if (!positives[value]) {\n            positives[value] = true;\n          }\n        } else if (value < 0) {\n          info.negativePixel++;\n          if (!negatives[value]) {\n            negatives[value] = true;\n          }\n        } else {\n          info.zeroPixel++;\n        }\n      }\n      changes.push(current);\n      // TODO use median package\n      info.medianChange = changes.sort((a, b) => a - b)[Math.floor(changes.length / 2)];\n      info.positiveRoiIDs = Object.keys(positives);\n      info.negativeRoiIDs = Object.keys(negatives);\n      info.positiveRoi = info.positiveRoiIDs.length;\n      info.negativeRoi = info.negativeRoiIDs.length;\n    }\n    return rowsInfo;\n  }\n  colsInfo() {\n    let colsInfo = new Array(this.width);\n    let currentCol = 0;\n    for (let i = 0; i < this.width; i++) {\n      let info = {\n        col: currentCol,\n        positivePixel: 0,\n        negativePixel: 0,\n        zeroPixel: 0,\n        positiveRoi: 0,\n        negativeRoi: 0,\n        medianChange: 0\n      };\n      colsInfo[currentCol++] = info;\n      let positives = {};\n      let negatives = {};\n      let changes = [];\n      let previous = this.data[i];\n      let current = 0;\n      for (let j = i; j < i + this.data.length; j += this.width) {\n        let value = this.data[j];\n        if (previous !== value) {\n          previous = value;\n          changes.push(current);\n          current = 0;\n        }\n        current++;\n        if (value > 0) {\n          info.positivePixel++;\n          if (!positives[value]) {\n            positives[value] = true;\n          }\n        } else if (value < 0) {\n          info.negativePixel++;\n          if (!negatives[value]) {\n            negatives[value] = true;\n          }\n        } else {\n          info.zeroPixel++;\n        }\n      }\n      changes.push(current);\n      // TODO use median package\n      info.medianChange = changes.sort((a, b) => a - b)[Math.floor(changes.length / 2)];\n      info.positiveRoiIDs = Object.keys(positives);\n      info.negativeRoiIDs = Object.keys(negatives);\n      info.positiveRoi = info.positiveRoiIDs.length;\n      info.negativeRoi = info.negativeRoiIDs.length;\n    }\n    return colsInfo;\n  }\n}","map":{"version":3,"names":["commonBorderLength","mergeRoi","RoiMap","constructor","parent","data","width","height","negative","positive","total","minMax","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","i","length","options","call","mergeRois","rois","first","others","slice","includes","rowsInfo","Array","currentRow","info","row","positivePixel","negativePixel","zeroPixel","positiveRoi","negativeRoi","medianChange","positives","negatives","changes","previous","current","j","value","push","sort","a","b","Math","floor","positiveRoiIDs","Object","keys","negativeRoiIDs","colsInfo","currentCol","col"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/roi/RoiMap.js"],"sourcesContent":["/**\n * The roiMap is an array of the size of the original image data that contains\n * positive and negative numbers. When the number is common, it corresponds\n * to one region of interest (ROI)\n *\n * @class RoiMap\n * @private\n */\nimport commonBorderLength from './util/commonBorderLength';\nimport mergeRoi from './util/mergeRoi';\n\nexport default class RoiMap {\n  constructor(parent, data) {\n    this.parent = parent;\n    this.width = parent.width;\n    this.height = parent.height;\n    this.data = data;\n    this.negative = 0;\n    this.positive = 0;\n  }\n\n  get total() {\n    return this.negative + this.positive;\n  }\n\n  get minMax() {\n    let min = Number.MAX_SAFE_INTEGER;\n    let max = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.data[i] < min) min = this.data[i];\n      if (this.data[i] > max) max = this.data[i];\n    }\n    return { min, max };\n  }\n\n  get commonBorderLength() {\n    return commonBorderLength(this);\n  }\n\n  mergeRoi(options = {}) {\n    return mergeRoi.call(this, options);\n  }\n\n  mergeRois(rois) {\n    const first = rois[0];\n    const others = rois.slice(1);\n    for (let i = 0; i < this.data.length; i++) {\n      if (others.includes(this.data[i])) {\n        this.data[i] = first;\n      }\n    }\n  }\n\n  rowsInfo() {\n    let rowsInfo = new Array(this.height);\n    let currentRow = 0;\n    for (let i = 0; i < this.data.length; i += this.width) {\n      let info = {\n        row: currentRow,\n        positivePixel: 0,\n        negativePixel: 0,\n        zeroPixel: 0,\n        positiveRoi: 0,\n        negativeRoi: 0,\n        medianChange: 0,\n      };\n      rowsInfo[currentRow++] = info;\n      let positives = {};\n      let negatives = {};\n      let changes = [];\n      let previous = this.data[i];\n      let current = 0;\n      for (let j = i; j < i + this.width; j++) {\n        let value = this.data[j];\n        if (previous !== value) {\n          previous = value;\n          changes.push(current);\n          current = 0;\n        }\n        current++;\n        if (value > 0) {\n          info.positivePixel++;\n          if (!positives[value]) {\n            positives[value] = true;\n          }\n        } else if (value < 0) {\n          info.negativePixel++;\n          if (!negatives[value]) {\n            negatives[value] = true;\n          }\n        } else {\n          info.zeroPixel++;\n        }\n      }\n      changes.push(current);\n      // TODO use median package\n      info.medianChange = changes.sort((a, b) => a - b)[\n        Math.floor(changes.length / 2)\n      ];\n      info.positiveRoiIDs = Object.keys(positives);\n      info.negativeRoiIDs = Object.keys(negatives);\n      info.positiveRoi = info.positiveRoiIDs.length;\n      info.negativeRoi = info.negativeRoiIDs.length;\n    }\n    return rowsInfo;\n  }\n\n  colsInfo() {\n    let colsInfo = new Array(this.width);\n    let currentCol = 0;\n    for (let i = 0; i < this.width; i++) {\n      let info = {\n        col: currentCol,\n        positivePixel: 0,\n        negativePixel: 0,\n        zeroPixel: 0,\n        positiveRoi: 0,\n        negativeRoi: 0,\n        medianChange: 0,\n      };\n      colsInfo[currentCol++] = info;\n      let positives = {};\n      let negatives = {};\n      let changes = [];\n      let previous = this.data[i];\n      let current = 0;\n      for (let j = i; j < i + this.data.length; j += this.width) {\n        let value = this.data[j];\n        if (previous !== value) {\n          previous = value;\n          changes.push(current);\n          current = 0;\n        }\n        current++;\n        if (value > 0) {\n          info.positivePixel++;\n          if (!positives[value]) {\n            positives[value] = true;\n          }\n        } else if (value < 0) {\n          info.negativePixel++;\n          if (!negatives[value]) {\n            negatives[value] = true;\n          }\n        } else {\n          info.zeroPixel++;\n        }\n      }\n      changes.push(current);\n      // TODO use median package\n      info.medianChange = changes.sort((a, b) => a - b)[\n        Math.floor(changes.length / 2)\n      ];\n      info.positiveRoiIDs = Object.keys(positives);\n      info.negativeRoiIDs = Object.keys(negatives);\n      info.positiveRoi = info.positiveRoiIDs.length;\n      info.negativeRoi = info.negativeRoiIDs.length;\n    }\n    return colsInfo;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}