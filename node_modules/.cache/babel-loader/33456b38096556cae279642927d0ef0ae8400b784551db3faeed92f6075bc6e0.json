{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nimport median from 'ml-array-median';\nexport default class TheilSenRegression extends BaseRegression {\n  /**\n   * Theil–Sen estimator\n   * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n   * @param {Array<number>|boolean} x\n   * @param {Array<number>|object} y\n   * @constructor\n   */\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // loads the model\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = y.coefficients;\n    } else {\n      // creates the model\n      checkArrayLength(x, y);\n      theilSen(this, x, y);\n    }\n  }\n  toJSON() {\n    return {\n      name: 'TheilSenRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n  _predict(input) {\n    return this.slope * input + this.intercept;\n  }\n  computeX(input) {\n    return (input - this.intercept) / this.slope;\n  }\n  toString(precision) {\n    var result = 'f(x) = ';\n    if (this.slope) {\n      var xFactor = maybeToPrecision(this.slope, precision);\n      result += `${Math.abs(xFactor - 1) < 1e-5 ? '' : `${xFactor} * `}x`;\n      if (this.intercept) {\n        var absIntercept = Math.abs(this.intercept);\n        var operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n  static load(json) {\n    if (json.name !== 'TheilSenRegression') {\n      throw new TypeError('not a Theil-Sen model');\n    }\n    return new TheilSenRegression(true, json);\n  }\n}\nfunction theilSen(regression, x, y) {\n  let len = x.length;\n  let slopes = new Array(len * len);\n  let count = 0;\n  for (let i = 0; i < len; ++i) {\n    for (let j = i + 1; j < len; ++j) {\n      if (x[i] !== x[j]) {\n        slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n      }\n    }\n  }\n  slopes.length = count;\n  let medianSlope = median(slopes);\n  let cuts = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    cuts[i] = y[i] - medianSlope * x[i];\n  }\n  regression.slope = medianSlope;\n  regression.intercept = median(cuts);\n  regression.coefficients = [regression.intercept, regression.slope];\n}","map":{"version":3,"names":["BaseRegression","checkArrayLength","maybeToPrecision","median","TheilSenRegression","constructor","x","y","slope","intercept","coefficients","theilSen","toJSON","name","_predict","input","computeX","toString","precision","result","xFactor","Math","abs","absIntercept","operator","toLaTeX","load","json","TypeError","regression","len","length","slopes","Array","count","i","j","medianSlope","cuts"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-regression-theil-sen/src/index.js"],"sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport median from 'ml-array-median';\n\nexport default class TheilSenRegression extends BaseRegression {\n  /**\n   * Theil–Sen estimator\n   * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n   * @param {Array<number>|boolean} x\n   * @param {Array<number>|object} y\n   * @constructor\n   */\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // loads the model\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = y.coefficients;\n    } else {\n      // creates the model\n      checkArrayLength(x, y);\n      theilSen(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'TheilSenRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(input) {\n    return this.slope * input + this.intercept;\n  }\n\n  computeX(input) {\n    return (input - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    var result = 'f(x) = ';\n    if (this.slope) {\n      var xFactor = maybeToPrecision(this.slope, precision);\n      result += `${Math.abs(xFactor - 1) < 1e-5 ? '' : `${xFactor} * `}x`;\n      if (this.intercept) {\n        var absIntercept = Math.abs(this.intercept);\n        var operator = absIntercept === this.intercept ? '+' : '-';\n        result +=\n          ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'TheilSenRegression') {\n      throw new TypeError('not a Theil-Sen model');\n    }\n    return new TheilSenRegression(true, json);\n  }\n}\n\nfunction theilSen(regression, x, y) {\n  let len = x.length;\n  let slopes = new Array(len * len);\n  let count = 0;\n  for (let i = 0; i < len; ++i) {\n    for (let j = i + 1; j < len; ++j) {\n      if (x[i] !== x[j]) {\n        slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n      }\n    }\n  }\n  slopes.length = count;\n  let medianSlope = median(slopes);\n\n  let cuts = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    cuts[i] = y[i] - medianSlope * x[i];\n  }\n\n  regression.slope = medianSlope;\n  regression.intercept = median(cuts);\n  regression.coefficients = [regression.intercept, regression.slope];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}