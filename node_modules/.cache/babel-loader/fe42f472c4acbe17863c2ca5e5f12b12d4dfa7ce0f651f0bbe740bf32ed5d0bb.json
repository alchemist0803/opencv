{"ast":null,"code":"/**\n * Apply a gaussian filter to the image.\n * @memberof Image\n * @instance\n * @param {object} options\n * @param {number} [options.radius=1] - Number of pixels around the current pixel.\n * @param {number} [options.sigma] - Sigma parameter for the gaussian.\n * @param {number[]|string[]} [options.channels] - To which channel to apply the filter.\n * @param {string} [options.border='copy']\n * @return {Image}\n */\nexport default function gaussianFilter(options = {}) {\n  let {\n    radius = 1,\n    sigma,\n    channels,\n    border = 'copy'\n  } = options;\n  this.checkProcessable('gaussian', {\n    bitDepth: [8, 16]\n  });\n  const kernel = getKernel(radius, sigma);\n  return this.convolution([kernel, kernel], {\n    border,\n    channels,\n    algorithm: 'separable'\n  });\n}\nfunction getKernel(radius, sigma) {\n  const n = radius * 2 + 1;\n  const kernel = new Array(n);\n  const sigmaX = sigma ? sigma : ((n - 1) * 0.5 - 1) * 0.3 + 0.8;\n  const scale2X = -0.5 / (sigmaX * sigmaX);\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    const x = i - radius;\n    const t = Math.exp(scale2X * x * x);\n    kernel[i] = t;\n    sum += t;\n  }\n  for (let i = 0; i < n; i++) {\n    kernel[i] /= sum;\n  }\n  return kernel;\n}","map":{"version":3,"names":["gaussianFilter","options","radius","sigma","channels","border","checkProcessable","bitDepth","kernel","getKernel","convolution","algorithm","n","Array","sigmaX","scale2X","sum","i","x","t","Math","exp"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/filter/gaussianFilter.js"],"sourcesContent":["/**\n * Apply a gaussian filter to the image.\n * @memberof Image\n * @instance\n * @param {object} options\n * @param {number} [options.radius=1] - Number of pixels around the current pixel.\n * @param {number} [options.sigma] - Sigma parameter for the gaussian.\n * @param {number[]|string[]} [options.channels] - To which channel to apply the filter.\n * @param {string} [options.border='copy']\n * @return {Image}\n */\nexport default function gaussianFilter(options = {}) {\n  let { radius = 1, sigma, channels, border = 'copy' } = options;\n\n  this.checkProcessable('gaussian', {\n    bitDepth: [8, 16],\n  });\n\n  const kernel = getKernel(radius, sigma);\n  return this.convolution([kernel, kernel], {\n    border,\n    channels,\n    algorithm: 'separable',\n  });\n}\n\nfunction getKernel(radius, sigma) {\n  const n = radius * 2 + 1;\n  const kernel = new Array(n);\n  const sigmaX = sigma ? sigma : ((n - 1) * 0.5 - 1) * 0.3 + 0.8;\n  const scale2X = -0.5 / (sigmaX * sigmaX);\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    const x = i - radius;\n    const t = Math.exp(scale2X * x * x);\n    kernel[i] = t;\n    sum += t;\n  }\n\n  for (let i = 0; i < n; i++) {\n    kernel[i] /= sum;\n  }\n  return kernel;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,cAAcA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACnD,IAAI;IAAEC,MAAM,GAAG,CAAC;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,MAAM,GAAG;EAAO,CAAC,GAAGJ,OAAO;EAE9D,IAAI,CAACK,gBAAgB,CAAC,UAAU,EAAE;IAChCC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;EAClB,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAGC,SAAS,CAACP,MAAM,EAAEC,KAAK,CAAC;EACvC,OAAO,IAAI,CAACO,WAAW,CAAC,CAACF,MAAM,EAAEA,MAAM,CAAC,EAAE;IACxCH,MAAM;IACND,QAAQ;IACRO,SAAS,EAAE;EACb,CAAC,CAAC;AACJ;AAEA,SAASF,SAASA,CAACP,MAAM,EAAEC,KAAK,EAAE;EAChC,MAAMS,CAAC,GAAGV,MAAM,GAAG,CAAC,GAAG,CAAC;EACxB,MAAMM,MAAM,GAAG,IAAIK,KAAK,CAACD,CAAC,CAAC;EAC3B,MAAME,MAAM,GAAGX,KAAK,GAAGA,KAAK,GAAG,CAAC,CAACS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG;EAC9D,MAAMG,OAAO,GAAG,CAAC,GAAG,IAAID,MAAM,GAAGA,MAAM,CAAC;EACxC,IAAIE,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;IAC1B,MAAMC,CAAC,GAAGD,CAAC,GAAGf,MAAM;IACpB,MAAMiB,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACN,OAAO,GAAGG,CAAC,GAAGA,CAAC,CAAC;IACnCV,MAAM,CAACS,CAAC,CAAC,GAAGE,CAAC;IACbH,GAAG,IAAIG,CAAC;EACV;EAEA,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;IAC1BT,MAAM,CAACS,CAAC,CAAC,IAAID,GAAG;EAClB;EACA,OAAOR,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}