{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nimport { SimpleLinearRegression } from 'ml-regression-simple-linear';\nexport default class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.B, precision)} * e^(${maybeToPrecision(this.A, precision)} * x)`;\n  }\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return `f(x) = ${maybeToPrecision(this.B, precision)}e^{${maybeToPrecision(this.A, precision)}x}`;\n    } else {\n      return `f(x) = \\\\frac{${maybeToPrecision(this.B, precision)}}{e^{${maybeToPrecision(-this.A, precision)}x}}`;\n    }\n  }\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n    return new ExponentialRegression(true, json);\n  }\n}\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}","map":{"version":3,"names":["BaseRegression","checkArrayLength","maybeToPrecision","SimpleLinearRegression","ExponentialRegression","constructor","x","y","A","B","regress","_predict","input","Math","exp","toJSON","name","toString","precision","toLaTeX","load","json","TypeError","er","n","length","yl","Array","i","log","linear","slope","intercept"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-regression-exponential/src/index.js"],"sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\nimport { SimpleLinearRegression } from 'ml-regression-simple-linear';\n\nexport default class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B,\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.B,\n      precision,\n    )} * e^(${maybeToPrecision(this.A, precision)} * x)`;\n  }\n\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return `f(x) = ${maybeToPrecision(\n        this.B,\n        precision,\n      )}e^{${maybeToPrecision(this.A, precision)}x}`;\n    } else {\n      return `f(x) = \\\\frac{${maybeToPrecision(\n        this.B,\n        precision,\n      )}}{e^{${maybeToPrecision(-this.A, precision)}x}}`;\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n    return new ExponentialRegression(true, json);\n  }\n}\n\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}\n"],"mappings":"AAAA,OAAOA,cAAc,IACnBC,gBAAgB,EAChBC,gBAAgB,QACX,oBAAoB;AAC3B,SAASC,sBAAsB,QAAQ,6BAA6B;AAEpE,eAAe,MAAMC,qBAAqB,SAASJ,cAAc,CAAC;EAChEK,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAID,CAAC,KAAK,IAAI,EAAE;MACd,IAAI,CAACE,CAAC,GAAGD,CAAC,CAACC,CAAC;MACZ,IAAI,CAACC,CAAC,GAAGF,CAAC,CAACE,CAAC;IACd,CAAC,MAAM;MACLR,gBAAgB,CAACK,CAAC,EAAEC,CAAC,CAAC;MACtBG,OAAO,CAAC,IAAI,EAAEJ,CAAC,EAAEC,CAAC,CAAC;IACrB;EACF;EAEAI,QAAQA,CAACC,KAAK,EAAE;IACd,OAAO,IAAI,CAACH,CAAC,GAAGI,IAAI,CAACC,GAAG,CAACF,KAAK,GAAG,IAAI,CAACJ,CAAC,CAAC;EAC1C;EAEAO,MAAMA,CAAA,EAAG;IACP,OAAO;MACLC,IAAI,EAAE,uBAAuB;MAC7BR,CAAC,EAAE,IAAI,CAACA,CAAC;MACTC,CAAC,EAAE,IAAI,CAACA;IACV,CAAC;EACH;EAEAQ,QAAQA,CAACC,SAAS,EAAE;IAClB,OAAO,UAAUhB,gBAAgB,CAC/B,IAAI,CAACO,CAAC,EACNS,SACF,CAAC,SAAShB,gBAAgB,CAAC,IAAI,CAACM,CAAC,EAAEU,SAAS,CAAC,OAAO;EACtD;EAEAC,OAAOA,CAACD,SAAS,EAAE;IACjB,IAAI,IAAI,CAACV,CAAC,IAAI,CAAC,EAAE;MACf,OAAO,UAAUN,gBAAgB,CAC/B,IAAI,CAACO,CAAC,EACNS,SACF,CAAC,MAAMhB,gBAAgB,CAAC,IAAI,CAACM,CAAC,EAAEU,SAAS,CAAC,IAAI;IAChD,CAAC,MAAM;MACL,OAAO,iBAAiBhB,gBAAgB,CACtC,IAAI,CAACO,CAAC,EACNS,SACF,CAAC,QAAQhB,gBAAgB,CAAC,CAAC,IAAI,CAACM,CAAC,EAAEU,SAAS,CAAC,KAAK;IACpD;EACF;EAEA,OAAOE,IAAIA,CAACC,IAAI,EAAE;IAChB,IAAIA,IAAI,CAACL,IAAI,KAAK,uBAAuB,EAAE;MACzC,MAAM,IAAIM,SAAS,CAAC,oCAAoC,CAAC;IAC3D;IACA,OAAO,IAAIlB,qBAAqB,CAAC,IAAI,EAAEiB,IAAI,CAAC;EAC9C;AACF;AAEA,SAASX,OAAOA,CAACa,EAAE,EAAEjB,CAAC,EAAEC,CAAC,EAAE;EACzB,MAAMiB,CAAC,GAAGlB,CAAC,CAACmB,MAAM;EAClB,MAAMC,EAAE,GAAG,IAAIC,KAAK,CAACH,CAAC,CAAC;EACvB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAEI,CAAC,EAAE,EAAE;IAC1BF,EAAE,CAACE,CAAC,CAAC,GAAGf,IAAI,CAACgB,GAAG,CAACtB,CAAC,CAACqB,CAAC,CAAC,CAAC;EACxB;EAEA,MAAME,MAAM,GAAG,IAAI3B,sBAAsB,CAACG,CAAC,EAAEoB,EAAE,CAAC;EAChDH,EAAE,CAACf,CAAC,GAAGsB,MAAM,CAACC,KAAK;EACnBR,EAAE,CAACd,CAAC,GAAGI,IAAI,CAACC,GAAG,CAACgB,MAAM,CAACE,SAAS,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}