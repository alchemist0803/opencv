{"ast":null,"code":"import { getColors } from '../../util/color';\n\n/**\n * Paint polylines on the current image.\n * @memberof Image\n * @instance\n * @param {Array<Array<Array<number>>>} polylines - Array of array of [x,y] points\n * @param {object} [options]\n * @param {Array<number>|string}     [options.color] - Array of 3 elements (R, G, B) or a valid css color.\n * @param {Array<Array<number>>|Array<string>} [options.colors] - Array of Array of 3 elements (R, G, B) for each color of each mask\n * @param {boolean}             [options.randomColors=true] - To paint each mask with a random color if color and colors are undefined\n * @param {boolean}             [options.distinctColors=false] - To paint each mask with a different color if color and colors are undefined\n * @param {object} [options.shape] - Definition of the shape, see Shape contructor.\n * @return {this} The original painted image\n */\nexport default function paintPolylines(polylines, options = {}) {\n  let optionsCopy = Object.assign({}, options);\n  this.checkProcessable('paintPolylines', {\n    bitDepth: [8, 16]\n  });\n  let colors = getColors(Object.assign({}, options, {\n    numberColors: polylines.length\n  }));\n  for (let i = 0; i < polylines.length; i++) {\n    optionsCopy.color = colors[i % colors.length];\n    this.paintPolyline(polylines[i], optionsCopy);\n  }\n  return this;\n}","map":{"version":3,"names":["getColors","paintPolylines","polylines","options","optionsCopy","Object","assign","checkProcessable","bitDepth","colors","numberColors","length","i","color","paintPolyline"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/operator/paintPolylines.js"],"sourcesContent":["import { getColors } from '../../util/color';\n\n/**\n * Paint polylines on the current image.\n * @memberof Image\n * @instance\n * @param {Array<Array<Array<number>>>} polylines - Array of array of [x,y] points\n * @param {object} [options]\n * @param {Array<number>|string}     [options.color] - Array of 3 elements (R, G, B) or a valid css color.\n * @param {Array<Array<number>>|Array<string>} [options.colors] - Array of Array of 3 elements (R, G, B) for each color of each mask\n * @param {boolean}             [options.randomColors=true] - To paint each mask with a random color if color and colors are undefined\n * @param {boolean}             [options.distinctColors=false] - To paint each mask with a different color if color and colors are undefined\n * @param {object} [options.shape] - Definition of the shape, see Shape contructor.\n * @return {this} The original painted image\n */\nexport default function paintPolylines(polylines, options = {}) {\n  let optionsCopy = Object.assign({}, options);\n\n  this.checkProcessable('paintPolylines', {\n    bitDepth: [8, 16],\n  });\n\n  let colors = getColors(\n    Object.assign({}, options, { numberColors: polylines.length }),\n  );\n\n  for (let i = 0; i < polylines.length; i++) {\n    optionsCopy.color = colors[i % colors.length];\n    this.paintPolyline(polylines[i], optionsCopy);\n  }\n\n  return this;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,kBAAkB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAACC,SAAS,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC9D,IAAIC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,OAAO,CAAC;EAE5C,IAAI,CAACI,gBAAgB,CAAC,gBAAgB,EAAE;IACtCC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;EAClB,CAAC,CAAC;EAEF,IAAIC,MAAM,GAAGT,SAAS,CACpBK,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,OAAO,EAAE;IAAEO,YAAY,EAAER,SAAS,CAACS;EAAO,CAAC,CAC/D,CAAC;EAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,SAAS,CAACS,MAAM,EAAEC,CAAC,EAAE,EAAE;IACzCR,WAAW,CAACS,KAAK,GAAGJ,MAAM,CAACG,CAAC,GAAGH,MAAM,CAACE,MAAM,CAAC;IAC7C,IAAI,CAACG,aAAa,CAACZ,SAAS,CAACU,CAAC,CAAC,EAAER,WAAW,CAAC;EAC/C;EAEA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}