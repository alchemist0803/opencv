{"ast":null,"code":"'use strict;';\n\n/**\n * Created by acastillo on 7/7/16.\n */\nvar FFTUtils = require(\"ml-fft\").FFTUtils;\nfunction convolutionFFT(input, kernel, opt) {\n  var tmp = matrix2Array(input);\n  var inputData = tmp.data;\n  var options = Object.assign({\n    normalize: false,\n    divisor: 1,\n    rows: tmp.rows,\n    cols: tmp.cols\n  }, opt);\n  var nRows, nCols;\n  if (options.rows && options.cols) {\n    nRows = options.rows;\n    nCols = options.cols;\n  } else {\n    throw new Error(\"Invalid number of rows or columns \" + nRows + \" \" + nCols);\n  }\n  var divisor = options.divisor;\n  var i, j;\n  var kHeight = kernel.length;\n  var kWidth = kernel[0].length;\n  if (options.normalize) {\n    divisor = 0;\n    for (i = 0; i < kHeight; i++) for (j = 0; j < kWidth; j++) divisor += kernel[i][j];\n  }\n  if (divisor === 0) {\n    throw new RangeError('convolution: The divisor is equal to zero');\n  }\n  var radix2Sized = FFTUtils.toRadix2(inputData, nRows, nCols);\n  var conv = FFTUtils.convolute(radix2Sized.data, kernel, radix2Sized.rows, radix2Sized.cols);\n  conv = FFTUtils.crop(conv, radix2Sized.rows, radix2Sized.cols, nRows, nCols);\n  if (divisor != 0 && divisor != 1) {\n    for (i = 0; i < conv.length; i++) {\n      conv[i] /= divisor;\n    }\n  }\n  return conv;\n}\nfunction convolutionDirect(input, kernel, opt) {\n  var tmp = matrix2Array(input);\n  var inputData = tmp.data;\n  var options = Object.assign({\n    normalize: false,\n    divisor: 1,\n    rows: tmp.rows,\n    cols: tmp.cols\n  }, opt);\n  var nRows, nCols;\n  if (options.rows && options.cols) {\n    nRows = options.rows;\n    nCols = options.cols;\n  } else {\n    throw new Error(\"Invalid number of rows or columns \" + nRows + \" \" + nCols);\n  }\n  var divisor = options.divisor;\n  var kHeight = kernel.length;\n  var kWidth = kernel[0].length;\n  var i, j, x, y, index, sum, kVal, row, col;\n  if (options.normalize) {\n    divisor = 0;\n    for (i = 0; i < kHeight; i++) for (j = 0; j < kWidth; j++) divisor += kernel[i][j];\n  }\n  if (divisor === 0) {\n    throw new RangeError('convolution: The divisor is equal to zero');\n  }\n  var output = new Array(nRows * nCols);\n  var hHeight = Math.floor(kHeight / 2);\n  var hWidth = Math.floor(kWidth / 2);\n  for (y = 0; y < nRows; y++) {\n    for (x = 0; x < nCols; x++) {\n      sum = 0;\n      for (j = 0; j < kHeight; j++) {\n        for (i = 0; i < kWidth; i++) {\n          kVal = kernel[kHeight - j - 1][kWidth - i - 1];\n          row = (y + j - hHeight + nRows) % nRows;\n          col = (x + i - hWidth + nCols) % nCols;\n          index = row * nCols + col;\n          sum += inputData[index] * kVal;\n        }\n      }\n      index = y * nCols + x;\n      output[index] = sum / divisor;\n    }\n  }\n  return output;\n}\nfunction LoG(sigma, nPoints, options) {\n  var factor = 1000;\n  if (options && options.factor) {\n    factor = options.factor;\n  }\n  var kernel = new Array(nPoints);\n  var i, j, tmp, y2, tmp2;\n  factor *= -1; //-1/(Math.PI*Math.pow(sigma,4));\n  var center = (nPoints - 1) / 2;\n  var sigma2 = 2 * sigma * sigma;\n  for (i = 0; i < nPoints; i++) {\n    kernel[i] = new Array(nPoints);\n    y2 = (i - center) * (i - center);\n    for (j = 0; j < nPoints; j++) {\n      tmp = -((j - center) * (j - center) + y2) / sigma2;\n      kernel[i][j] = Math.round(factor * (1 + tmp) * Math.exp(tmp));\n    }\n  }\n  return kernel;\n}\nfunction matrix2Array(input) {\n  var inputData = input;\n  var nRows, nCols;\n  if (typeof input[0] != \"number\") {\n    nRows = input.length;\n    nCols = input[0].length;\n    inputData = new Array(nRows * nCols);\n    for (var i = 0; i < nRows; i++) {\n      for (var j = 0; j < nCols; j++) {\n        inputData[i * nCols + j] = input[i][j];\n      }\n    }\n  } else {\n    var tmp = Math.sqrt(input.length);\n    if (Number.isInteger(tmp)) {\n      nRows = tmp;\n      nCols = tmp;\n    }\n  }\n  return {\n    data: inputData,\n    rows: nRows,\n    cols: nCols\n  };\n}\nmodule.exports = {\n  fft: convolutionFFT,\n  direct: convolutionDirect,\n  kernelFactory: {\n    LoG: LoG\n  },\n  matrix2Array: matrix2Array\n};","map":{"version":3,"names":["FFTUtils","require","convolutionFFT","input","kernel","opt","tmp","matrix2Array","inputData","data","options","Object","assign","normalize","divisor","rows","cols","nRows","nCols","Error","i","j","kHeight","length","kWidth","RangeError","radix2Sized","toRadix2","conv","convolute","crop","convolutionDirect","x","y","index","sum","kVal","row","col","output","Array","hHeight","Math","floor","hWidth","LoG","sigma","nPoints","factor","y2","tmp2","center","sigma2","round","exp","sqrt","Number","isInteger","module","exports","fft","direct","kernelFactory"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-matrix-convolution/src/index.js"],"sourcesContent":["'use strict;'\n/**\n * Created by acastillo on 7/7/16.\n */\nvar FFTUtils = require(\"ml-fft\").FFTUtils;\n\nfunction convolutionFFT(input, kernel, opt) {\n    var tmp = matrix2Array(input);\n    var inputData = tmp.data;\n    var options = Object.assign({normalize : false, divisor : 1, rows:tmp.rows, cols:tmp.cols}, opt);\n\n    var nRows, nCols;\n    if (options.rows&&options.cols) {\n        nRows = options.rows;\n        nCols = options.cols;\n    }\n    else {\n        throw new Error(\"Invalid number of rows or columns \" + nRows + \" \" + nCols)\n    }\n\n    var divisor = options.divisor;\n    var i,j;\n    var kHeight =  kernel.length;\n    var kWidth =  kernel[0].length;\n    if (options.normalize) {\n        divisor = 0;\n        for (i = 0; i < kHeight; i++)\n            for (j = 0; j < kWidth; j++)\n                divisor += kernel[i][j];\n    }\n    if (divisor === 0) {\n        throw new RangeError('convolution: The divisor is equal to zero');\n    }\n\n    var radix2Sized = FFTUtils.toRadix2(inputData, nRows, nCols);\n    var conv = FFTUtils.convolute(radix2Sized.data, kernel, radix2Sized.rows, radix2Sized.cols);\n    conv = FFTUtils.crop(conv, radix2Sized.rows, radix2Sized.cols, nRows, nCols);\n\n    if(divisor!=0&&divisor!=1){\n        for(i=0;i<conv.length;i++){\n            conv[i]/=divisor;\n        }\n    }\n\n    return conv;\n}\n\nfunction convolutionDirect(input, kernel, opt) {\n    var tmp = matrix2Array(input);\n    var inputData = tmp.data;\n    var options = Object.assign({normalize : false, divisor : 1, rows:tmp.rows, cols:tmp.cols}, opt);\n\n    var nRows, nCols;\n    if (options.rows&&options.cols) {\n        nRows = options.rows;\n        nCols = options.cols;\n    }\n    else {\n        throw new Error(\"Invalid number of rows or columns \" + nRows + \" \" + nCols)\n    }\n\n    var divisor = options.divisor;\n    var kHeight =  kernel.length;\n    var kWidth =  kernel[0].length;\n    var i, j, x, y, index, sum, kVal, row, col;\n    if (options.normalize) {\n        divisor = 0;\n        for (i = 0; i < kHeight; i++)\n            for (j = 0; j < kWidth; j++)\n                divisor += kernel[i][j];\n    }\n    if (divisor === 0) {\n        throw new RangeError('convolution: The divisor is equal to zero');\n    }\n\n    var output = new Array(nRows*nCols);\n\n    var hHeight = Math.floor(kHeight/2);\n    var hWidth = Math.floor(kWidth/2);\n\n    for (y = 0; y < nRows; y++) {\n        for (x = 0; x < nCols; x++) {\n            sum = 0;\n            for ( j = 0; j < kHeight; j++) {\n                for ( i = 0; i < kWidth; i++) {\n                    kVal = kernel[kHeight - j - 1][kWidth - i - 1];\n                    row = (y + j -hHeight + nRows) % nRows;\n                    col = (x + i - hWidth + nCols) % nCols;\n                    index = (row * nCols + col);\n                    sum += inputData[index] * kVal;\n                }\n            }\n            index = (y * nCols + x);\n            output[index]= sum / divisor;\n        }\n    }\n    return output;\n}\n\n\n\nfunction LoG(sigma, nPoints, options){\n    var factor = 1000;\n    if(options&&options.factor){\n        factor = options.factor;\n    }\n\n    var kernel = new Array(nPoints);\n    var i,j,tmp,y2,tmp2;\n\n    factor*=-1;//-1/(Math.PI*Math.pow(sigma,4));\n    var center = (nPoints-1)/2;\n    var sigma2 = 2*sigma*sigma;\n    for( i=0;i<nPoints;i++){\n        kernel[i]=new Array(nPoints);\n        y2 = (i-center)*(i-center);\n        for( j=0;j<nPoints;j++){\n            tmp = -((j-center)*(j-center)+y2)/sigma2;\n            kernel[i][j]=Math.round(factor*(1+tmp)*Math.exp(tmp));\n        }\n    }\n\n    return kernel;\n}\n\nfunction matrix2Array(input){\n    var inputData=input;\n    var nRows, nCols;\n    if(typeof input[0]!=\"number\"){\n        nRows = input.length;\n        nCols = input[0].length;\n        inputData = new Array(nRows*nCols);\n        for(var i=0;i<nRows;i++){\n            for(var j=0;j<nCols;j++){\n                inputData[i*nCols+j]=input[i][j];\n            }\n        }\n    }\n    else{\n        var tmp = Math.sqrt(input.length);\n        if(Number.isInteger(tmp)){\n            nRows=tmp;\n            nCols=tmp;\n        }\n    }\n\n    return {data:inputData,rows:nRows,cols:nCols};\n}\n\n\nmodule.exports = {\n    fft:convolutionFFT,\n    direct:convolutionDirect,\n    kernelFactory:{LoG:LoG},\n    matrix2Array:matrix2Array\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}