{"ast":null,"code":"// REFERENCES :\n// https://stackoverflow.com/questions/38285229/calculating-aspect-ratio-of-perspective-transform-destination-image/38402378#38402378\n// http://www.corrmap.com/features/homography_transformation.php\n// https://ags.cs.uni-kl.de/fileadmin/inf_ags/3dcv-ws11-12/3DCV_WS11-12_lec04.pdf\n// http://graphics.cs.cmu.edu/courses/15-463/2011_fall/Lectures/morphing.pdf\n\nimport { Matrix, inverse, SingularValueDecomposition } from 'ml-matrix';\nimport Image from '../Image';\nfunction order4Points(pts) {\n  let tl = 0;\n  let tr = 0;\n  let br = 0;\n  let bl = 0;\n  let minX = pts[0][0];\n  let indexMinX = 0;\n  for (let i = 1; i < pts.length; i++) {\n    if (pts[i][0] < minX) {\n      minX = pts[i][0];\n      indexMinX = i;\n    }\n  }\n  let minX2 = pts[(indexMinX + 1) % pts.length][0];\n  let indexMinX2 = (indexMinX + 1) % pts.length;\n  for (let i = 1; i < pts.length; i++) {\n    if (pts[i][0] < minX2 && i !== indexMinX) {\n      minX2 = pts[i][0];\n      indexMinX2 = i;\n    }\n  }\n  if (pts[indexMinX2][1] < pts[indexMinX][1]) {\n    tl = pts[indexMinX2];\n    bl = pts[indexMinX];\n    if (indexMinX !== (indexMinX2 + 1) % 4) {\n      tr = pts[(indexMinX2 + 1) % 4];\n      br = pts[(indexMinX2 + 2) % 4];\n    } else {\n      tr = pts[(indexMinX2 + 2) % 4];\n      br = pts[(indexMinX2 + 3) % 4];\n    }\n  } else {\n    bl = pts[indexMinX2];\n    tl = pts[indexMinX];\n    if (indexMinX2 !== (indexMinX + 1) % 4) {\n      tr = pts[(indexMinX + 1) % 4];\n      br = pts[(indexMinX + 2) % 4];\n    } else {\n      tr = pts[(indexMinX + 2) % 4];\n      br = pts[(indexMinX + 3) % 4];\n    }\n  }\n  return [tl, tr, br, bl];\n}\nfunction distance2Points(p1, p2) {\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\nfunction crossVect(u, v) {\n  let result = [u[1] * v[2] - u[2] * v[1], u[2] * v[0] - u[0] * v[2], u[0] * v[1] - u[1] * v[0]];\n  return result;\n}\nfunction dotVect(u, v) {\n  let result = u[0] * v[0] + u[1] * v[1] + u[2] * v[2];\n  return result;\n}\nfunction computeWidthAndHeigth(tl, tr, br, bl, widthImage, heightImage) {\n  let w = Math.max(distance2Points(tl, tr), distance2Points(bl, br));\n  let h = Math.max(distance2Points(tl, bl), distance2Points(tr, br));\n  let finalW = 0;\n  let finalH = 0;\n  let u0 = Math.ceil(widthImage / 2);\n  let v0 = Math.ceil(heightImage / 2);\n  let arVis = w / h;\n  let m1 = [tl[0], tl[1], 1];\n  let m2 = [tr[0], tr[1], 1];\n  let m3 = [bl[0], bl[1], 1];\n  let m4 = [br[0], br[1], 1];\n  let k2 = dotVect(crossVect(m1, m4), m3) / dotVect(crossVect(m2, m4), m3);\n  let k3 = dotVect(crossVect(m1, m4), m2) / dotVect(crossVect(m3, m4), m2);\n  let n2 = [k2 * m2[0] - m1[0], k2 * m2[1] - m1[1], k2 * m2[2] - m1[2]];\n  let n3 = [k3 * m3[0] - m1[0], k3 * m3[1] - m1[1], k3 * m3[2] - m1[2]];\n  let n21 = n2[0];\n  let n22 = n2[1];\n  let n23 = n2[2];\n  let n31 = n3[0];\n  let n32 = n3[1];\n  let n33 = n3[2];\n  let f = 1.0 / (n23 * n33) * (n21 * n31 - (n21 * n33 + n23 * n31) * u0 + n23 * n33 * u0 * u0 + (n22 * n32 - (n22 * n33 + n23 * n32) * v0 + n23 * n33 * v0 * v0));\n  if (f >= 0) {\n    f = Math.sqrt(f);\n  } else {\n    f = Math.sqrt(-f);\n  }\n  let A = new Matrix([[f, 0, u0], [0, f, v0], [0, 0, 1]]);\n  let At = A.transpose();\n  let Ati = inverse(At);\n  let Ai = inverse(A);\n  let n2R = Matrix.rowVector(n2);\n  let n3R = Matrix.rowVector(n3);\n  let arReal = Math.sqrt(dotVect(n2R.mmul(Ati).mmul(Ai).to1DArray(), n2) / dotVect(n3R.mmul(Ati).mmul(Ai).to1DArray(), n3));\n  if (arReal === 0 || arVis === 0) {\n    finalW = Math.ceil(w);\n    finalH = Math.ceil(h);\n  } else if (arReal < arVis) {\n    finalW = Math.ceil(w);\n    finalH = Math.ceil(finalW / arReal);\n  } else {\n    finalH = Math.ceil(h);\n    finalW = Math.ceil(arReal * finalH);\n  }\n  return [finalW, finalH];\n}\nfunction projectionPoint(x, y, a, b, c, d, e, f, g, h, image, channel) {\n  let [newX, newY] = [(a * x + b * y + c) / (g * x + h * y + 1), (d * x + e * y + f) / (g * x + h * y + 1)];\n  return image.getValueXY(Math.floor(newX), Math.floor(newY), channel);\n}\n\n/**\n * Transform a quadrilateral into a rectangle\n * @memberof Image\n * @instance\n * @param {Array<Array<number>>} [pts] - Array of the four corners.\n * @param {object} [options]\n * @param {boolean} [options.calculateRatio=true] - true if you want to calculate the aspect ratio \"width x height\" by taking the perspectiv into consideration.\n * @return {Image} The new image, which is a rectangle\n * @example\n * var cropped = image.warpingFourPoints({\n *   pts: [[0,0], [100, 0], [80, 50], [10, 50]]\n * });\n */\n\nexport default function warpingFourPoints(pts, options = {}) {\n  let {\n    calculateRatio = true\n  } = options;\n  if (pts.length !== 4) {\n    throw new Error(`The array pts must have four elements, which are the four corners. Currently, pts have ${pts.length} elements`);\n  }\n  let [pt1, pt2, pt3, pt4] = pts;\n  let quadrilaterial = [pt1, pt2, pt3, pt4];\n  let [tl, tr, br, bl] = order4Points(quadrilaterial);\n  let widthRect;\n  let heightRect;\n  if (calculateRatio) {\n    [widthRect, heightRect] = computeWidthAndHeigth(tl, tr, br, bl, this.width, this.height);\n  } else {\n    widthRect = Math.ceil(Math.max(distance2Points(tl, tr), distance2Points(bl, br)));\n    heightRect = Math.ceil(Math.max(distance2Points(tl, bl), distance2Points(tr, br)));\n  }\n  let newImage = Image.createFrom(this, {\n    width: widthRect,\n    height: heightRect\n  });\n  let [X1, Y1] = tl;\n  let [X2, Y2] = tr;\n  let [X3, Y3] = br;\n  let [X4, Y4] = bl;\n  let [x1, y1] = [0, 0];\n  let [x2, y2] = [0, widthRect - 1];\n  let [x3, y3] = [heightRect - 1, widthRect - 1];\n  let [x4, y4] = [heightRect - 1, 0];\n  let S = new Matrix([[x1, y1, 1, 0, 0, 0, -x1 * X1, -y1 * X1], [x2, y2, 1, 0, 0, 0, -x2 * X2, -y2 * X2], [x3, y3, 1, 0, 0, 0, -x3 * X3, -y1 * X3], [x4, y4, 1, 0, 0, 0, -x4 * X4, -y4 * X4], [0, 0, 0, x1, y1, 1, -x1 * Y1, -y1 * Y1], [0, 0, 0, x2, y2, 1, -x2 * Y2, -y2 * Y2], [0, 0, 0, x3, y3, 1, -x3 * Y3, -y3 * Y3], [0, 0, 0, x4, y4, 1, -x4 * Y4, -y4 * Y4]]);\n  let D = Matrix.columnVector([X1, X2, X3, X4, Y1, Y2, Y3, Y4]);\n  let svd = new SingularValueDecomposition(S);\n  let T = svd.solve(D); // solve S*T = D\n  let [a, b, c, d, e, f, g, h] = T.to1DArray();\n  let Xt = new Matrix(heightRect, widthRect);\n  for (let channel = 0; channel < this.channels; channel++) {\n    for (let i = 0; i < heightRect; i++) {\n      for (let j = 0; j < widthRect; j++) {\n        Xt.set(i, j, projectionPoint(i, j, a, b, c, d, e, f, g, h, this, channel));\n      }\n    }\n    newImage.setMatrix(Xt, {\n      channel: channel\n    });\n  }\n  return newImage;\n}","map":{"version":3,"names":["Matrix","inverse","SingularValueDecomposition","Image","order4Points","pts","tl","tr","br","bl","minX","indexMinX","i","length","minX2","indexMinX2","distance2Points","p1","p2","Math","sqrt","pow","crossVect","u","v","result","dotVect","computeWidthAndHeigth","widthImage","heightImage","w","max","h","finalW","finalH","u0","ceil","v0","arVis","m1","m2","m3","m4","k2","k3","n2","n3","n21","n22","n23","n31","n32","n33","f","A","At","transpose","Ati","Ai","n2R","rowVector","n3R","arReal","mmul","to1DArray","projectionPoint","x","y","a","b","c","d","e","g","image","channel","newX","newY","getValueXY","floor","warpingFourPoints","options","calculateRatio","Error","pt1","pt2","pt3","pt4","quadrilaterial","widthRect","heightRect","width","height","newImage","createFrom","X1","Y1","X2","Y2","X3","Y3","X4","Y4","x1","y1","x2","y2","x3","y3","x4","y4","S","D","columnVector","svd","T","solve","Xt","channels","j","set","setMatrix"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/warping.js"],"sourcesContent":["// REFERENCES :\n// https://stackoverflow.com/questions/38285229/calculating-aspect-ratio-of-perspective-transform-destination-image/38402378#38402378\n// http://www.corrmap.com/features/homography_transformation.php\n// https://ags.cs.uni-kl.de/fileadmin/inf_ags/3dcv-ws11-12/3DCV_WS11-12_lec04.pdf\n// http://graphics.cs.cmu.edu/courses/15-463/2011_fall/Lectures/morphing.pdf\n\nimport { Matrix, inverse, SingularValueDecomposition } from 'ml-matrix';\n\nimport Image from '../Image';\n\nfunction order4Points(pts) {\n  let tl = 0;\n  let tr = 0;\n  let br = 0;\n  let bl = 0;\n\n  let minX = pts[0][0];\n  let indexMinX = 0;\n\n  for (let i = 1; i < pts.length; i++) {\n    if (pts[i][0] < minX) {\n      minX = pts[i][0];\n      indexMinX = i;\n    }\n  }\n\n  let minX2 = pts[(indexMinX + 1) % pts.length][0];\n  let indexMinX2 = (indexMinX + 1) % pts.length;\n\n  for (let i = 1; i < pts.length; i++) {\n    if (pts[i][0] < minX2 && i !== indexMinX) {\n      minX2 = pts[i][0];\n      indexMinX2 = i;\n    }\n  }\n\n  if (pts[indexMinX2][1] < pts[indexMinX][1]) {\n    tl = pts[indexMinX2];\n    bl = pts[indexMinX];\n    if (indexMinX !== (indexMinX2 + 1) % 4) {\n      tr = pts[(indexMinX2 + 1) % 4];\n      br = pts[(indexMinX2 + 2) % 4];\n    } else {\n      tr = pts[(indexMinX2 + 2) % 4];\n      br = pts[(indexMinX2 + 3) % 4];\n    }\n  } else {\n    bl = pts[indexMinX2];\n    tl = pts[indexMinX];\n    if (indexMinX2 !== (indexMinX + 1) % 4) {\n      tr = pts[(indexMinX + 1) % 4];\n      br = pts[(indexMinX + 2) % 4];\n    } else {\n      tr = pts[(indexMinX + 2) % 4];\n      br = pts[(indexMinX + 3) % 4];\n    }\n  }\n\n  return [tl, tr, br, bl];\n}\n\nfunction distance2Points(p1, p2) {\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\n\nfunction crossVect(u, v) {\n  let result = [\n    u[1] * v[2] - u[2] * v[1],\n    u[2] * v[0] - u[0] * v[2],\n    u[0] * v[1] - u[1] * v[0],\n  ];\n  return result;\n}\n\nfunction dotVect(u, v) {\n  let result = u[0] * v[0] + u[1] * v[1] + u[2] * v[2];\n  return result;\n}\n\nfunction computeWidthAndHeigth(tl, tr, br, bl, widthImage, heightImage) {\n  let w = Math.max(distance2Points(tl, tr), distance2Points(bl, br));\n  let h = Math.max(distance2Points(tl, bl), distance2Points(tr, br));\n  let finalW = 0;\n  let finalH = 0;\n  let u0 = Math.ceil(widthImage / 2);\n  let v0 = Math.ceil(heightImage / 2);\n  let arVis = w / h;\n\n  let m1 = [tl[0], tl[1], 1];\n  let m2 = [tr[0], tr[1], 1];\n  let m3 = [bl[0], bl[1], 1];\n  let m4 = [br[0], br[1], 1];\n\n  let k2 = dotVect(crossVect(m1, m4), m3) / dotVect(crossVect(m2, m4), m3);\n  let k3 = dotVect(crossVect(m1, m4), m2) / dotVect(crossVect(m3, m4), m2);\n\n  let n2 = [k2 * m2[0] - m1[0], k2 * m2[1] - m1[1], k2 * m2[2] - m1[2]];\n  let n3 = [k3 * m3[0] - m1[0], k3 * m3[1] - m1[1], k3 * m3[2] - m1[2]];\n\n  let n21 = n2[0];\n  let n22 = n2[1];\n  let n23 = n2[2];\n\n  let n31 = n3[0];\n  let n32 = n3[1];\n  let n33 = n3[2];\n\n  let f =\n    (1.0 / (n23 * n33)) *\n    (n21 * n31 -\n      (n21 * n33 + n23 * n31) * u0 +\n      n23 * n33 * u0 * u0 +\n      (n22 * n32 - (n22 * n33 + n23 * n32) * v0 + n23 * n33 * v0 * v0));\n  if (f >= 0) {\n    f = Math.sqrt(f);\n  } else {\n    f = Math.sqrt(-f);\n  }\n\n  let A = new Matrix([\n    [f, 0, u0],\n    [0, f, v0],\n    [0, 0, 1],\n  ]);\n  let At = A.transpose();\n  let Ati = inverse(At);\n  let Ai = inverse(A);\n\n  let n2R = Matrix.rowVector(n2);\n  let n3R = Matrix.rowVector(n3);\n\n  let arReal = Math.sqrt(\n    dotVect(n2R.mmul(Ati).mmul(Ai).to1DArray(), n2) /\n      dotVect(n3R.mmul(Ati).mmul(Ai).to1DArray(), n3),\n  );\n\n  if (arReal === 0 || arVis === 0) {\n    finalW = Math.ceil(w);\n    finalH = Math.ceil(h);\n  } else if (arReal < arVis) {\n    finalW = Math.ceil(w);\n    finalH = Math.ceil(finalW / arReal);\n  } else {\n    finalH = Math.ceil(h);\n    finalW = Math.ceil(arReal * finalH);\n  }\n  return [finalW, finalH];\n}\n\nfunction projectionPoint(x, y, a, b, c, d, e, f, g, h, image, channel) {\n  let [newX, newY] = [\n    (a * x + b * y + c) / (g * x + h * y + 1),\n    (d * x + e * y + f) / (g * x + h * y + 1),\n  ];\n  return image.getValueXY(Math.floor(newX), Math.floor(newY), channel);\n}\n\n/**\n * Transform a quadrilateral into a rectangle\n * @memberof Image\n * @instance\n * @param {Array<Array<number>>} [pts] - Array of the four corners.\n * @param {object} [options]\n * @param {boolean} [options.calculateRatio=true] - true if you want to calculate the aspect ratio \"width x height\" by taking the perspectiv into consideration.\n * @return {Image} The new image, which is a rectangle\n * @example\n * var cropped = image.warpingFourPoints({\n *   pts: [[0,0], [100, 0], [80, 50], [10, 50]]\n * });\n */\n\nexport default function warpingFourPoints(pts, options = {}) {\n  let { calculateRatio = true } = options;\n\n  if (pts.length !== 4) {\n    throw new Error(\n      `The array pts must have four elements, which are the four corners. Currently, pts have ${pts.length} elements`,\n    );\n  }\n\n  let [pt1, pt2, pt3, pt4] = pts;\n\n  let quadrilaterial = [pt1, pt2, pt3, pt4];\n  let [tl, tr, br, bl] = order4Points(quadrilaterial);\n  let widthRect;\n  let heightRect;\n  if (calculateRatio) {\n    [widthRect, heightRect] = computeWidthAndHeigth(\n      tl,\n      tr,\n      br,\n      bl,\n      this.width,\n      this.height,\n    );\n  } else {\n    widthRect = Math.ceil(\n      Math.max(distance2Points(tl, tr), distance2Points(bl, br)),\n    );\n    heightRect = Math.ceil(\n      Math.max(distance2Points(tl, bl), distance2Points(tr, br)),\n    );\n  }\n  let newImage = Image.createFrom(this, {\n    width: widthRect,\n    height: heightRect,\n  });\n\n  let [X1, Y1] = tl;\n  let [X2, Y2] = tr;\n  let [X3, Y3] = br;\n  let [X4, Y4] = bl;\n  let [x1, y1] = [0, 0];\n  let [x2, y2] = [0, widthRect - 1];\n  let [x3, y3] = [heightRect - 1, widthRect - 1];\n  let [x4, y4] = [heightRect - 1, 0];\n\n  let S = new Matrix([\n    [x1, y1, 1, 0, 0, 0, -x1 * X1, -y1 * X1],\n    [x2, y2, 1, 0, 0, 0, -x2 * X2, -y2 * X2],\n    [x3, y3, 1, 0, 0, 0, -x3 * X3, -y1 * X3],\n    [x4, y4, 1, 0, 0, 0, -x4 * X4, -y4 * X4],\n    [0, 0, 0, x1, y1, 1, -x1 * Y1, -y1 * Y1],\n    [0, 0, 0, x2, y2, 1, -x2 * Y2, -y2 * Y2],\n    [0, 0, 0, x3, y3, 1, -x3 * Y3, -y3 * Y3],\n    [0, 0, 0, x4, y4, 1, -x4 * Y4, -y4 * Y4],\n  ]);\n\n  let D = Matrix.columnVector([X1, X2, X3, X4, Y1, Y2, Y3, Y4]);\n\n  let svd = new SingularValueDecomposition(S);\n  let T = svd.solve(D); // solve S*T = D\n  let [a, b, c, d, e, f, g, h] = T.to1DArray();\n\n  let Xt = new Matrix(heightRect, widthRect);\n\n  for (let channel = 0; channel < this.channels; channel++) {\n    for (let i = 0; i < heightRect; i++) {\n      for (let j = 0; j < widthRect; j++) {\n        Xt.set(\n          i,\n          j,\n          projectionPoint(i, j, a, b, c, d, e, f, g, h, this, channel),\n        );\n      }\n    }\n    newImage.setMatrix(Xt, { channel: channel });\n  }\n\n  return newImage;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,EAAEC,OAAO,EAAEC,0BAA0B,QAAQ,WAAW;AAEvE,OAAOC,KAAK,MAAM,UAAU;AAE5B,SAASC,YAAYA,CAACC,GAAG,EAAE;EACzB,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EAEV,IAAIC,IAAI,GAAGL,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,IAAIM,SAAS,GAAG,CAAC;EAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,GAAG,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAIP,GAAG,CAACO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGF,IAAI,EAAE;MACpBA,IAAI,GAAGL,GAAG,CAACO,CAAC,CAAC,CAAC,CAAC,CAAC;MAChBD,SAAS,GAAGC,CAAC;IACf;EACF;EAEA,IAAIE,KAAK,GAAGT,GAAG,CAAC,CAACM,SAAS,GAAG,CAAC,IAAIN,GAAG,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC;EAChD,IAAIE,UAAU,GAAG,CAACJ,SAAS,GAAG,CAAC,IAAIN,GAAG,CAACQ,MAAM;EAE7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,GAAG,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAIP,GAAG,CAACO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGE,KAAK,IAAIF,CAAC,KAAKD,SAAS,EAAE;MACxCG,KAAK,GAAGT,GAAG,CAACO,CAAC,CAAC,CAAC,CAAC,CAAC;MACjBG,UAAU,GAAGH,CAAC;IAChB;EACF;EAEA,IAAIP,GAAG,CAACU,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGV,GAAG,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;IAC1CL,EAAE,GAAGD,GAAG,CAACU,UAAU,CAAC;IACpBN,EAAE,GAAGJ,GAAG,CAACM,SAAS,CAAC;IACnB,IAAIA,SAAS,KAAK,CAACI,UAAU,GAAG,CAAC,IAAI,CAAC,EAAE;MACtCR,EAAE,GAAGF,GAAG,CAAC,CAACU,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC;MAC9BP,EAAE,GAAGH,GAAG,CAAC,CAACU,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC,MAAM;MACLR,EAAE,GAAGF,GAAG,CAAC,CAACU,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC;MAC9BP,EAAE,GAAGH,GAAG,CAAC,CAACU,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC;IAChC;EACF,CAAC,MAAM;IACLN,EAAE,GAAGJ,GAAG,CAACU,UAAU,CAAC;IACpBT,EAAE,GAAGD,GAAG,CAACM,SAAS,CAAC;IACnB,IAAII,UAAU,KAAK,CAACJ,SAAS,GAAG,CAAC,IAAI,CAAC,EAAE;MACtCJ,EAAE,GAAGF,GAAG,CAAC,CAACM,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;MAC7BH,EAAE,GAAGH,GAAG,CAAC,CAACM,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,MAAM;MACLJ,EAAE,GAAGF,GAAG,CAAC,CAACM,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;MAC7BH,EAAE,GAAGH,GAAG,CAAC,CAACM,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/B;EACF;EAEA,OAAO,CAACL,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;AACzB;AAEA,SAASO,eAAeA,CAACC,EAAE,EAAEC,EAAE,EAAE;EAC/B,OAAOC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAACJ,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGC,IAAI,CAACE,GAAG,CAACJ,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3E;AAEA,SAASI,SAASA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACvB,IAAIC,MAAM,GAAG,CACXF,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,EACzBD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,EACzBD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAC1B;EACD,OAAOC,MAAM;AACf;AAEA,SAASC,OAAOA,CAACH,CAAC,EAAEC,CAAC,EAAE;EACrB,IAAIC,MAAM,GAAGF,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;EACpD,OAAOC,MAAM;AACf;AAEA,SAASE,qBAAqBA,CAACrB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEmB,UAAU,EAAEC,WAAW,EAAE;EACtE,IAAIC,CAAC,GAAGX,IAAI,CAACY,GAAG,CAACf,eAAe,CAACV,EAAE,EAAEC,EAAE,CAAC,EAAES,eAAe,CAACP,EAAE,EAAED,EAAE,CAAC,CAAC;EAClE,IAAIwB,CAAC,GAAGb,IAAI,CAACY,GAAG,CAACf,eAAe,CAACV,EAAE,EAAEG,EAAE,CAAC,EAAEO,eAAe,CAACT,EAAE,EAAEC,EAAE,CAAC,CAAC;EAClE,IAAIyB,MAAM,GAAG,CAAC;EACd,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,EAAE,GAAGhB,IAAI,CAACiB,IAAI,CAACR,UAAU,GAAG,CAAC,CAAC;EAClC,IAAIS,EAAE,GAAGlB,IAAI,CAACiB,IAAI,CAACP,WAAW,GAAG,CAAC,CAAC;EACnC,IAAIS,KAAK,GAAGR,CAAC,GAAGE,CAAC;EAEjB,IAAIO,EAAE,GAAG,CAACjC,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1B,IAAIkC,EAAE,GAAG,CAACjC,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1B,IAAIkC,EAAE,GAAG,CAAChC,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1B,IAAIiC,EAAE,GAAG,CAAClC,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAE1B,IAAImC,EAAE,GAAGjB,OAAO,CAACJ,SAAS,CAACiB,EAAE,EAAEG,EAAE,CAAC,EAAED,EAAE,CAAC,GAAGf,OAAO,CAACJ,SAAS,CAACkB,EAAE,EAAEE,EAAE,CAAC,EAAED,EAAE,CAAC;EACxE,IAAIG,EAAE,GAAGlB,OAAO,CAACJ,SAAS,CAACiB,EAAE,EAAEG,EAAE,CAAC,EAAEF,EAAE,CAAC,GAAGd,OAAO,CAACJ,SAAS,CAACmB,EAAE,EAAEC,EAAE,CAAC,EAAEF,EAAE,CAAC;EAExE,IAAIK,EAAE,GAAG,CAACF,EAAE,GAAGH,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,EAAEI,EAAE,GAAGH,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,EAAEI,EAAE,GAAGH,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,CAAC;EACrE,IAAIO,EAAE,GAAG,CAACF,EAAE,GAAGH,EAAE,CAAC,CAAC,CAAC,GAAGF,EAAE,CAAC,CAAC,CAAC,EAAEK,EAAE,GAAGH,EAAE,CAAC,CAAC,CAAC,GAAGF,EAAE,CAAC,CAAC,CAAC,EAAEK,EAAE,GAAGH,EAAE,CAAC,CAAC,CAAC,GAAGF,EAAE,CAAC,CAAC,CAAC,CAAC;EAErE,IAAIQ,GAAG,GAAGF,EAAE,CAAC,CAAC,CAAC;EACf,IAAIG,GAAG,GAAGH,EAAE,CAAC,CAAC,CAAC;EACf,IAAII,GAAG,GAAGJ,EAAE,CAAC,CAAC,CAAC;EAEf,IAAIK,GAAG,GAAGJ,EAAE,CAAC,CAAC,CAAC;EACf,IAAIK,GAAG,GAAGL,EAAE,CAAC,CAAC,CAAC;EACf,IAAIM,GAAG,GAAGN,EAAE,CAAC,CAAC,CAAC;EAEf,IAAIO,CAAC,GACF,GAAG,IAAIJ,GAAG,GAAGG,GAAG,CAAC,IACjBL,GAAG,GAAGG,GAAG,GACR,CAACH,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG,IAAIf,EAAE,GAC5Bc,GAAG,GAAGG,GAAG,GAAGjB,EAAE,GAAGA,EAAE,IAClBa,GAAG,GAAGG,GAAG,GAAG,CAACH,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG,IAAId,EAAE,GAAGY,GAAG,GAAGG,GAAG,GAAGf,EAAE,GAAGA,EAAE,CAAC,CAAC;EACrE,IAAIgB,CAAC,IAAI,CAAC,EAAE;IACVA,CAAC,GAAGlC,IAAI,CAACC,IAAI,CAACiC,CAAC,CAAC;EAClB,CAAC,MAAM;IACLA,CAAC,GAAGlC,IAAI,CAACC,IAAI,CAAC,CAACiC,CAAC,CAAC;EACnB;EAEA,IAAIC,CAAC,GAAG,IAAItD,MAAM,CAAC,CACjB,CAACqD,CAAC,EAAE,CAAC,EAAElB,EAAE,CAAC,EACV,CAAC,CAAC,EAAEkB,CAAC,EAAEhB,EAAE,CAAC,EACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV,CAAC;EACF,IAAIkB,EAAE,GAAGD,CAAC,CAACE,SAAS,CAAC,CAAC;EACtB,IAAIC,GAAG,GAAGxD,OAAO,CAACsD,EAAE,CAAC;EACrB,IAAIG,EAAE,GAAGzD,OAAO,CAACqD,CAAC,CAAC;EAEnB,IAAIK,GAAG,GAAG3D,MAAM,CAAC4D,SAAS,CAACf,EAAE,CAAC;EAC9B,IAAIgB,GAAG,GAAG7D,MAAM,CAAC4D,SAAS,CAACd,EAAE,CAAC;EAE9B,IAAIgB,MAAM,GAAG3C,IAAI,CAACC,IAAI,CACpBM,OAAO,CAACiC,GAAG,CAACI,IAAI,CAACN,GAAG,CAAC,CAACM,IAAI,CAACL,EAAE,CAAC,CAACM,SAAS,CAAC,CAAC,EAAEnB,EAAE,CAAC,GAC7CnB,OAAO,CAACmC,GAAG,CAACE,IAAI,CAACN,GAAG,CAAC,CAACM,IAAI,CAACL,EAAE,CAAC,CAACM,SAAS,CAAC,CAAC,EAAElB,EAAE,CAClD,CAAC;EAED,IAAIgB,MAAM,KAAK,CAAC,IAAIxB,KAAK,KAAK,CAAC,EAAE;IAC/BL,MAAM,GAAGd,IAAI,CAACiB,IAAI,CAACN,CAAC,CAAC;IACrBI,MAAM,GAAGf,IAAI,CAACiB,IAAI,CAACJ,CAAC,CAAC;EACvB,CAAC,MAAM,IAAI8B,MAAM,GAAGxB,KAAK,EAAE;IACzBL,MAAM,GAAGd,IAAI,CAACiB,IAAI,CAACN,CAAC,CAAC;IACrBI,MAAM,GAAGf,IAAI,CAACiB,IAAI,CAACH,MAAM,GAAG6B,MAAM,CAAC;EACrC,CAAC,MAAM;IACL5B,MAAM,GAAGf,IAAI,CAACiB,IAAI,CAACJ,CAAC,CAAC;IACrBC,MAAM,GAAGd,IAAI,CAACiB,IAAI,CAAC0B,MAAM,GAAG5B,MAAM,CAAC;EACrC;EACA,OAAO,CAACD,MAAM,EAAEC,MAAM,CAAC;AACzB;AAEA,SAAS+B,eAAeA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEnB,CAAC,EAAEoB,CAAC,EAAEzC,CAAC,EAAE0C,KAAK,EAAEC,OAAO,EAAE;EACrE,IAAI,CAACC,IAAI,EAAEC,IAAI,CAAC,GAAG,CACjB,CAACT,CAAC,GAAGF,CAAC,GAAGG,CAAC,GAAGF,CAAC,GAAGG,CAAC,KAAKG,CAAC,GAAGP,CAAC,GAAGlC,CAAC,GAAGmC,CAAC,GAAG,CAAC,CAAC,EACzC,CAACI,CAAC,GAAGL,CAAC,GAAGM,CAAC,GAAGL,CAAC,GAAGd,CAAC,KAAKoB,CAAC,GAAGP,CAAC,GAAGlC,CAAC,GAAGmC,CAAC,GAAG,CAAC,CAAC,CAC1C;EACD,OAAOO,KAAK,CAACI,UAAU,CAAC3D,IAAI,CAAC4D,KAAK,CAACH,IAAI,CAAC,EAAEzD,IAAI,CAAC4D,KAAK,CAACF,IAAI,CAAC,EAAEF,OAAO,CAAC;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASK,iBAAiBA,CAAC3E,GAAG,EAAE4E,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3D,IAAI;IAAEC,cAAc,GAAG;EAAK,CAAC,GAAGD,OAAO;EAEvC,IAAI5E,GAAG,CAACQ,MAAM,KAAK,CAAC,EAAE;IACpB,MAAM,IAAIsE,KAAK,CACb,0FAA0F9E,GAAG,CAACQ,MAAM,WACtG,CAAC;EACH;EAEA,IAAI,CAACuE,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC,GAAGlF,GAAG;EAE9B,IAAImF,cAAc,GAAG,CAACJ,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC;EACzC,IAAI,CAACjF,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGL,YAAY,CAACoF,cAAc,CAAC;EACnD,IAAIC,SAAS;EACb,IAAIC,UAAU;EACd,IAAIR,cAAc,EAAE;IAClB,CAACO,SAAS,EAAEC,UAAU,CAAC,GAAG/D,qBAAqB,CAC7CrB,EAAE,EACFC,EAAE,EACFC,EAAE,EACFC,EAAE,EACF,IAAI,CAACkF,KAAK,EACV,IAAI,CAACC,MACP,CAAC;EACH,CAAC,MAAM;IACLH,SAAS,GAAGtE,IAAI,CAACiB,IAAI,CACnBjB,IAAI,CAACY,GAAG,CAACf,eAAe,CAACV,EAAE,EAAEC,EAAE,CAAC,EAAES,eAAe,CAACP,EAAE,EAAED,EAAE,CAAC,CAC3D,CAAC;IACDkF,UAAU,GAAGvE,IAAI,CAACiB,IAAI,CACpBjB,IAAI,CAACY,GAAG,CAACf,eAAe,CAACV,EAAE,EAAEG,EAAE,CAAC,EAAEO,eAAe,CAACT,EAAE,EAAEC,EAAE,CAAC,CAC3D,CAAC;EACH;EACA,IAAIqF,QAAQ,GAAG1F,KAAK,CAAC2F,UAAU,CAAC,IAAI,EAAE;IACpCH,KAAK,EAAEF,SAAS;IAChBG,MAAM,EAAEF;EACV,CAAC,CAAC;EAEF,IAAI,CAACK,EAAE,EAAEC,EAAE,CAAC,GAAG1F,EAAE;EACjB,IAAI,CAAC2F,EAAE,EAAEC,EAAE,CAAC,GAAG3F,EAAE;EACjB,IAAI,CAAC4F,EAAE,EAAEC,EAAE,CAAC,GAAG5F,EAAE;EACjB,IAAI,CAAC6F,EAAE,EAAEC,EAAE,CAAC,GAAG7F,EAAE;EACjB,IAAI,CAAC8F,EAAE,EAAEC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACrB,IAAI,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAEjB,SAAS,GAAG,CAAC,CAAC;EACjC,IAAI,CAACkB,EAAE,EAAEC,EAAE,CAAC,GAAG,CAAClB,UAAU,GAAG,CAAC,EAAED,SAAS,GAAG,CAAC,CAAC;EAC9C,IAAI,CAACoB,EAAE,EAAEC,EAAE,CAAC,GAAG,CAACpB,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC;EAElC,IAAIqB,CAAC,GAAG,IAAI/G,MAAM,CAAC,CACjB,CAACuG,EAAE,EAAEC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAACD,EAAE,GAAGR,EAAE,EAAE,CAACS,EAAE,GAAGT,EAAE,CAAC,EACxC,CAACU,EAAE,EAAEC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAACD,EAAE,GAAGR,EAAE,EAAE,CAACS,EAAE,GAAGT,EAAE,CAAC,EACxC,CAACU,EAAE,EAAEC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAACD,EAAE,GAAGR,EAAE,EAAE,CAACK,EAAE,GAAGL,EAAE,CAAC,EACxC,CAACU,EAAE,EAAEC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAACD,EAAE,GAAGR,EAAE,EAAE,CAACS,EAAE,GAAGT,EAAE,CAAC,EACxC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEE,EAAE,EAAEC,EAAE,EAAE,CAAC,EAAE,CAACD,EAAE,GAAGP,EAAE,EAAE,CAACQ,EAAE,GAAGR,EAAE,CAAC,EACxC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAES,EAAE,EAAEC,EAAE,EAAE,CAAC,EAAE,CAACD,EAAE,GAAGP,EAAE,EAAE,CAACQ,EAAE,GAAGR,EAAE,CAAC,EACxC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAES,EAAE,EAAEC,EAAE,EAAE,CAAC,EAAE,CAACD,EAAE,GAAGP,EAAE,EAAE,CAACQ,EAAE,GAAGR,EAAE,CAAC,EACxC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAES,EAAE,EAAEC,EAAE,EAAE,CAAC,EAAE,CAACD,EAAE,GAAGP,EAAE,EAAE,CAACQ,EAAE,GAAGR,EAAE,CAAC,CACzC,CAAC;EAEF,IAAIU,CAAC,GAAGhH,MAAM,CAACiH,YAAY,CAAC,CAAClB,EAAE,EAAEE,EAAE,EAAEE,EAAE,EAAEE,EAAE,EAAEL,EAAE,EAAEE,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAC,CAAC;EAE7D,IAAIY,GAAG,GAAG,IAAIhH,0BAA0B,CAAC6G,CAAC,CAAC;EAC3C,IAAII,CAAC,GAAGD,GAAG,CAACE,KAAK,CAACJ,CAAC,CAAC,CAAC,CAAC;EACtB,IAAI,CAAC5C,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEnB,CAAC,EAAEoB,CAAC,EAAEzC,CAAC,CAAC,GAAGmF,CAAC,CAACnD,SAAS,CAAC,CAAC;EAE5C,IAAIqD,EAAE,GAAG,IAAIrH,MAAM,CAAC0F,UAAU,EAAED,SAAS,CAAC;EAE1C,KAAK,IAAId,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,IAAI,CAAC2C,QAAQ,EAAE3C,OAAO,EAAE,EAAE;IACxD,KAAK,IAAI/D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8E,UAAU,EAAE9E,CAAC,EAAE,EAAE;MACnC,KAAK,IAAI2G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,SAAS,EAAE8B,CAAC,EAAE,EAAE;QAClCF,EAAE,CAACG,GAAG,CACJ5G,CAAC,EACD2G,CAAC,EACDtD,eAAe,CAACrD,CAAC,EAAE2G,CAAC,EAAEnD,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEnB,CAAC,EAAEoB,CAAC,EAAEzC,CAAC,EAAE,IAAI,EAAE2C,OAAO,CAC7D,CAAC;MACH;IACF;IACAkB,QAAQ,CAAC4B,SAAS,CAACJ,EAAE,EAAE;MAAE1C,OAAO,EAAEA;IAAQ,CAAC,CAAC;EAC9C;EAEA,OAAOkB,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}