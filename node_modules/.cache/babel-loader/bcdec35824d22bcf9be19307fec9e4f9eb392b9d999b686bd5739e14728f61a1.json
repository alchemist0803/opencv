{"ast":null,"code":"// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// Implements Yen  thresholding method\n// 1) Yen J.C., Chang F.J., and Chang S. (1995) \"A New Criterion\n//    for Automatic Multilevel Thresholding\" IEEE Trans. on Image\n//    Processing, 4(3): 370-378\n// 2) Sezgin M. and Sankur B. (2004) \"Survey over Image Thresholding\n//    Techniques and Quantitative Performance Evaluation\" Journal of\n//    Electronic Imaging, 13(1): 146-165\n//    http://citeseer.ist.psu.edu/sezgin04survey.html\n//\n// M. Emre Celebi\n// 06.15.2007\n// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines\n\nexport default function yen(histogram, total) {\n  let normHisto = new Array(histogram.length); // normalized histogram\n  for (let ih = 0; ih < histogram.length; ih++) {\n    normHisto[ih] = histogram[ih] / total;\n  }\n  let P1 = new Array(histogram.length); // cumulative normalized histogram\n  P1[0] = normHisto[0];\n  for (let ih = 1; ih < histogram.length; ih++) {\n    P1[ih] = P1[ih - 1] + normHisto[ih];\n  }\n  let P1Sq = new Array(histogram.length);\n  P1Sq[0] = normHisto[0] * normHisto[0];\n  for (let ih = 1; ih < histogram.length; ih++) {\n    P1Sq[ih] = P1Sq[ih - 1] + normHisto[ih] * normHisto[ih];\n  }\n  let P2Sq = new Array(histogram.length);\n  P2Sq[histogram.length - 1] = 0.0;\n  for (let ih = histogram.length - 2; ih >= 0; ih--) {\n    P2Sq[ih] = P2Sq[ih + 1] + normHisto[ih + 1] * normHisto[ih + 1];\n  }\n\n  /* Find the threshold that maximizes the criterion */\n  let threshold = -1;\n  let maxCrit = Number.MIN_VALUE;\n  let crit;\n  for (let it = 0; it < histogram.length; it++) {\n    crit = -1.0 * (P1Sq[it] * P2Sq[it] > 0.0 ? Math.log(P1Sq[it] * P2Sq[it]) : 0.0) + 2 * (P1[it] * (1.0 - P1[it]) > 0.0 ? Math.log(P1[it] * (1.0 - P1[it])) : 0.0);\n    if (crit > maxCrit) {\n      maxCrit = crit;\n      threshold = it;\n    }\n  }\n  return threshold;\n}","map":{"version":3,"names":["yen","histogram","total","normHisto","Array","length","ih","P1","P1Sq","P2Sq","threshold","maxCrit","Number","MIN_VALUE","crit","it","Math","log"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/mask/yen.js"],"sourcesContent":["// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// Implements Yen  thresholding method\n// 1) Yen J.C., Chang F.J., and Chang S. (1995) \"A New Criterion\n//    for Automatic Multilevel Thresholding\" IEEE Trans. on Image\n//    Processing, 4(3): 370-378\n// 2) Sezgin M. and Sankur B. (2004) \"Survey over Image Thresholding\n//    Techniques and Quantitative Performance Evaluation\" Journal of\n//    Electronic Imaging, 13(1): 146-165\n//    http://citeseer.ist.psu.edu/sezgin04survey.html\n//\n// M. Emre Celebi\n// 06.15.2007\n// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines\n\nexport default function yen(histogram, total) {\n  let normHisto = new Array(histogram.length); // normalized histogram\n  for (let ih = 0; ih < histogram.length; ih++) {\n    normHisto[ih] = histogram[ih] / total;\n  }\n\n  let P1 = new Array(histogram.length); // cumulative normalized histogram\n  P1[0] = normHisto[0];\n  for (let ih = 1; ih < histogram.length; ih++) {\n    P1[ih] = P1[ih - 1] + normHisto[ih];\n  }\n\n  let P1Sq = new Array(histogram.length);\n  P1Sq[0] = normHisto[0] * normHisto[0];\n  for (let ih = 1; ih < histogram.length; ih++) {\n    P1Sq[ih] = P1Sq[ih - 1] + normHisto[ih] * normHisto[ih];\n  }\n\n  let P2Sq = new Array(histogram.length);\n  P2Sq[histogram.length - 1] = 0.0;\n  for (let ih = histogram.length - 2; ih >= 0; ih--) {\n    P2Sq[ih] = P2Sq[ih + 1] + normHisto[ih + 1] * normHisto[ih + 1];\n  }\n\n  /* Find the threshold that maximizes the criterion */\n  let threshold = -1;\n  let maxCrit = Number.MIN_VALUE;\n  let crit;\n  for (let it = 0; it < histogram.length; it++) {\n    crit =\n      -1.0 * (P1Sq[it] * P2Sq[it] > 0.0 ? Math.log(P1Sq[it] * P2Sq[it]) : 0.0) +\n      2 *\n        (P1[it] * (1.0 - P1[it]) > 0.0\n          ? Math.log(P1[it] * (1.0 - P1[it]))\n          : 0.0);\n    if (crit > maxCrit) {\n      maxCrit = crit;\n      threshold = it;\n    }\n  }\n  return threshold;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}