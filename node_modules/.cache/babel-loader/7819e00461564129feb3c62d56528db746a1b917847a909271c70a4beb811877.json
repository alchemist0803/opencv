{"ast":null,"code":"import { BaseRegression, checkArrayLength, maybeToPrecision } from 'ml-regression-base';\n/**\n * Class representing simple linear regression.\n * The regression uses OLS to calculate intercept and slope.\n */\nexport class SimpleLinearRegression extends BaseRegression {\n  /**\n   * @param x - explanatory variable\n   * @param y - response variable\n   */\n  constructor(x, y) {\n    super();\n    // @ts-expect-error internal use of the constructor, from `this.load`\n    if (x === true) {\n      // @ts-expect-error internal use of the constructor, from `this.load`\n      const yObj = y;\n      this.slope = yObj.slope;\n      this.intercept = yObj.intercept;\n      this.coefficients = [yObj.intercept, yObj.slope];\n    } else {\n      checkArrayLength(x, y);\n      const result = regress(x, y);\n      this.slope = result.slope;\n      this.intercept = result.intercept;\n      this.coefficients = [result.intercept, result.slope];\n    }\n  }\n  /**\n   * Get the parameters and model name in JSON format\n   * @returns\n   */\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n  /**\n   * Finds x for the given y value.\n   * @param y - response variable value\n   * @returns - x value\n   */\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n  /**\n   * Strings the linear function in the form 'f(x) = ax + b'\n   * @param precision - number of significant figures.\n   * @returns\n   */\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n  /**\n   * Strings the linear function in the form 'f(x) = ax + b'\n   * @param precision - number of significant figures.\n   * @returns\n   */\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n  /**\n   * Class instance from a JSON Object.\n   * @param json\n   * @returns\n   */\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    // @ts-expect-error internal use of the constructor\n    return new SimpleLinearRegression(true, json);\n  }\n}\n/**\n * Internal  function.\n * It determines the parameters (slope, intercept) of the line that best fit the `x,y` vector-data (simple linear regression).\n * @param x - explanatory variable\n * @param y - response variable\n * @returns - slope and intercept of the best fit line\n */\nfunction regress(x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n  let xSquared = 0;\n  let xY = 0;\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n  const numerator = n * xY - xSum * ySum;\n  const slope = numerator / (n * xSquared - xSum * xSum);\n  return {\n    slope,\n    intercept: 1 / n * ySum - slope * (1 / n) * xSum\n  };\n}","map":{"version":3,"names":["BaseRegression","checkArrayLength","maybeToPrecision","SimpleLinearRegression","constructor","x","y","yObj","slope","intercept","coefficients","result","regress","toJSON","name","_predict","computeX","toString","precision","xFactor","absIntercept","Math","abs","operator","toLaTeX","load","json","TypeError","n","length","xSum","ySum","xSquared","xY","i","numerator"],"sources":["C:\\Users\\Admin\\Documents\\Workspace\\opencv\\opencv\\node_modules\\ml-regression-exponential\\node_modules\\ml-regression-simple-linear\\src\\index.ts"],"sourcesContent":["import type { NumberArray } from 'cheminfo-types';\nimport {\n  BaseRegression,\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\n\ntype JsonType = ReturnType<SimpleLinearRegression['toJSON']>;\n\n/**\n * Class representing simple linear regression.\n * The regression uses OLS to calculate intercept and slope.\n */\nexport class SimpleLinearRegression extends BaseRegression {\n  slope: number;\n  intercept: number;\n  coefficients: number[];\n\n  /**\n   * @param x - explanatory variable\n   * @param y - response variable\n   */\n  constructor(x: NumberArray, y: NumberArray) {\n    super();\n    // @ts-expect-error internal use of the constructor, from `this.load`\n    if (x === true) {\n      // @ts-expect-error internal use of the constructor, from `this.load`\n      const yObj = y as JsonType;\n      this.slope = yObj.slope;\n      this.intercept = yObj.intercept;\n      this.coefficients = [yObj.intercept, yObj.slope];\n    } else {\n      checkArrayLength(x, y);\n      const result = regress(x, y);\n      this.slope = result.slope;\n      this.intercept = result.intercept;\n      this.coefficients = [result.intercept, result.slope];\n    }\n  }\n\n  /**\n   * Get the parameters and model name in JSON format\n   * @returns\n   */\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept,\n    };\n  }\n\n  _predict(x: number): number {\n    return this.slope * x + this.intercept;\n  }\n  /**\n   * Finds x for the given y value.\n   * @param y - response variable value\n   * @returns - x value\n   */\n  computeX(y: number): number {\n    return (y - this.intercept) / this.slope;\n  }\n\n  /**\n   * Strings the linear function in the form 'f(x) = ax + b'\n   * @param precision - number of significant figures.\n   * @returns\n   */\n  toString(precision?: number): string {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n  /**\n   * Strings the linear function in the form 'f(x) = ax + b'\n   * @param precision - number of significant figures.\n   * @returns\n   */\n  toLaTeX(precision?: number): string {\n    return this.toString(precision);\n  }\n\n  /**\n   * Class instance from a JSON Object.\n   * @param json\n   * @returns\n   */\n  static load(json: JsonType): SimpleLinearRegression {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    // @ts-expect-error internal use of the constructor\n    return new SimpleLinearRegression(true, json);\n  }\n}\n\n/**\n * Internal  function.\n * It determines the parameters (slope, intercept) of the line that best fit the `x,y` vector-data (simple linear regression).\n * @param x - explanatory variable\n * @param y - response variable\n * @returns - slope and intercept of the best fit line\n */\nfunction regress(x: NumberArray, y: NumberArray) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n\n  let xSquared = 0;\n  let xY = 0;\n\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n\n  const numerator = n * xY - xSum * ySum;\n\n  const slope = numerator / (n * xSquared - xSum * xSum);\n  return {\n    slope,\n    intercept: (1 / n) * ySum - slope * (1 / n) * xSum,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}