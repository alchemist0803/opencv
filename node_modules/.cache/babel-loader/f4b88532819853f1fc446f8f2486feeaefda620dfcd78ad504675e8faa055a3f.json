{"ast":null,"code":"'use strict';\n\nconst Ifd = require('./ifd');\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\nclass TiffIfd extends Ifd {\n  constructor() {\n    super('standard');\n  }\n\n  // Custom fields\n  get size() {\n    return this.width * this.height;\n  }\n  get width() {\n    return this.imageWidth;\n  }\n  get height() {\n    return this.imageLength;\n  }\n  get components() {\n    return this.samplesPerPixel;\n  }\n  get date() {\n    var date = new Date();\n    var result = dateTimeRegex.exec(this.dateTime);\n    date.setFullYear(result[1], result[2] - 1, result[3]);\n    date.setHours(result[4], result[5], result[6]);\n    return date;\n  }\n\n  // IFD fields\n  get newSubfileType() {\n    return this.get(254);\n  }\n  get imageWidth() {\n    return this.get(256);\n  }\n  get imageLength() {\n    return this.get(257);\n  }\n  get bitsPerSample() {\n    return this.get(258);\n  }\n  get compression() {\n    return this.get(259) || 1;\n  }\n  get type() {\n    return this.get(262);\n  }\n  get fillOrder() {\n    return this.get(266) || 1;\n  }\n  get documentName() {\n    return this.get(269);\n  }\n  get imageDescription() {\n    return this.get(270);\n  }\n  get stripOffsets() {\n    return alwaysArray(this.get(273));\n  }\n  get orientation() {\n    return this.get(274);\n  }\n  get samplesPerPixel() {\n    return this.get(277);\n  }\n  get rowsPerStrip() {\n    return this.get(278);\n  }\n  get stripByteCounts() {\n    return alwaysArray(this.get(279));\n  }\n  get minSampleValue() {\n    return this.get(280) || 0;\n  }\n  get maxSampleValue() {\n    return this.get(281) || Math.pow(2, this.bitsPerSample) - 1;\n  }\n  get xResolution() {\n    return this.get(282);\n  }\n  get yResolution() {\n    return this.get(283);\n  }\n  get planarConfiguration() {\n    return this.get(284) || 1;\n  }\n  get resolutionUnit() {\n    return this.get(296) || 2;\n  }\n  get dateTime() {\n    return this.get(306);\n  }\n  get predictor() {\n    return this.get(317) || 1;\n  }\n  get sampleFormat() {\n    return this.get(339) || 1;\n  }\n  get sMinSampleValue() {\n    return this.get(340) || this.minSampleValue;\n  }\n  get sMaxSampleValue() {\n    return this.get(341) || this.maxSampleValue;\n  }\n}\nfunction alwaysArray(value) {\n  if (typeof value === 'number') return [value];\n  return value;\n}\nmodule.exports = TiffIfd;","map":{"version":3,"names":["Ifd","require","dateTimeRegex","TiffIfd","constructor","size","width","height","imageWidth","imageLength","components","samplesPerPixel","date","Date","result","exec","dateTime","setFullYear","setHours","newSubfileType","get","bitsPerSample","compression","type","fillOrder","documentName","imageDescription","stripOffsets","alwaysArray","orientation","rowsPerStrip","stripByteCounts","minSampleValue","maxSampleValue","Math","pow","xResolution","yResolution","planarConfiguration","resolutionUnit","predictor","sampleFormat","sMinSampleValue","sMaxSampleValue","value","module","exports"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/fast-jpeg/node_modules/tiff/src/tiffIfd.js"],"sourcesContent":["'use strict';\n\nconst Ifd = require('./ifd');\n\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\n\nclass TiffIfd extends Ifd {\n    constructor() {\n        super('standard');\n    }\n\n    // Custom fields\n    get size() {\n        return this.width * this.height;\n    }\n    get width() {\n        return this.imageWidth;\n    }\n    get height() {\n        return this.imageLength;\n    }\n    get components() {\n        return this.samplesPerPixel;\n    }\n    get date() {\n        var date = new Date();\n        var result = dateTimeRegex.exec(this.dateTime);\n        date.setFullYear(result[1], result[2] - 1, result[3]);\n        date.setHours(result[4], result[5], result[6]);\n        return date;\n    }\n\n    // IFD fields\n    get newSubfileType() {\n        return this.get(254);\n    }\n    get imageWidth() {\n        return this.get(256);\n    }\n    get imageLength() {\n        return this.get(257);\n    }\n    get bitsPerSample() {\n        return this.get(258);\n    }\n    get compression() {\n        return this.get(259) || 1;\n    }\n    get type() {\n        return this.get(262);\n    }\n    get fillOrder() {\n        return this.get(266) || 1;\n    }\n    get documentName() {\n        return this.get(269);\n    }\n    get imageDescription() {\n        return this.get(270);\n    }\n    get stripOffsets() {\n        return alwaysArray(this.get(273));\n    }\n    get orientation() {\n        return this.get(274);\n    }\n    get samplesPerPixel() {\n        return this.get(277);\n    }\n    get rowsPerStrip() {\n        return this.get(278);\n    }\n    get stripByteCounts() {\n        return alwaysArray(this.get(279));\n    }\n    get minSampleValue() {\n        return this.get(280) || 0;\n    }\n    get maxSampleValue() {\n        return this.get(281) || Math.pow(2, this.bitsPerSample) - 1;\n    }\n    get xResolution() {\n        return this.get(282);\n    }\n    get yResolution() {\n        return this.get(283);\n    }\n    get planarConfiguration() {\n        return this.get(284) || 1;\n    }\n    get resolutionUnit() {\n        return this.get(296) || 2;\n    }\n    get dateTime() {\n        return this.get(306);\n    }\n    get predictor() {\n        return this.get(317) || 1;\n    }\n    get sampleFormat() {\n        return this.get(339) || 1;\n    }\n    get sMinSampleValue() {\n        return this.get(340) || this.minSampleValue;\n    }\n    get sMaxSampleValue() {\n        return this.get(341) || this.maxSampleValue;\n    }\n}\n\nfunction alwaysArray(value) {\n    if (typeof value === 'number') return [value];\n    return value;\n}\n\nmodule.exports = TiffIfd;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}