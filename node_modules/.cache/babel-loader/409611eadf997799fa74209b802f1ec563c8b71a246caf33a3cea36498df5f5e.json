{"ast":null,"code":"import isInteger from 'is-integer';\nexport function validateKernel(kernel) {\n  let kHeight, kWidth;\n  if (Array.isArray(kernel)) {\n    if (Array.isArray(kernel[0])) {\n      // 2D array\n      if ((kernel.length & 1) === 0 || (kernel[0].length & 1) === 0) {\n        throw new RangeError('validateKernel: Kernel rows and columns should be odd numbers');\n      } else {\n        kHeight = Math.floor(kernel.length / 2);\n        kWidth = Math.floor(kernel[0].length / 2);\n      }\n    } else {\n      let kernelWidth = Math.sqrt(kernel.length);\n      if (isInteger(kernelWidth)) {\n        kWidth = kHeight = Math.floor(Math.sqrt(kernel.length) / 2);\n      } else {\n        throw new RangeError('validateKernel: Kernel array should be a square');\n      }\n      // we convert the array to a matrix\n      let newKernel = new Array(kernelWidth);\n      for (let i = 0; i < kernelWidth; i++) {\n        newKernel[i] = new Array(kernelWidth);\n        for (let j = 0; j < kernelWidth; j++) {\n          newKernel[i][j] = kernel[i * kernelWidth + j];\n        }\n      }\n      kernel = newKernel;\n    }\n  } else {\n    throw new Error(`validateKernel: Invalid Kernel: ${kernel}`);\n  }\n  return {\n    kernel,\n    kWidth,\n    kHeight\n  };\n}","map":{"version":3,"names":["isInteger","validateKernel","kernel","kHeight","kWidth","Array","isArray","length","RangeError","Math","floor","kernelWidth","sqrt","newKernel","i","j","Error"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/util/kernel.js"],"sourcesContent":["import isInteger from 'is-integer';\n\nexport function validateKernel(kernel) {\n  let kHeight, kWidth;\n  if (Array.isArray(kernel)) {\n    if (Array.isArray(kernel[0])) {\n      // 2D array\n      if ((kernel.length & 1) === 0 || (kernel[0].length & 1) === 0) {\n        throw new RangeError(\n          'validateKernel: Kernel rows and columns should be odd numbers',\n        );\n      } else {\n        kHeight = Math.floor(kernel.length / 2);\n        kWidth = Math.floor(kernel[0].length / 2);\n      }\n    } else {\n      let kernelWidth = Math.sqrt(kernel.length);\n      if (isInteger(kernelWidth)) {\n        kWidth = kHeight = Math.floor(Math.sqrt(kernel.length) / 2);\n      } else {\n        throw new RangeError('validateKernel: Kernel array should be a square');\n      }\n      // we convert the array to a matrix\n      let newKernel = new Array(kernelWidth);\n      for (let i = 0; i < kernelWidth; i++) {\n        newKernel[i] = new Array(kernelWidth);\n        for (let j = 0; j < kernelWidth; j++) {\n          newKernel[i][j] = kernel[i * kernelWidth + j];\n        }\n      }\n      kernel = newKernel;\n    }\n  } else {\n    throw new Error(`validateKernel: Invalid Kernel: ${kernel}`);\n  }\n  return { kernel, kWidth, kHeight };\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAElC,OAAO,SAASC,cAAcA,CAACC,MAAM,EAAE;EACrC,IAAIC,OAAO,EAAEC,MAAM;EACnB,IAAIC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAE;IACzB,IAAIG,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;MAC5B;MACA,IAAI,CAACA,MAAM,CAACK,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAACL,MAAM,CAAC,CAAC,CAAC,CAACK,MAAM,GAAG,CAAC,MAAM,CAAC,EAAE;QAC7D,MAAM,IAAIC,UAAU,CAClB,+DACF,CAAC;MACH,CAAC,MAAM;QACLL,OAAO,GAAGM,IAAI,CAACC,KAAK,CAACR,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC;QACvCH,MAAM,GAAGK,IAAI,CAACC,KAAK,CAACR,MAAM,CAAC,CAAC,CAAC,CAACK,MAAM,GAAG,CAAC,CAAC;MAC3C;IACF,CAAC,MAAM;MACL,IAAII,WAAW,GAAGF,IAAI,CAACG,IAAI,CAACV,MAAM,CAACK,MAAM,CAAC;MAC1C,IAAIP,SAAS,CAACW,WAAW,CAAC,EAAE;QAC1BP,MAAM,GAAGD,OAAO,GAAGM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACG,IAAI,CAACV,MAAM,CAACK,MAAM,CAAC,GAAG,CAAC,CAAC;MAC7D,CAAC,MAAM;QACL,MAAM,IAAIC,UAAU,CAAC,iDAAiD,CAAC;MACzE;MACA;MACA,IAAIK,SAAS,GAAG,IAAIR,KAAK,CAACM,WAAW,CAAC;MACtC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;QACpCD,SAAS,CAACC,CAAC,CAAC,GAAG,IAAIT,KAAK,CAACM,WAAW,CAAC;QACrC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,EAAEI,CAAC,EAAE,EAAE;UACpCF,SAAS,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGb,MAAM,CAACY,CAAC,GAAGH,WAAW,GAAGI,CAAC,CAAC;QAC/C;MACF;MACAb,MAAM,GAAGW,SAAS;IACpB;EACF,CAAC,MAAM;IACL,MAAM,IAAIG,KAAK,CAAC,mCAAmCd,MAAM,EAAE,CAAC;EAC9D;EACA,OAAO;IAAEA,MAAM;IAAEE,MAAM;IAAED;EAAQ,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}