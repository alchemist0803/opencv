{"ast":null,"code":"'use strict';\n\nconst {\n  IOBuffer\n} = require('iobuffer');\nconst constants = require('./constants');\nconst tableLeft = [];\nfor (let i = 0; i <= 8; i++) {\n  tableLeft.push(0b11111111 << i);\n}\nclass BMPEncoder extends IOBuffer {\n  constructor(data) {\n    if (data.bitDepth !== 1) {\n      throw new Error('Only bitDepth of 1 is supported');\n    }\n    if (!data.height || !data.width) {\n      throw new Error('ImageData width and height are required');\n    }\n    super(data.data);\n    this.width = data.width;\n    this.height = data.height;\n    this.bitDepth = data.bitDepth;\n    this.channels = data.channels;\n    this.components = data.components;\n  }\n  encode() {\n    this.encoded = new IOBuffer();\n    this.encoded.skip(14);\n    this.writeBitmapV5Header();\n    this.writeColorTable();\n    const offset = this.encoded.offset;\n    this.writePixelArray();\n    this.encoded.rewind();\n    this.writeBitmapFileHeader(offset);\n    return this.encoded.toArray();\n  }\n  writePixelArray() {\n    let io = this.encoded;\n    const rowSize = Math.floor((this.bitDepth * this.width + 31) / 32) * 4;\n    const dataRowSize = Math.ceil(this.bitDepth * this.width / 8);\n    const skipSize = rowSize - dataRowSize;\n    const bitOverflow = this.bitDepth * this.width % 8;\n    const bitSkip = bitOverflow === 0 ? 0 : 8 - bitOverflow;\n    const totalBytes = rowSize * this.height;\n    let byteA, byteB;\n    let offset = 0; // Current off set in the ioData\n    let relOffset = 0;\n    let iOffset = 8;\n    io.mark();\n    byteB = this.readUint8();\n    for (let i = this.height - 1; i >= 0; i--) {\n      const lastRow = i === 0;\n      io.reset();\n      io.skip(i * rowSize);\n      for (let j = 0; j < dataRowSize; j++) {\n        const lastCol = j === dataRowSize - 1;\n        if (relOffset <= bitSkip && lastCol) {\n          // no need to read new data\n          io.writeByte(byteB << relOffset);\n          if ((bitSkip === 0 || bitSkip === relOffset) && !lastRow) {\n            byteA = byteB;\n            byteB = this.readByte();\n          }\n        } else if (relOffset === 0) {\n          byteA = byteB;\n          byteB = this.readUint8();\n          io.writeByte(byteA);\n        } else {\n          byteA = byteB;\n          byteB = this.readUint8();\n          io.writeByte(byteA << relOffset & tableLeft[relOffset] | byteB >> iOffset);\n        }\n        if (lastCol) {\n          offset += bitOverflow || 0;\n          io.skip(skipSize);\n          relOffset = offset % 8;\n          iOffset = 8 - relOffset;\n        }\n      }\n    }\n    if (rowSize > dataRowSize) {\n      // make sure last written byte is correct\n      io.reset();\n      io.skip(totalBytes - 1);\n      io.writeUint8(0);\n    }\n  }\n  writeColorTable() {\n    // We only handle 1-bit images\n    this.encoded.writeUint32(0x00000000) // black\n    .writeUint32(0x00ffffff); // white\n  }\n  writeBitmapFileHeader(imageOffset) {\n    this.encoded.writeChars('BM') // 14 bytes bitmap file header\n    .writeInt32(this.encoded.lastWrittenByte) // Size of BMP file in bytes\n    .writeUint16(0).writeUint16(0).writeUint32(imageOffset);\n  }\n  writeBitmapV5Header() {\n    const rowSize = Math.floor((this.bitDepth * this.width + 31) / 32) * 4;\n    const totalBytes = rowSize * this.height;\n    // Size of the header\n    this.encoded.writeUint32(124) // Header size\n    .writeInt32(this.width) // bV5Width\n    .writeInt32(this.height) // bV5Height\n    .writeUint16(1) // bv5Planes - must be set to 1\n    .writeUint16(this.bitDepth) // bV5BitCount\n    .writeUint32(constants.BITMAPV5HEADER.Compression.BI_RGB) // bV5Compression - No compression\n    .writeUint32(totalBytes) // bv5SizeImage - size of pixel buffer (can be 0 if uncompressed)\n    .writeInt32(0) // bV5XPelsPerMeter - resolution\n    .writeInt32(0) // bV5YPelsPerMeter - resolution\n    .writeUint32(Math.pow(2, this.bitDepth)).writeUint32(Math.pow(2, this.bitDepth)).writeUint32(0xff000000) // bV5RedMask\n    .writeUint32(0x00ff0000) // bV5GreenMask\n    .writeUint32(0x0000ff00) // bV5BlueMask\n    .writeUint32(0x000000ff) // bV5AlphaMask\n    .writeUint32(constants.BITMAPV5HEADER.LogicalColorSpace.LCS_sRGB).skip(36) // bV5Endpoints\n    .skip(12) // bV5GammaRed, Green, Blue\n    .writeUint32(constants.BITMAPV5HEADER.GamutMappingIntent.LCS_GM_IMAGES).skip(12); // ProfileData, ProfileSize, Reserved\n  }\n}\nmodule.exports = BMPEncoder;","map":{"version":3,"names":["IOBuffer","require","constants","tableLeft","i","push","BMPEncoder","constructor","data","bitDepth","Error","height","width","channels","components","encode","encoded","skip","writeBitmapV5Header","writeColorTable","offset","writePixelArray","rewind","writeBitmapFileHeader","toArray","io","rowSize","Math","floor","dataRowSize","ceil","skipSize","bitOverflow","bitSkip","totalBytes","byteA","byteB","relOffset","iOffset","mark","readUint8","lastRow","reset","j","lastCol","writeByte","readByte","writeUint8","writeUint32","imageOffset","writeChars","writeInt32","lastWrittenByte","writeUint16","BITMAPV5HEADER","Compression","BI_RGB","pow","LogicalColorSpace","LCS_sRGB","GamutMappingIntent","LCS_GM_IMAGES","module","exports"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/fast-bmp/src/BMPEncoder.js"],"sourcesContent":["'use strict';\n\nconst { IOBuffer } = require('iobuffer');\n\nconst constants = require('./constants');\n\nconst tableLeft = [];\nfor (let i = 0; i <= 8; i++) {\n  tableLeft.push(0b11111111 << i);\n}\n\nclass BMPEncoder extends IOBuffer {\n  constructor(data) {\n    if (data.bitDepth !== 1) {\n      throw new Error('Only bitDepth of 1 is supported');\n    }\n    if (!data.height || !data.width) {\n      throw new Error('ImageData width and height are required');\n    }\n\n    super(data.data);\n\n    this.width = data.width;\n    this.height = data.height;\n    this.bitDepth = data.bitDepth;\n    this.channels = data.channels;\n    this.components = data.components;\n  }\n\n  encode() {\n    this.encoded = new IOBuffer();\n    this.encoded.skip(14);\n    this.writeBitmapV5Header();\n    this.writeColorTable();\n    const offset = this.encoded.offset;\n    this.writePixelArray();\n    this.encoded.rewind();\n    this.writeBitmapFileHeader(offset);\n    return this.encoded.toArray();\n  }\n\n  writePixelArray() {\n    let io = this.encoded;\n    const rowSize = Math.floor((this.bitDepth * this.width + 31) / 32) * 4;\n    const dataRowSize = Math.ceil((this.bitDepth * this.width) / 8);\n    const skipSize = rowSize - dataRowSize;\n    const bitOverflow = (this.bitDepth * this.width) % 8;\n    const bitSkip = bitOverflow === 0 ? 0 : 8 - bitOverflow;\n    const totalBytes = rowSize * this.height;\n\n    let byteA, byteB;\n    let offset = 0; // Current off set in the ioData\n    let relOffset = 0;\n    let iOffset = 8;\n    io.mark();\n    byteB = this.readUint8();\n    for (let i = this.height - 1; i >= 0; i--) {\n      const lastRow = i === 0;\n      io.reset();\n      io.skip(i * rowSize);\n      for (let j = 0; j < dataRowSize; j++) {\n        const lastCol = j === dataRowSize - 1;\n        if (relOffset <= bitSkip && lastCol) {\n          // no need to read new data\n          io.writeByte(byteB << relOffset);\n          if ((bitSkip === 0 || bitSkip === relOffset) && !lastRow) {\n            byteA = byteB;\n            byteB = this.readByte();\n          }\n        } else if (relOffset === 0) {\n          byteA = byteB;\n          byteB = this.readUint8();\n          io.writeByte(byteA);\n        } else {\n          byteA = byteB;\n          byteB = this.readUint8();\n          io.writeByte(\n            ((byteA << relOffset) & tableLeft[relOffset]) | (byteB >> iOffset)\n          );\n        }\n        if (lastCol) {\n          offset += bitOverflow || 0;\n          io.skip(skipSize);\n          relOffset = offset % 8;\n          iOffset = 8 - relOffset;\n        }\n      }\n    }\n    if (rowSize > dataRowSize) {\n      // make sure last written byte is correct\n      io.reset();\n      io.skip(totalBytes - 1);\n      io.writeUint8(0);\n    }\n  }\n\n  writeColorTable() {\n    // We only handle 1-bit images\n    this.encoded\n      .writeUint32(0x00000000) // black\n      .writeUint32(0x00ffffff); // white\n  }\n\n  writeBitmapFileHeader(imageOffset) {\n    this.encoded\n      .writeChars('BM') // 14 bytes bitmap file header\n      .writeInt32(this.encoded.lastWrittenByte) // Size of BMP file in bytes\n      .writeUint16(0)\n      .writeUint16(0)\n      .writeUint32(imageOffset);\n  }\n\n  writeBitmapV5Header() {\n    const rowSize = Math.floor((this.bitDepth * this.width + 31) / 32) * 4;\n    const totalBytes = rowSize * this.height;\n    // Size of the header\n    this.encoded\n      .writeUint32(124) // Header size\n      .writeInt32(this.width) // bV5Width\n      .writeInt32(this.height) // bV5Height\n      .writeUint16(1) // bv5Planes - must be set to 1\n      .writeUint16(this.bitDepth) // bV5BitCount\n      .writeUint32(constants.BITMAPV5HEADER.Compression.BI_RGB) // bV5Compression - No compression\n      .writeUint32(totalBytes) // bv5SizeImage - size of pixel buffer (can be 0 if uncompressed)\n      .writeInt32(0) // bV5XPelsPerMeter - resolution\n      .writeInt32(0) // bV5YPelsPerMeter - resolution\n      .writeUint32(Math.pow(2, this.bitDepth))\n      .writeUint32(Math.pow(2, this.bitDepth))\n      .writeUint32(0xff000000) // bV5RedMask\n      .writeUint32(0x00ff0000) // bV5GreenMask\n      .writeUint32(0x0000ff00) // bV5BlueMask\n      .writeUint32(0x000000ff) // bV5AlphaMask\n      .writeUint32(constants.BITMAPV5HEADER.LogicalColorSpace.LCS_sRGB)\n      .skip(36) // bV5Endpoints\n      .skip(12) // bV5GammaRed, Green, Blue\n      .writeUint32(constants.BITMAPV5HEADER.GamutMappingIntent.LCS_GM_IMAGES)\n      .skip(12); // ProfileData, ProfileSize, Reserved\n  }\n}\n\nmodule.exports = BMPEncoder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}