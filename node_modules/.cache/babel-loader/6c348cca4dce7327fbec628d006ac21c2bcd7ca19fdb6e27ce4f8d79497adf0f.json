{"ast":null,"code":"import Image from '../Image';\n\n/**\n * Change the image color depth.\n * The color depth is the number of bits that is assigned to each point of a channel.\n * For normal images it is 8 bits meaning the value is between 0 and 255.\n * Currently only conversion from 1, 8 or 16 bits towards 8 or 16 bits are allowed.\n * @memberof Image\n * @instance\n * @param {number} [newColorDepth=8]\n * @return {Image} The new image\n * @example\n * var newImage = image.colorDepth(8);\n */\nexport default function colorDepth(newColorDepth = 8) {\n  this.checkProcessable('colorDepth', {\n    bitDepth: [1, 8, 16]\n  });\n  if (![8, 16].includes(newColorDepth)) {\n    throw Error('You need to specify the new colorDepth as 8 or 16');\n  }\n  if (this.bitDepth === newColorDepth) {\n    return this.clone();\n  }\n  let newImage = Image.createFrom(this, {\n    bitDepth: newColorDepth\n  });\n  switch (newColorDepth) {\n    case 8:\n      if (this.bitDepth === 1) {\n        for (let i = 0; i < this.size; i++) {\n          if (this.getBit(i)) {\n            newImage.data[i] = 255;\n          }\n        }\n      } else {\n        for (let i = 0; i < this.data.length; i++) {\n          newImage.data[i] = this.data[i] >> 8;\n        }\n      }\n      break;\n    case 16:\n      if (this.bitDepth === 1) {\n        for (let i = 0; i < this.size; i++) {\n          if (this.getBit(i)) {\n            newImage.data[i] = 65535;\n          }\n        }\n      } else {\n        for (let i = 0; i < this.data.length; i++) {\n          newImage.data[i] = this.data[i] << 8 | this.data[i];\n        }\n      }\n      break;\n    default:\n      throw new Error('colorDepth conversion unexpected case');\n  }\n  return newImage;\n}","map":{"version":3,"names":["Image","colorDepth","newColorDepth","checkProcessable","bitDepth","includes","Error","clone","newImage","createFrom","i","size","getBit","data","length"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/colorDepth.js"],"sourcesContent":["import Image from '../Image';\n\n/**\n * Change the image color depth.\n * The color depth is the number of bits that is assigned to each point of a channel.\n * For normal images it is 8 bits meaning the value is between 0 and 255.\n * Currently only conversion from 1, 8 or 16 bits towards 8 or 16 bits are allowed.\n * @memberof Image\n * @instance\n * @param {number} [newColorDepth=8]\n * @return {Image} The new image\n * @example\n * var newImage = image.colorDepth(8);\n */\nexport default function colorDepth(newColorDepth = 8) {\n  this.checkProcessable('colorDepth', {\n    bitDepth: [1, 8, 16],\n  });\n\n  if (![8, 16].includes(newColorDepth)) {\n    throw Error('You need to specify the new colorDepth as 8 or 16');\n  }\n\n  if (this.bitDepth === newColorDepth) {\n    return this.clone();\n  }\n\n  let newImage = Image.createFrom(this, { bitDepth: newColorDepth });\n\n  switch (newColorDepth) {\n    case 8:\n      if (this.bitDepth === 1) {\n        for (let i = 0; i < this.size; i++) {\n          if (this.getBit(i)) {\n            newImage.data[i] = 255;\n          }\n        }\n      } else {\n        for (let i = 0; i < this.data.length; i++) {\n          newImage.data[i] = this.data[i] >> 8;\n        }\n      }\n      break;\n    case 16:\n      if (this.bitDepth === 1) {\n        for (let i = 0; i < this.size; i++) {\n          if (this.getBit(i)) {\n            newImage.data[i] = 65535;\n          }\n        }\n      } else {\n        for (let i = 0; i < this.data.length; i++) {\n          newImage.data[i] = (this.data[i] << 8) | this.data[i];\n        }\n      }\n      break;\n    default:\n      throw new Error('colorDepth conversion unexpected case');\n  }\n  return newImage;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,UAAU;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAACC,aAAa,GAAG,CAAC,EAAE;EACpD,IAAI,CAACC,gBAAgB,CAAC,YAAY,EAAE;IAClCC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;EACrB,CAAC,CAAC;EAEF,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,QAAQ,CAACH,aAAa,CAAC,EAAE;IACpC,MAAMI,KAAK,CAAC,mDAAmD,CAAC;EAClE;EAEA,IAAI,IAAI,CAACF,QAAQ,KAAKF,aAAa,EAAE;IACnC,OAAO,IAAI,CAACK,KAAK,CAAC,CAAC;EACrB;EAEA,IAAIC,QAAQ,GAAGR,KAAK,CAACS,UAAU,CAAC,IAAI,EAAE;IAAEL,QAAQ,EAAEF;EAAc,CAAC,CAAC;EAElE,QAAQA,aAAa;IACnB,KAAK,CAAC;MACJ,IAAI,IAAI,CAACE,QAAQ,KAAK,CAAC,EAAE;QACvB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,IAAI,EAAED,CAAC,EAAE,EAAE;UAClC,IAAI,IAAI,CAACE,MAAM,CAACF,CAAC,CAAC,EAAE;YAClBF,QAAQ,CAACK,IAAI,CAACH,CAAC,CAAC,GAAG,GAAG;UACxB;QACF;MACF,CAAC,MAAM;QACL,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACG,IAAI,CAACC,MAAM,EAAEJ,CAAC,EAAE,EAAE;UACzCF,QAAQ,CAACK,IAAI,CAACH,CAAC,CAAC,GAAG,IAAI,CAACG,IAAI,CAACH,CAAC,CAAC,IAAI,CAAC;QACtC;MACF;MACA;IACF,KAAK,EAAE;MACL,IAAI,IAAI,CAACN,QAAQ,KAAK,CAAC,EAAE;QACvB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,IAAI,EAAED,CAAC,EAAE,EAAE;UAClC,IAAI,IAAI,CAACE,MAAM,CAACF,CAAC,CAAC,EAAE;YAClBF,QAAQ,CAACK,IAAI,CAACH,CAAC,CAAC,GAAG,KAAK;UAC1B;QACF;MACF,CAAC,MAAM;QACL,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACG,IAAI,CAACC,MAAM,EAAEJ,CAAC,EAAE,EAAE;UACzCF,QAAQ,CAACK,IAAI,CAACH,CAAC,CAAC,GAAI,IAAI,CAACG,IAAI,CAACH,CAAC,CAAC,IAAI,CAAC,GAAI,IAAI,CAACG,IAAI,CAACH,CAAC,CAAC;QACvD;MACF;MACA;IACF;MACE,MAAM,IAAIJ,KAAK,CAAC,uCAAuC,CAAC;EAC5D;EACA,OAAOE,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}