{"ast":null,"code":"import * as exif from './tags/exif';\nimport * as gps from './tags/gps';\nimport * as standard from './tags/standard';\nconst tags = {\n  standard,\n  exif,\n  gps\n};\nexport default class IFD {\n  constructor(kind) {\n    if (!kind) {\n      throw new Error('missing kind');\n    }\n    this.data = new Uint8Array();\n    this.fields = new Map();\n    this.kind = kind;\n    this._hasMap = false;\n    this._map = {};\n  }\n  get(tag) {\n    if (typeof tag === 'number') {\n      return this.fields.get(tag);\n    } else if (typeof tag === 'string') {\n      return this.fields.get(tags[this.kind].tagsByName[tag]);\n    } else {\n      throw new Error('expected a number or string');\n    }\n  }\n  get map() {\n    if (!this._hasMap) {\n      const taglist = tags[this.kind].tagsById;\n      for (let key of this.fields.keys()) {\n        if (taglist[key]) {\n          this._map[taglist[key]] = this.fields.get(key);\n        }\n      }\n      this._hasMap = true;\n    }\n    return this._map;\n  }\n}","map":{"version":3,"names":["exif","gps","standard","tags","IFD","constructor","kind","Error","data","Uint8Array","fields","Map","_hasMap","_map","get","tag","tagsByName","map","taglist","tagsById","key","keys"],"sources":["C:\\Users\\Admin\\Documents\\Workspace\\opencv\\opencv\\node_modules\\tiff\\src\\ifd.ts"],"sourcesContent":["import * as exif from './tags/exif';\nimport * as gps from './tags/gps';\nimport * as standard from './tags/standard';\nimport { IFDKind, DataArray } from './types';\n\nconst tags = {\n  standard,\n  exif,\n  gps,\n};\n\nexport default class IFD {\n  public kind: IFDKind;\n  public data: DataArray;\n  public fields: Map<number, any>;\n  public exif: IFD | undefined;\n  public gps: IFD | undefined;\n\n  private _hasMap: boolean;\n  private _map: any;\n\n  public constructor(kind: IFDKind) {\n    if (!kind) {\n      throw new Error('missing kind');\n    }\n    this.data = new Uint8Array();\n    this.fields = new Map();\n    this.kind = kind;\n    this._hasMap = false;\n    this._map = {};\n  }\n\n  public get(tag: number | string): any {\n    if (typeof tag === 'number') {\n      return this.fields.get(tag);\n    } else if (typeof tag === 'string') {\n      return this.fields.get(tags[this.kind].tagsByName[tag]);\n    } else {\n      throw new Error('expected a number or string');\n    }\n  }\n\n  public get map(): Record<string, any> {\n    if (!this._hasMap) {\n      const taglist = tags[this.kind].tagsById;\n      for (let key of this.fields.keys()) {\n        if (taglist[key]) {\n          this._map[taglist[key]] = this.fields.get(key);\n        }\n      }\n      this._hasMap = true;\n    }\n    return this._map;\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,aAAa;AACnC,OAAO,KAAKC,GAAG,MAAM,YAAY;AACjC,OAAO,KAAKC,QAAQ,MAAM,iBAAiB;AAG3C,MAAMC,IAAI,GAAG;EACXD,QAAQ;EACRF,IAAI;EACJC;CACD;AAED,eAAc,MAAOG,GAAG;EAUtBC,YAAmBC,IAAa;IAC9B,IAAI,CAACA,IAAI,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;;IAEjC,IAAI,CAACC,IAAI,GAAG,IAAIC,UAAU,EAAE;IAC5B,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,EAAE;IACvB,IAAI,CAACL,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACM,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,IAAI,GAAG,EAAE;EAChB;EAEOC,GAAGA,CAACC,GAAoB;IAC7B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAC3B,OAAO,IAAI,CAACL,MAAM,CAACI,GAAG,CAACC,GAAG,CAAC;KAC5B,MAAM,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAClC,OAAO,IAAI,CAACL,MAAM,CAACI,GAAG,CAACX,IAAI,CAAC,IAAI,CAACG,IAAI,CAAC,CAACU,UAAU,CAACD,GAAG,CAAC,CAAC;KACxD,MAAM;MACL,MAAM,IAAIR,KAAK,CAAC,6BAA6B,CAAC;;EAElD;EAEA,IAAWU,GAAGA,CAAA;IACZ,IAAI,CAAC,IAAI,CAACL,OAAO,EAAE;MACjB,MAAMM,OAAO,GAAGf,IAAI,CAAC,IAAI,CAACG,IAAI,CAAC,CAACa,QAAQ;MACxC,KAAK,IAAIC,GAAG,IAAI,IAAI,CAACV,MAAM,CAACW,IAAI,EAAE,EAAE;QAClC,IAAIH,OAAO,CAACE,GAAG,CAAC,EAAE;UAChB,IAAI,CAACP,IAAI,CAACK,OAAO,CAACE,GAAG,CAAC,CAAC,GAAG,IAAI,CAACV,MAAM,CAACI,GAAG,CAACM,GAAG,CAAC;;;MAGlD,IAAI,CAACR,OAAO,GAAG,IAAI;;IAErB,OAAO,IAAI,CAACC,IAAI;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}