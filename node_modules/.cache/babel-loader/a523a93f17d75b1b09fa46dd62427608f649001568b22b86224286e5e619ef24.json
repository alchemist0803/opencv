{"ast":null,"code":"import getImageParameters from '../internal/getImageParameters';\nimport { getOutputImageOrInPlace } from '../internal/getOutputImage';\n\n/**\n * Inserts an image within another image.\n * @memberof Image\n * @instance\n * @param {Image} toInsert The image to insert. Out of boundary pixel will be ignored.\n * @param {object} [options]\n * @param {number} [options.x=0] x offset\n * @param {number} [options.y=0] y offset\n * @param {boolean} [options.inPlace=false] - If true modifies the image. If false the insertion is performed on a copy of the image.\n * @return {Image} The modified image or the new image.\n */\nexport default function insert(toInsert, options = {}) {\n  const parameters = getImageParameters(toInsert);\n  this.checkProcessable('insert', parameters);\n  let {\n    x = 0,\n    y = 0\n  } = options;\n  const out = getOutputImageOrInPlace(this, options, {\n    copy: true\n  });\n  const maxY = Math.min(out.height, y + toInsert.height);\n  const maxX = Math.min(out.width, x + toInsert.width);\n  if (out.bitDepth === 1) {\n    for (let j = y; j < maxY; j++) {\n      for (let i = x; i < maxX; i++) {\n        const val = toInsert.getBitXY(i - x, j - y);\n        if (val) out.setBitXY(i, j);else out.clearBitXY(i, j);\n      }\n    }\n  } else {\n    for (let j = y; j < maxY; j++) {\n      for (let i = x; i < maxX; i++) {\n        out.setPixelXY(i, j, toInsert.getPixelXY(i - x, j - y));\n      }\n    }\n  }\n  return out;\n}","map":{"version":3,"names":["getImageParameters","getOutputImageOrInPlace","insert","toInsert","options","parameters","checkProcessable","x","y","out","copy","maxY","Math","min","height","maxX","width","bitDepth","j","i","val","getBitXY","setBitXY","clearBitXY","setPixelXY","getPixelXY"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/insert.js"],"sourcesContent":["import getImageParameters from '../internal/getImageParameters';\nimport { getOutputImageOrInPlace } from '../internal/getOutputImage';\n\n/**\n * Inserts an image within another image.\n * @memberof Image\n * @instance\n * @param {Image} toInsert The image to insert. Out of boundary pixel will be ignored.\n * @param {object} [options]\n * @param {number} [options.x=0] x offset\n * @param {number} [options.y=0] y offset\n * @param {boolean} [options.inPlace=false] - If true modifies the image. If false the insertion is performed on a copy of the image.\n * @return {Image} The modified image or the new image.\n */\nexport default function insert(toInsert, options = {}) {\n  const parameters = getImageParameters(toInsert);\n  this.checkProcessable('insert', parameters);\n  let { x = 0, y = 0 } = options;\n\n  const out = getOutputImageOrInPlace(this, options, { copy: true });\n  const maxY = Math.min(out.height, y + toInsert.height);\n  const maxX = Math.min(out.width, x + toInsert.width);\n  if (out.bitDepth === 1) {\n    for (let j = y; j < maxY; j++) {\n      for (let i = x; i < maxX; i++) {\n        const val = toInsert.getBitXY(i - x, j - y);\n        if (val) out.setBitXY(i, j);\n        else out.clearBitXY(i, j);\n      }\n    }\n  } else {\n    for (let j = y; j < maxY; j++) {\n      for (let i = x; i < maxX; i++) {\n        out.setPixelXY(i, j, toInsert.getPixelXY(i - x, j - y));\n      }\n    }\n  }\n\n  return out;\n}\n"],"mappings":"AAAA,OAAOA,kBAAkB,MAAM,gCAAgC;AAC/D,SAASC,uBAAuB,QAAQ,4BAA4B;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,MAAMA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACrD,MAAMC,UAAU,GAAGL,kBAAkB,CAACG,QAAQ,CAAC;EAC/C,IAAI,CAACG,gBAAgB,CAAC,QAAQ,EAAED,UAAU,CAAC;EAC3C,IAAI;IAAEE,CAAC,GAAG,CAAC;IAAEC,CAAC,GAAG;EAAE,CAAC,GAAGJ,OAAO;EAE9B,MAAMK,GAAG,GAAGR,uBAAuB,CAAC,IAAI,EAAEG,OAAO,EAAE;IAAEM,IAAI,EAAE;EAAK,CAAC,CAAC;EAClE,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACJ,GAAG,CAACK,MAAM,EAAEN,CAAC,GAAGL,QAAQ,CAACW,MAAM,CAAC;EACtD,MAAMC,IAAI,GAAGH,IAAI,CAACC,GAAG,CAACJ,GAAG,CAACO,KAAK,EAAET,CAAC,GAAGJ,QAAQ,CAACa,KAAK,CAAC;EACpD,IAAIP,GAAG,CAACQ,QAAQ,KAAK,CAAC,EAAE;IACtB,KAAK,IAAIC,CAAC,GAAGV,CAAC,EAAEU,CAAC,GAAGP,IAAI,EAAEO,CAAC,EAAE,EAAE;MAC7B,KAAK,IAAIC,CAAC,GAAGZ,CAAC,EAAEY,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;QAC7B,MAAMC,GAAG,GAAGjB,QAAQ,CAACkB,QAAQ,CAACF,CAAC,GAAGZ,CAAC,EAAEW,CAAC,GAAGV,CAAC,CAAC;QAC3C,IAAIY,GAAG,EAAEX,GAAG,CAACa,QAAQ,CAACH,CAAC,EAAED,CAAC,CAAC,CAAC,KACvBT,GAAG,CAACc,UAAU,CAACJ,CAAC,EAAED,CAAC,CAAC;MAC3B;IACF;EACF,CAAC,MAAM;IACL,KAAK,IAAIA,CAAC,GAAGV,CAAC,EAAEU,CAAC,GAAGP,IAAI,EAAEO,CAAC,EAAE,EAAE;MAC7B,KAAK,IAAIC,CAAC,GAAGZ,CAAC,EAAEY,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;QAC7BV,GAAG,CAACe,UAAU,CAACL,CAAC,EAAED,CAAC,EAAEf,QAAQ,CAACsB,UAAU,CAACN,CAAC,GAAGZ,CAAC,EAAEW,CAAC,GAAGV,CAAC,CAAC,CAAC;MACzD;IACF;EACF;EAEA,OAAOC,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}