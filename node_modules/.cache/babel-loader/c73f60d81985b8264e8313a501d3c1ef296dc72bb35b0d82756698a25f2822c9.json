{"ast":null,"code":"import { validateChannel } from '../../util/channel';\nimport Image from '../Image';\nimport { GREY } from '../model/model';\n\n/**\n * Create a grey image based on the selected channel\n * @memberof Image\n * @instance\n * @param {number|string} channel\n * @param {object} [options]\n * @param {boolean} [options.keepAlpha]\n * @param {boolean} [options.mergeAlpha]\n * @return {Image} A grey image with the extracted channel\n */\nexport default function getChannel(channel, options = {}) {\n  let {\n    keepAlpha = false,\n    mergeAlpha = false\n  } = options;\n  keepAlpha &= this.alpha;\n  mergeAlpha &= this.alpha;\n  this.checkProcessable('getChannel', {\n    bitDepth: [8, 16]\n  });\n  channel = validateChannel(this, channel);\n  let newImage = Image.createFrom(this, {\n    components: 1,\n    alpha: keepAlpha,\n    colorModel: GREY\n  });\n  let ptr = 0;\n  for (let j = 0; j < this.data.length; j += this.channels) {\n    if (mergeAlpha) {\n      newImage.data[ptr++] = this.data[j + channel] * this.data[j + this.components] / this.maxValue;\n    } else {\n      newImage.data[ptr++] = this.data[j + channel];\n      if (keepAlpha) {\n        newImage.data[ptr++] = this.data[j + this.components];\n      }\n    }\n  }\n  return newImage;\n}","map":{"version":3,"names":["validateChannel","Image","GREY","getChannel","channel","options","keepAlpha","mergeAlpha","alpha","checkProcessable","bitDepth","newImage","createFrom","components","colorModel","ptr","j","data","length","channels","maxValue"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/utility/getChannel.js"],"sourcesContent":["import { validateChannel } from '../../util/channel';\nimport Image from '../Image';\nimport { GREY } from '../model/model';\n\n/**\n * Create a grey image based on the selected channel\n * @memberof Image\n * @instance\n * @param {number|string} channel\n * @param {object} [options]\n * @param {boolean} [options.keepAlpha]\n * @param {boolean} [options.mergeAlpha]\n * @return {Image} A grey image with the extracted channel\n */\nexport default function getChannel(channel, options = {}) {\n  let { keepAlpha = false, mergeAlpha = false } = options;\n\n  keepAlpha &= this.alpha;\n  mergeAlpha &= this.alpha;\n\n  this.checkProcessable('getChannel', {\n    bitDepth: [8, 16],\n  });\n\n  channel = validateChannel(this, channel);\n\n  let newImage = Image.createFrom(this, {\n    components: 1,\n    alpha: keepAlpha,\n    colorModel: GREY,\n  });\n  let ptr = 0;\n  for (let j = 0; j < this.data.length; j += this.channels) {\n    if (mergeAlpha) {\n      newImage.data[ptr++] =\n        (this.data[j + channel] * this.data[j + this.components]) /\n        this.maxValue;\n    } else {\n      newImage.data[ptr++] = this.data[j + channel];\n      if (keepAlpha) {\n        newImage.data[ptr++] = this.data[j + this.components];\n      }\n    }\n  }\n\n  return newImage;\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,IAAI,QAAQ,gBAAgB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAACC,OAAO,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACxD,IAAI;IAAEC,SAAS,GAAG,KAAK;IAAEC,UAAU,GAAG;EAAM,CAAC,GAAGF,OAAO;EAEvDC,SAAS,IAAI,IAAI,CAACE,KAAK;EACvBD,UAAU,IAAI,IAAI,CAACC,KAAK;EAExB,IAAI,CAACC,gBAAgB,CAAC,YAAY,EAAE;IAClCC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;EAClB,CAAC,CAAC;EAEFN,OAAO,GAAGJ,eAAe,CAAC,IAAI,EAAEI,OAAO,CAAC;EAExC,IAAIO,QAAQ,GAAGV,KAAK,CAACW,UAAU,CAAC,IAAI,EAAE;IACpCC,UAAU,EAAE,CAAC;IACbL,KAAK,EAAEF,SAAS;IAChBQ,UAAU,EAAEZ;EACd,CAAC,CAAC;EACF,IAAIa,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,IAAI,CAACC,MAAM,EAAEF,CAAC,IAAI,IAAI,CAACG,QAAQ,EAAE;IACxD,IAAIZ,UAAU,EAAE;MACdI,QAAQ,CAACM,IAAI,CAACF,GAAG,EAAE,CAAC,GACjB,IAAI,CAACE,IAAI,CAACD,CAAC,GAAGZ,OAAO,CAAC,GAAG,IAAI,CAACa,IAAI,CAACD,CAAC,GAAG,IAAI,CAACH,UAAU,CAAC,GACxD,IAAI,CAACO,QAAQ;IACjB,CAAC,MAAM;MACLT,QAAQ,CAACM,IAAI,CAACF,GAAG,EAAE,CAAC,GAAG,IAAI,CAACE,IAAI,CAACD,CAAC,GAAGZ,OAAO,CAAC;MAC7C,IAAIE,SAAS,EAAE;QACbK,QAAQ,CAACM,IAAI,CAACF,GAAG,EAAE,CAAC,GAAG,IAAI,CAACE,IAAI,CAACD,CAAC,GAAG,IAAI,CAACH,UAAU,CAAC;MACvD;IACF;EACF;EAEA,OAAOF,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}