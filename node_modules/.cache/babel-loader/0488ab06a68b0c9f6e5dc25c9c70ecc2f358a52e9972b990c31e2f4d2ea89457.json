{"ast":null,"code":"import { cssColor } from '@swiftcarrot/color-fns';\nexport function css2array(string) {\n  let color = cssColor(string);\n  return [color.r, color.g, color.b, Math.round(color.a * 255 / 100)];\n}\nfunction hue2rgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\nfunction hsl2rgb(h, s, l) {\n  let m1, m2, hue, r, g, b;\n  s /= 100;\n  l /= 100;\n  if (s === 0) {\n    r = g = b = l * 255;\n  } else {\n    if (l <= 0.5) {\n      m2 = l * (s + 1);\n    } else {\n      m2 = l + s - l * s;\n    }\n    m1 = l * 2 - m2;\n    hue = h / 360;\n    r = hue2rgb(m1, m2, hue + 1 / 3);\n    g = hue2rgb(m1, m2, hue);\n    b = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n  return {\n    r: r,\n    g: g,\n    b: b\n  };\n}\nexport function getDistinctColors(numColors) {\n  let colors = new Array(numColors);\n  let j = 0;\n  for (let i = 0; i < 360; i += 360 / numColors) {\n    j++;\n    let color = hsl2rgb(i, 100, 30 + j % 4 * 15);\n    colors[j - 1] = [Math.round(color.r * 255), Math.round(color.g * 255), Math.round(color.b * 255)];\n  }\n  return colors;\n}\nexport function getRandomColor() {\n  return [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)];\n}\n\n/**\n * returns an array of colors based on various options\n * by default this methods return 50 distinct colors\n * @param {object} [options]\n * @param {Array<number>|string}     [options.color] - Array of 3 elements (R, G, B) or a valid css color.\n * @param {Array<Array<number>>|Array<string>} [options.colors] - Array of Array of 3 elements (R, G, B) for each color of each mask\n * @param {boolean}             [options.randomColors=true] - To paint each mask with a random color if color and colors are undefined\n * @param {boolean}             [options.distinctColors=false] - To paint each mask with a different color if color and colors are undefined\n * @param {boolean}             [options.numberColors=50] - number of colors to generate by default\n * @return {Array} Array of colors\n * @private\n */\nexport function getColors(options) {\n  let {\n    color,\n    colors,\n    randomColors,\n    // true / false\n    numberColors = 50\n  } = options;\n  if (color && !Array.isArray(color)) {\n    color = css2array(color);\n  }\n  if (color) {\n    return [color];\n  }\n  if (colors) {\n    colors = colors.map(function (color) {\n      if (!Array.isArray(color)) {\n        return css2array(color);\n      }\n      return color;\n    });\n    return colors;\n  }\n  if (randomColors) {\n    colors = new Array(numberColors);\n    for (let i = 0; i < numberColors; i++) {\n      colors[i] = getRandomColor();\n    }\n  }\n  return getDistinctColors(numberColors);\n}","map":{"version":3,"names":["cssColor","css2array","string","color","r","g","b","Math","round","a","hue2rgb","p","q","t","hsl2rgb","h","s","l","m1","m2","hue","getDistinctColors","numColors","colors","Array","j","i","getRandomColor","floor","random","getColors","options","randomColors","numberColors","isArray","map"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/util/color.js"],"sourcesContent":["import { cssColor } from '@swiftcarrot/color-fns';\n\nexport function css2array(string) {\n  let color = cssColor(string);\n  return [color.r, color.g, color.b, Math.round((color.a * 255) / 100)];\n}\n\nfunction hue2rgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\n\nfunction hsl2rgb(h, s, l) {\n  let m1, m2, hue, r, g, b;\n  s /= 100;\n  l /= 100;\n\n  if (s === 0) {\n    r = g = b = l * 255;\n  } else {\n    if (l <= 0.5) {\n      m2 = l * (s + 1);\n    } else {\n      m2 = l + s - l * s;\n    }\n\n    m1 = l * 2 - m2;\n    hue = h / 360;\n    r = hue2rgb(m1, m2, hue + 1 / 3);\n    g = hue2rgb(m1, m2, hue);\n    b = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n  return { r: r, g: g, b: b };\n}\n\nexport function getDistinctColors(numColors) {\n  let colors = new Array(numColors);\n  let j = 0;\n  for (let i = 0; i < 360; i += 360 / numColors) {\n    j++;\n    let color = hsl2rgb(i, 100, 30 + (j % 4) * 15);\n    colors[j - 1] = [\n      Math.round(color.r * 255),\n      Math.round(color.g * 255),\n      Math.round(color.b * 255),\n    ];\n  }\n  return colors;\n}\n\nexport function getRandomColor() {\n  return [\n    Math.floor(Math.random() * 256),\n    Math.floor(Math.random() * 256),\n    Math.floor(Math.random() * 256),\n  ];\n}\n\n/**\n * returns an array of colors based on various options\n * by default this methods return 50 distinct colors\n * @param {object} [options]\n * @param {Array<number>|string}     [options.color] - Array of 3 elements (R, G, B) or a valid css color.\n * @param {Array<Array<number>>|Array<string>} [options.colors] - Array of Array of 3 elements (R, G, B) for each color of each mask\n * @param {boolean}             [options.randomColors=true] - To paint each mask with a random color if color and colors are undefined\n * @param {boolean}             [options.distinctColors=false] - To paint each mask with a different color if color and colors are undefined\n * @param {boolean}             [options.numberColors=50] - number of colors to generate by default\n * @return {Array} Array of colors\n * @private\n */\nexport function getColors(options) {\n  let {\n    color,\n    colors,\n    randomColors, // true / false\n    numberColors = 50,\n  } = options;\n\n  if (color && !Array.isArray(color)) {\n    color = css2array(color);\n  }\n\n  if (color) {\n    return [color];\n  }\n\n  if (colors) {\n    colors = colors.map(function (color) {\n      if (!Array.isArray(color)) {\n        return css2array(color);\n      }\n      return color;\n    });\n    return colors;\n  }\n\n  if (randomColors) {\n    colors = new Array(numberColors);\n    for (let i = 0; i < numberColors; i++) {\n      colors[i] = getRandomColor();\n    }\n  }\n\n  return getDistinctColors(numberColors);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}