{"ast":null,"code":"import Image from '../Image';\nimport rotateFree from './rotateFree';\n\n/**\n * Rotates an image.\n * @memberof Image\n * @instance\n * @param {number} angle - Angle of the rotation in degrees\n * @param {object} [options]\n * @param {InterpolationAlgorithm} [options.interpolation='nearestNeighbor'] - Interpolation algorithm to use if `angle` is not a multiple of 90\n * @return {Image} The new rotated image\n */\nexport function rotate(angle, options) {\n  this.checkProcessable('rotate', {\n    bitDepth: [1, 8, 16]\n  });\n  if (typeof angle !== 'number') {\n    throw new TypeError('angle must be a number');\n  }\n  if (angle < 0) {\n    angle = Math.ceil(-angle / 360) * 360 + angle;\n  }\n  switch (angle % 360) {\n    case 0:\n      return this.clone();\n    case 90:\n      return rotateRight.call(this);\n    case 180:\n      return rotate180.call(this);\n    case 270:\n      return rotateLeft.call(this);\n    default:\n      return rotateFree.call(this, angle, options);\n  }\n}\n/**\n * Rotates an image counter-clockwise\n * @memberof Image\n * @instance\n * @return {Image} The new rotated image\n */\n\nexport function rotateLeft() {\n  if (this.bitDepth === 1) {\n    const newImage = new Image(this.height, this.width, {\n      kind: 'BINARY',\n      parent: this\n    });\n    const newMaxHeight = newImage.height - 1;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        if (this.getBitXY(j, i)) {\n          newImage.setBitXY(i, newMaxHeight - j);\n        }\n      }\n    }\n    return newImage;\n  } else {\n    const newImage = Image.createFrom(this, {\n      width: this.height,\n      height: this.width\n    });\n    const newMaxHeight = newImage.height - 1;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        for (let k = 0; k < this.channels; k++) {\n          newImage.setValueXY(i, newMaxHeight - j, k, this.getValueXY(j, i, k));\n        }\n      }\n    }\n    return newImage;\n  }\n}\n/**\n * Rotates an image clockwise\n * @memberof Image\n * @instance\n * @return {Image} The new rotated image\n */\n\nexport function rotateRight() {\n  if (this.bitDepth === 1) {\n    const newImage = new Image(this.height, this.width, {\n      kind: 'BINARY',\n      parent: this\n    });\n    const newMaxWidth = newImage.width - 1;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        if (this.getBitXY(j, i)) {\n          newImage.setBitXY(newMaxWidth - i, j);\n        }\n      }\n    }\n    return newImage;\n  } else {\n    const newImage = Image.createFrom(this, {\n      width: this.height,\n      height: this.width\n    });\n    const newMaxWidth = newImage.width - 1;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        for (let k = 0; k < this.channels; k++) {\n          newImage.setValueXY(newMaxWidth - i, j, k, this.getValueXY(j, i, k));\n        }\n      }\n    }\n    return newImage;\n  }\n}\nfunction rotate180() {\n  if (this.bitDepth === 1) {\n    const newImage = new Image(this.width, this.height, {\n      kind: 'BINARY',\n      parent: this\n    });\n    const newMaxWidth = newImage.width - 1;\n    const newMaxHeight = newImage.height - 1;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        if (this.getBitXY(j, i)) {\n          newImage.setBitXY(newMaxWidth - j, newMaxHeight - i);\n        }\n      }\n    }\n    return newImage;\n  } else {\n    const newImage = Image.createFrom(this);\n    const newMaxWidth = newImage.width - 1;\n    const newMaxHeight = newImage.height - 1;\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        for (let k = 0; k < this.channels; k++) {\n          newImage.setValueXY(newMaxWidth - j, newMaxHeight - i, k, this.getValueXY(j, i, k));\n        }\n      }\n    }\n    return newImage;\n  }\n}","map":{"version":3,"names":["Image","rotateFree","rotate","angle","options","checkProcessable","bitDepth","TypeError","Math","ceil","clone","rotateRight","call","rotate180","rotateLeft","newImage","height","width","kind","parent","newMaxHeight","i","j","getBitXY","setBitXY","createFrom","k","channels","setValueXY","getValueXY","newMaxWidth"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/rotate.js"],"sourcesContent":["import Image from '../Image';\n\nimport rotateFree from './rotateFree';\n\n/**\n * Rotates an image.\n * @memberof Image\n * @instance\n * @param {number} angle - Angle of the rotation in degrees\n * @param {object} [options]\n * @param {InterpolationAlgorithm} [options.interpolation='nearestNeighbor'] - Interpolation algorithm to use if `angle` is not a multiple of 90\n * @return {Image} The new rotated image\n */\nexport function rotate(angle, options) {\n  this.checkProcessable('rotate', {\n    bitDepth: [1, 8, 16],\n  });\n  if (typeof angle !== 'number') {\n    throw new TypeError('angle must be a number');\n  }\n\n  if (angle < 0) {\n    angle = Math.ceil(-angle / 360) * 360 + angle;\n  }\n\n  switch (angle % 360) {\n    case 0:\n      return this.clone();\n\n    case 90:\n      return rotateRight.call(this);\n\n    case 180:\n      return rotate180.call(this);\n\n    case 270:\n      return rotateLeft.call(this);\n\n    default:\n      return rotateFree.call(this, angle, options);\n  }\n}\n/**\n * Rotates an image counter-clockwise\n * @memberof Image\n * @instance\n * @return {Image} The new rotated image\n */\n\nexport function rotateLeft() {\n  if (this.bitDepth === 1) {\n    const newImage = new Image(this.height, this.width, {\n      kind: 'BINARY',\n      parent: this,\n    });\n\n    const newMaxHeight = newImage.height - 1;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        if (this.getBitXY(j, i)) {\n          newImage.setBitXY(i, newMaxHeight - j);\n        }\n      }\n    }\n\n    return newImage;\n  } else {\n    const newImage = Image.createFrom(this, {\n      width: this.height,\n      height: this.width,\n    });\n\n    const newMaxHeight = newImage.height - 1;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        for (let k = 0; k < this.channels; k++) {\n          newImage.setValueXY(i, newMaxHeight - j, k, this.getValueXY(j, i, k));\n        }\n      }\n    }\n\n    return newImage;\n  }\n}\n/**\n * Rotates an image clockwise\n * @memberof Image\n * @instance\n * @return {Image} The new rotated image\n */\n\nexport function rotateRight() {\n  if (this.bitDepth === 1) {\n    const newImage = new Image(this.height, this.width, {\n      kind: 'BINARY',\n      parent: this,\n    });\n\n    const newMaxWidth = newImage.width - 1;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        if (this.getBitXY(j, i)) {\n          newImage.setBitXY(newMaxWidth - i, j);\n        }\n      }\n    }\n\n    return newImage;\n  } else {\n    const newImage = Image.createFrom(this, {\n      width: this.height,\n      height: this.width,\n    });\n\n    const newMaxWidth = newImage.width - 1;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        for (let k = 0; k < this.channels; k++) {\n          newImage.setValueXY(newMaxWidth - i, j, k, this.getValueXY(j, i, k));\n        }\n      }\n    }\n\n    return newImage;\n  }\n}\n\nfunction rotate180() {\n  if (this.bitDepth === 1) {\n    const newImage = new Image(this.width, this.height, {\n      kind: 'BINARY',\n      parent: this,\n    });\n\n    const newMaxWidth = newImage.width - 1;\n    const newMaxHeight = newImage.height - 1;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        if (this.getBitXY(j, i)) {\n          newImage.setBitXY(newMaxWidth - j, newMaxHeight - i);\n        }\n      }\n    }\n\n    return newImage;\n  } else {\n    const newImage = Image.createFrom(this);\n\n    const newMaxWidth = newImage.width - 1;\n    const newMaxHeight = newImage.height - 1;\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < this.width; j++) {\n        for (let k = 0; k < this.channels; k++) {\n          newImage.setValueXY(\n            newMaxWidth - j,\n            newMaxHeight - i,\n            k,\n            this.getValueXY(j, i, k),\n          );\n        }\n      }\n    }\n\n    return newImage;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}