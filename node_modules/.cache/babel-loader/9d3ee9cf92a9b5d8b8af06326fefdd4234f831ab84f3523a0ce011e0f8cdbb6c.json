{"ast":null,"code":"import copyAlphaChannel from '../internal/copyAlphaChannel';\nimport { getOutputImageOrInPlace } from '../internal/getOutputImage';\n\n/**\n * Invert the colors of an image\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {boolean} [options.inPlace=false]\n * @param {Image} [options.out]\n * @return {Image}\n */\nexport default function invert(options = {}) {\n  this.checkProcessable('invert', {\n    bitDepth: [1, 8, 16]\n  });\n  const out = getOutputImageOrInPlace(this, options);\n  if (this.bitDepth === 1) {\n    invertBinary(this, out);\n  } else {\n    invertColor(this, out);\n    if (this !== out) {\n      copyAlphaChannel(this, out);\n    }\n  }\n  return out;\n}\nfunction invertBinary(image, out) {\n  for (let i = 0; i < image.data.length; i++) {\n    out.data[i] = ~image.data[i];\n  }\n}\nfunction invertColor(image, out) {\n  for (let pixel = 0; pixel < image.data.length; pixel += image.channels) {\n    for (let c = 0; c < image.components; c++) {\n      out.data[pixel + c] = image.maxValue - image.data[pixel + c];\n    }\n  }\n}","map":{"version":3,"names":["copyAlphaChannel","getOutputImageOrInPlace","invert","options","checkProcessable","bitDepth","out","invertBinary","invertColor","image","i","data","length","pixel","channels","c","components","maxValue"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/filter/invert.js"],"sourcesContent":["import copyAlphaChannel from '../internal/copyAlphaChannel';\nimport { getOutputImageOrInPlace } from '../internal/getOutputImage';\n\n/**\n * Invert the colors of an image\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {boolean} [options.inPlace=false]\n * @param {Image} [options.out]\n * @return {Image}\n */\nexport default function invert(options = {}) {\n  this.checkProcessable('invert', {\n    bitDepth: [1, 8, 16],\n  });\n\n  const out = getOutputImageOrInPlace(this, options);\n\n  if (this.bitDepth === 1) {\n    invertBinary(this, out);\n  } else {\n    invertColor(this, out);\n    if (this !== out) {\n      copyAlphaChannel(this, out);\n    }\n  }\n  return out;\n}\n\nfunction invertBinary(image, out) {\n  for (let i = 0; i < image.data.length; i++) {\n    out.data[i] = ~image.data[i];\n  }\n}\n\nfunction invertColor(image, out) {\n  for (let pixel = 0; pixel < image.data.length; pixel += image.channels) {\n    for (let c = 0; c < image.components; c++) {\n      out.data[pixel + c] = image.maxValue - image.data[pixel + c];\n    }\n  }\n}\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,8BAA8B;AAC3D,SAASC,uBAAuB,QAAQ,4BAA4B;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,MAAMA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3C,IAAI,CAACC,gBAAgB,CAAC,QAAQ,EAAE;IAC9BC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;EACrB,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAGL,uBAAuB,CAAC,IAAI,EAAEE,OAAO,CAAC;EAElD,IAAI,IAAI,CAACE,QAAQ,KAAK,CAAC,EAAE;IACvBE,YAAY,CAAC,IAAI,EAAED,GAAG,CAAC;EACzB,CAAC,MAAM;IACLE,WAAW,CAAC,IAAI,EAAEF,GAAG,CAAC;IACtB,IAAI,IAAI,KAAKA,GAAG,EAAE;MAChBN,gBAAgB,CAAC,IAAI,EAAEM,GAAG,CAAC;IAC7B;EACF;EACA,OAAOA,GAAG;AACZ;AAEA,SAASC,YAAYA,CAACE,KAAK,EAAEH,GAAG,EAAE;EAChC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,IAAI,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC1CJ,GAAG,CAACK,IAAI,CAACD,CAAC,CAAC,GAAG,CAACD,KAAK,CAACE,IAAI,CAACD,CAAC,CAAC;EAC9B;AACF;AAEA,SAASF,WAAWA,CAACC,KAAK,EAAEH,GAAG,EAAE;EAC/B,KAAK,IAAIO,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGJ,KAAK,CAACE,IAAI,CAACC,MAAM,EAAEC,KAAK,IAAIJ,KAAK,CAACK,QAAQ,EAAE;IACtE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACO,UAAU,EAAED,CAAC,EAAE,EAAE;MACzCT,GAAG,CAACK,IAAI,CAACE,KAAK,GAAGE,CAAC,CAAC,GAAGN,KAAK,CAACQ,QAAQ,GAAGR,KAAK,CAACE,IAAI,CAACE,KAAK,GAAGE,CAAC,CAAC;IAC9D;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}