{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.A, precision)} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(this.A, precision)}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(this.A, precision)}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}","map":{"version":3,"names":["BaseRegression","checkArrayLength","maybeToPrecision","SimpleLinearRegression","PowerRegression","constructor","x","y","A","B","regress","_predict","newInputs","Math","pow","toJSON","name","toString","precision","toLaTeX","latex","replace","load","json","TypeError","pr","n","length","xl","Array","yl","i","log","linear","exp","intercept","slope"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-regression-power/src/index.js"],"sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.A,\n      precision\n    )} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(\n        this.A,\n        precision\n      )}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(\n        this.A,\n        precision\n      )}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}