{"ast":null,"code":"import Ifd from './ifd';\n// eslint-disable-next-line prefer-named-capture-group\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\nexport default class TiffIfd extends Ifd {\n  constructor() {\n    super('standard');\n  }\n  // Custom fields\n  get size() {\n    return this.width * this.height;\n  }\n  get width() {\n    return this.imageWidth;\n  }\n  get height() {\n    return this.imageLength;\n  }\n  get components() {\n    return this.samplesPerPixel;\n  }\n  get date() {\n    let date = new Date();\n    let result = dateTimeRegex.exec(this.dateTime);\n    if (result === null) {\n      throw new Error(`invalid dateTime: ${this.dateTime}`);\n    }\n    date.setFullYear(Number(result[1]), Number(result[2]) - 1, Number(result[3]));\n    date.setHours(Number(result[4]), Number(result[5]), Number(result[6]));\n    return date;\n  }\n  // IFD fields\n  get newSubfileType() {\n    return this.get('NewSubfileType');\n  }\n  get imageWidth() {\n    return this.get('ImageWidth');\n  }\n  get imageLength() {\n    return this.get('ImageLength');\n  }\n  get bitsPerSample() {\n    const data = this.get('BitsPerSample');\n    if (data && typeof data !== 'number') {\n      return data[0];\n    }\n    return data;\n  }\n  get alpha() {\n    const extraSamples = this.extraSamples;\n    if (!extraSamples) return false;\n    return extraSamples[0] !== 0;\n  }\n  get associatedAlpha() {\n    const extraSamples = this.extraSamples;\n    if (!extraSamples) return false;\n    return extraSamples[0] === 1;\n  }\n  get extraSamples() {\n    return alwaysArray(this.get('ExtraSamples'));\n  }\n  get compression() {\n    return this.get('Compression') || 1;\n  }\n  get type() {\n    return this.get('PhotometricInterpretation');\n  }\n  get fillOrder() {\n    return this.get('FillOrder') || 1;\n  }\n  get documentName() {\n    return this.get('DocumentName');\n  }\n  get imageDescription() {\n    return this.get('ImageDescription');\n  }\n  get stripOffsets() {\n    return alwaysArray(this.get('StripOffsets'));\n  }\n  get orientation() {\n    return this.get('Orientation');\n  }\n  get samplesPerPixel() {\n    return this.get('SamplesPerPixel') || 1;\n  }\n  get rowsPerStrip() {\n    return this.get('RowsPerStrip');\n  }\n  get stripByteCounts() {\n    return alwaysArray(this.get('StripByteCounts'));\n  }\n  get minSampleValue() {\n    return this.get('MinSampleValue') || 0;\n  }\n  get maxSampleValue() {\n    return this.get('MaxSampleValue') || Math.pow(2, this.bitsPerSample) - 1;\n  }\n  get xResolution() {\n    return this.get('XResolution');\n  }\n  get yResolution() {\n    return this.get('YResolution');\n  }\n  get planarConfiguration() {\n    return this.get('PlanarConfiguration') || 1;\n  }\n  get resolutionUnit() {\n    return this.get('ResolutionUnit') || 2;\n  }\n  get dateTime() {\n    return this.get('DateTime');\n  }\n  get predictor() {\n    return this.get('Predictor') || 1;\n  }\n  get sampleFormat() {\n    return this.get('SampleFormat') || 1;\n  }\n  get sMinSampleValue() {\n    return this.get('SMinSampleValue') || this.minSampleValue;\n  }\n  get sMaxSampleValue() {\n    return this.get('SMaxSampleValue') || this.maxSampleValue;\n  }\n  get palette() {\n    const totalColors = 2 ** this.bitsPerSample;\n    const colorMap = this.get('ColorMap');\n    if (!colorMap) return undefined;\n    if (colorMap.length !== 3 * totalColors) {\n      throw new Error(`ColorMap size must be ${totalColors}`);\n    }\n    const palette = [];\n    for (let i = 0; i < totalColors; i++) {\n      palette.push([colorMap[i], colorMap[i + totalColors], colorMap[i + 2 * totalColors]]);\n    }\n    return palette;\n  }\n}\nfunction alwaysArray(value) {\n  if (typeof value === 'number') return [value];\n  return value;\n}","map":{"version":3,"names":["Ifd","dateTimeRegex","TiffIfd","constructor","size","width","height","imageWidth","imageLength","components","samplesPerPixel","date","Date","result","exec","dateTime","Error","setFullYear","Number","setHours","newSubfileType","get","bitsPerSample","data","alpha","extraSamples","associatedAlpha","alwaysArray","compression","type","fillOrder","documentName","imageDescription","stripOffsets","orientation","rowsPerStrip","stripByteCounts","minSampleValue","maxSampleValue","Math","pow","xResolution","yResolution","planarConfiguration","resolutionUnit","predictor","sampleFormat","sMinSampleValue","sMaxSampleValue","palette","totalColors","colorMap","undefined","length","i","push","value"],"sources":["C:\\Users\\Admin\\Documents\\Workspace\\opencv\\opencv\\node_modules\\tiff\\src\\tiffIfd.ts"],"sourcesContent":["import Ifd from './ifd';\n\n// eslint-disable-next-line prefer-named-capture-group\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\n\nexport default class TiffIfd extends Ifd {\n  public constructor() {\n    super('standard');\n  }\n\n  // Custom fields\n  public get size(): number {\n    return this.width * this.height;\n  }\n  public get width(): number {\n    return this.imageWidth;\n  }\n  public get height(): number {\n    return this.imageLength;\n  }\n  public get components(): number {\n    return this.samplesPerPixel;\n  }\n  public get date(): Date {\n    let date = new Date();\n    let result = dateTimeRegex.exec(this.dateTime);\n    if (result === null) {\n      throw new Error(`invalid dateTime: ${this.dateTime}`);\n    }\n    date.setFullYear(\n      Number(result[1]),\n      Number(result[2]) - 1,\n      Number(result[3]),\n    );\n    date.setHours(Number(result[4]), Number(result[5]), Number(result[6]));\n    return date;\n  }\n\n  // IFD fields\n  public get newSubfileType(): number {\n    return this.get('NewSubfileType');\n  }\n  public get imageWidth(): number {\n    return this.get('ImageWidth');\n  }\n  public get imageLength(): number {\n    return this.get('ImageLength');\n  }\n  public get bitsPerSample(): number {\n    const data = this.get('BitsPerSample');\n    if (data && typeof data !== 'number') {\n      return data[0];\n    }\n    return data;\n  }\n  public get alpha(): boolean {\n    const extraSamples = this.extraSamples;\n    if (!extraSamples) return false;\n    return extraSamples[0] !== 0;\n  }\n  public get associatedAlpha(): boolean {\n    const extraSamples = this.extraSamples;\n    if (!extraSamples) return false;\n    return extraSamples[0] === 1;\n  }\n  public get extraSamples(): number[] | undefined {\n    return alwaysArray(this.get('ExtraSamples'));\n  }\n  public get compression(): number {\n    return this.get('Compression') || 1;\n  }\n  public get type(): number {\n    return this.get('PhotometricInterpretation');\n  }\n  public get fillOrder(): number {\n    return this.get('FillOrder') || 1;\n  }\n  public get documentName(): string | undefined {\n    return this.get('DocumentName');\n  }\n  public get imageDescription(): string | undefined {\n    return this.get('ImageDescription');\n  }\n  public get stripOffsets(): number[] {\n    return alwaysArray(this.get('StripOffsets'));\n  }\n  public get orientation(): number {\n    return this.get('Orientation');\n  }\n  public get samplesPerPixel(): number {\n    return this.get('SamplesPerPixel') || 1;\n  }\n  public get rowsPerStrip(): number {\n    return this.get('RowsPerStrip');\n  }\n  public get stripByteCounts(): number[] {\n    return alwaysArray(this.get('StripByteCounts'));\n  }\n  public get minSampleValue(): number {\n    return this.get('MinSampleValue') || 0;\n  }\n  public get maxSampleValue(): number {\n    return this.get('MaxSampleValue') || Math.pow(2, this.bitsPerSample) - 1;\n  }\n  public get xResolution(): number {\n    return this.get('XResolution');\n  }\n  public get yResolution(): number {\n    return this.get('YResolution');\n  }\n  public get planarConfiguration(): number {\n    return this.get('PlanarConfiguration') || 1;\n  }\n  public get resolutionUnit(): number {\n    return this.get('ResolutionUnit') || 2;\n  }\n  public get dateTime(): string {\n    return this.get('DateTime');\n  }\n  public get predictor(): number {\n    return this.get('Predictor') || 1;\n  }\n  public get sampleFormat(): number {\n    return this.get('SampleFormat') || 1;\n  }\n  public get sMinSampleValue(): number {\n    return this.get('SMinSampleValue') || this.minSampleValue;\n  }\n  public get sMaxSampleValue(): number {\n    return this.get('SMaxSampleValue') || this.maxSampleValue;\n  }\n  public get palette(): [number, number, number][] | undefined {\n    const totalColors = 2 ** this.bitsPerSample;\n    const colorMap: number[] = this.get('ColorMap');\n    if (!colorMap) return undefined;\n    if (colorMap.length !== 3 * totalColors) {\n      throw new Error(`ColorMap size must be ${totalColors}`);\n    }\n    const palette: [number, number, number][] = [];\n    for (let i = 0; i < totalColors; i++) {\n      palette.push([\n        colorMap[i],\n        colorMap[i + totalColors],\n        colorMap[i + 2 * totalColors],\n      ]);\n    }\n    return palette;\n  }\n}\n\nfunction alwaysArray(value: number | number[]): number[] {\n  if (typeof value === 'number') return [value];\n  return value;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}