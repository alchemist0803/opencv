{"ast":null,"code":"import { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\nimport BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n  _predict(x) {\n    let y = 0;\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n    return y;\n  }\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) + times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n    return `f(x) = ${fn}`;\n  }\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n    return new PolynomialRegression(true, json);\n  }\n}\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}","map":{"version":3,"names":["Matrix","MatrixTransposeView","solve","BaseRegression","checkArrayLength","maybeToPrecision","PolynomialRegression","constructor","x","y","degree","powers","coefficients","regress","_predict","k","length","Math","pow","toJSON","name","toString","precision","_toFormula","toLaTeX","isLaTeX","sup","closeSup","times","fn","str","charAt","slice","load","json","TypeError","pr","n","Array","isArray","F","Y","i","set","FT","A","mmul","B","to1DArray"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-regression-polynomial/src/index.js"],"sourcesContent":["import { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\nimport BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\n\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n\n  _predict(x) {\n    let y = 0;\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients,\n    };\n  }\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n    return new PolynomialRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,mBAAmB,EAAEC,KAAK,QAAQ,WAAW;AAC9D,OAAOC,cAAc,IACnBC,gBAAgB,EAChBC,gBAAgB,QACX,oBAAoB;AAE3B,eAAe,MAAMC,oBAAoB,SAASH,cAAc,CAAC;EAC/DI,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAE;IACxB,KAAK,CAAC,CAAC;IACP,IAAIF,CAAC,KAAK,IAAI,EAAE;MACd,IAAI,CAACE,MAAM,GAAGD,CAAC,CAACC,MAAM;MACtB,IAAI,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM;MACtB,IAAI,CAACC,YAAY,GAAGH,CAAC,CAACG,YAAY;IACpC,CAAC,MAAM;MACLR,gBAAgB,CAACI,CAAC,EAAEC,CAAC,CAAC;MACtBI,OAAO,CAAC,IAAI,EAAEL,CAAC,EAAEC,CAAC,EAAEC,MAAM,CAAC;IAC7B;EACF;EAEAI,QAAQA,CAACN,CAAC,EAAE;IACV,IAAIC,CAAC,GAAG,CAAC;IACT,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACJ,MAAM,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3CN,CAAC,IAAI,IAAI,CAACG,YAAY,CAACG,CAAC,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACV,CAAC,EAAE,IAAI,CAACG,MAAM,CAACI,CAAC,CAAC,CAAC;IACzD;IACA,OAAON,CAAC;EACV;EAEAU,MAAMA,CAAA,EAAG;IACP,OAAO;MACLC,IAAI,EAAE,sBAAsB;MAC5BV,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,YAAY,EAAE,IAAI,CAACA;IACrB,CAAC;EACH;EAEAS,QAAQA,CAACC,SAAS,EAAE;IAClB,OAAO,IAAI,CAACC,UAAU,CAACD,SAAS,EAAE,KAAK,CAAC;EAC1C;EAEAE,OAAOA,CAACF,SAAS,EAAE;IACjB,OAAO,IAAI,CAACC,UAAU,CAACD,SAAS,EAAE,IAAI,CAAC;EACzC;EAEAC,UAAUA,CAACD,SAAS,EAAEG,OAAO,EAAE;IAC7B,IAAIC,GAAG,GAAG,GAAG;IACb,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,KAAK,GAAG,KAAK;IACjB,IAAIH,OAAO,EAAE;MACXC,GAAG,GAAG,IAAI;MACVC,QAAQ,GAAG,GAAG;MACdC,KAAK,GAAG,EAAE;IACZ;IAEA,IAAIC,EAAE,GAAG,EAAE;IACX,IAAIC,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACH,YAAY,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACjDe,GAAG,GAAG,EAAE;MACR,IAAI,IAAI,CAAClB,YAAY,CAACG,CAAC,CAAC,KAAK,CAAC,EAAE;QAC9B,IAAI,IAAI,CAACJ,MAAM,CAACI,CAAC,CAAC,KAAK,CAAC,EAAE;UACxBe,GAAG,GAAGzB,gBAAgB,CAAC,IAAI,CAACO,YAAY,CAACG,CAAC,CAAC,EAAEO,SAAS,CAAC;QACzD,CAAC,MAAM;UACL,IAAI,IAAI,CAACX,MAAM,CAACI,CAAC,CAAC,KAAK,CAAC,EAAE;YACxBe,GAAG,GAAG,GAAGzB,gBAAgB,CAAC,IAAI,CAACO,YAAY,CAACG,CAAC,CAAC,EAAEO,SAAS,CAAC,GACxDM,KAAK,GAAG;UACZ,CAAC,MAAM;YACLE,GAAG,GAAG,GAAGzB,gBAAgB,CAAC,IAAI,CAACO,YAAY,CAACG,CAAC,CAAC,EAAEO,SAAS,CAAC,GACxDM,KAAK,IAAIF,GAAG,GAAG,IAAI,CAACf,MAAM,CAACI,CAAC,CAAC,GAAGY,QAAQ,EAAE;UAC9C;QACF;QAEA,IAAI,IAAI,CAACf,YAAY,CAACG,CAAC,CAAC,GAAG,CAAC,IAAIA,CAAC,KAAK,IAAI,CAACH,YAAY,CAACI,MAAM,GAAG,CAAC,EAAE;UAClEc,GAAG,GAAG,MAAMA,GAAG,EAAE;QACnB,CAAC,MAAM,IAAIf,CAAC,KAAK,IAAI,CAACH,YAAY,CAACI,MAAM,GAAG,CAAC,EAAE;UAC7Cc,GAAG,GAAG,IAAIA,GAAG,EAAE;QACjB;MACF;MACAD,EAAE,GAAGC,GAAG,GAAGD,EAAE;IACf;IACA,IAAIA,EAAE,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACxBF,EAAE,GAAGA,EAAE,CAACG,KAAK,CAAC,CAAC,CAAC;IAClB;IAEA,OAAO,UAAUH,EAAE,EAAE;EACvB;EAEA,OAAOI,IAAIA,CAACC,IAAI,EAAE;IAChB,IAAIA,IAAI,CAACd,IAAI,KAAK,sBAAsB,EAAE;MACxC,MAAM,IAAIe,SAAS,CAAC,mCAAmC,CAAC;IAC1D;IACA,OAAO,IAAI7B,oBAAoB,CAAC,IAAI,EAAE4B,IAAI,CAAC;EAC7C;AACF;AAEA,SAASrB,OAAOA,CAACuB,EAAE,EAAE5B,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAE;EACjC,MAAM2B,CAAC,GAAG7B,CAAC,CAACQ,MAAM;EAClB,IAAIL,MAAM;EACV,IAAI2B,KAAK,CAACC,OAAO,CAAC7B,MAAM,CAAC,EAAE;IACzBC,MAAM,GAAGD,MAAM;IACfA,MAAM,GAAGC,MAAM,CAACK,MAAM;EACxB,CAAC,MAAM;IACLN,MAAM,EAAE;IACRC,MAAM,GAAG,IAAI2B,KAAK,CAAC5B,MAAM,CAAC;IAC1B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC/BJ,MAAM,CAACI,CAAC,CAAC,GAAGA,CAAC;IACf;EACF;EACA,MAAMyB,CAAC,GAAG,IAAIxC,MAAM,CAACqC,CAAC,EAAE3B,MAAM,CAAC;EAC/B,MAAM+B,CAAC,GAAG,IAAIzC,MAAM,CAAC,CAACS,CAAC,CAAC,CAAC;EACzB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;IAC/B,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;MAC1B,IAAI/B,MAAM,CAACI,CAAC,CAAC,KAAK,CAAC,EAAE;QACnByB,CAAC,CAACG,GAAG,CAACD,CAAC,EAAE3B,CAAC,EAAE,CAAC,CAAC;MAChB,CAAC,MAAM;QACLyB,CAAC,CAACG,GAAG,CAACD,CAAC,EAAE3B,CAAC,EAAEE,IAAI,CAACC,GAAG,CAACV,CAAC,CAACkC,CAAC,CAAC,EAAE/B,MAAM,CAACI,CAAC,CAAC,CAAC,CAAC;MACxC;IACF;EACF;EAEA,MAAM6B,EAAE,GAAG,IAAI3C,mBAAmB,CAACuC,CAAC,CAAC;EACrC,MAAMK,CAAC,GAAGD,EAAE,CAACE,IAAI,CAACN,CAAC,CAAC;EACpB,MAAMO,CAAC,GAAGH,EAAE,CAACE,IAAI,CAAC,IAAI7C,mBAAmB,CAACwC,CAAC,CAAC,CAAC;EAE7CL,EAAE,CAAC1B,MAAM,GAAGA,MAAM,GAAG,CAAC;EACtB0B,EAAE,CAACzB,MAAM,GAAGA,MAAM;EAClByB,EAAE,CAACxB,YAAY,GAAGV,KAAK,CAAC2C,CAAC,EAAEE,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}