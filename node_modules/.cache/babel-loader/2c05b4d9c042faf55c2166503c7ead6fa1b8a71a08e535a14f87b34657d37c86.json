{"ast":null,"code":"export function checkRow(image, row) {\n  if (row < 0 || row >= image.height) {\n    throw new RangeError(`row must be included between 0 and ${image.height - 1}. Current value: ${row}`);\n  }\n}\nexport function checkColumn(image, column) {\n  if (column < 0 || column >= image.width) {\n    throw new RangeError(`column must be included between 0 and ${image.width - 1}. Current value: ${column}`);\n  }\n}\nexport function checkChannel(image, channel) {\n  if (channel < 0 || channel >= image.channels) {\n    throw new RangeError(`channel must be included between 0 and ${image.channels - 1}. Current value: ${channel}`);\n  }\n}\n\n/**\n * @typedef {('nearestNeighbor'|'bilinear')} InterpolationAlgorithm\n */\nexport const validInterpolations = {\n  nearestneighbor: 'nearestNeighbor',\n  nearestneighbour: 'nearestNeighbor',\n  bilinear: 'bilinear'\n};\nexport function checkInterpolation(interpolation) {\n  if (typeof interpolation !== 'string') {\n    throw new TypeError('interpolation must be a string');\n  }\n  interpolation = interpolation.toLowerCase();\n  if (!validInterpolations[interpolation]) {\n    throw new RangeError(`invalid interpolation algorithm: ${interpolation}`);\n  }\n  return validInterpolations[interpolation];\n}","map":{"version":3,"names":["checkRow","image","row","height","RangeError","checkColumn","column","width","checkChannel","channel","channels","validInterpolations","nearestneighbor","nearestneighbour","bilinear","checkInterpolation","interpolation","TypeError","toLowerCase"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/internal/checks.js"],"sourcesContent":["export function checkRow(image, row) {\n  if (row < 0 || row >= image.height) {\n    throw new RangeError(\n      `row must be included between 0 and ${\n        image.height - 1\n      }. Current value: ${row}`,\n    );\n  }\n}\n\nexport function checkColumn(image, column) {\n  if (column < 0 || column >= image.width) {\n    throw new RangeError(\n      `column must be included between 0 and ${\n        image.width - 1\n      }. Current value: ${column}`,\n    );\n  }\n}\n\nexport function checkChannel(image, channel) {\n  if (channel < 0 || channel >= image.channels) {\n    throw new RangeError(\n      `channel must be included between 0 and ${\n        image.channels - 1\n      }. Current value: ${channel}`,\n    );\n  }\n}\n\n/**\n * @typedef {('nearestNeighbor'|'bilinear')} InterpolationAlgorithm\n */\nexport const validInterpolations = {\n  nearestneighbor: 'nearestNeighbor',\n  nearestneighbour: 'nearestNeighbor',\n  bilinear: 'bilinear',\n};\n\nexport function checkInterpolation(interpolation) {\n  if (typeof interpolation !== 'string') {\n    throw new TypeError('interpolation must be a string');\n  }\n  interpolation = interpolation.toLowerCase();\n  if (!validInterpolations[interpolation]) {\n    throw new RangeError(`invalid interpolation algorithm: ${interpolation}`);\n  }\n  return validInterpolations[interpolation];\n}\n"],"mappings":"AAAA,OAAO,SAASA,QAAQA,CAACC,KAAK,EAAEC,GAAG,EAAE;EACnC,IAAIA,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAID,KAAK,CAACE,MAAM,EAAE;IAClC,MAAM,IAAIC,UAAU,CAClB,sCACEH,KAAK,CAACE,MAAM,GAAG,CAAC,oBACED,GAAG,EACzB,CAAC;EACH;AACF;AAEA,OAAO,SAASG,WAAWA,CAACJ,KAAK,EAAEK,MAAM,EAAE;EACzC,IAAIA,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAIL,KAAK,CAACM,KAAK,EAAE;IACvC,MAAM,IAAIH,UAAU,CAClB,yCACEH,KAAK,CAACM,KAAK,GAAG,CAAC,oBACGD,MAAM,EAC5B,CAAC;EACH;AACF;AAEA,OAAO,SAASE,YAAYA,CAACP,KAAK,EAAEQ,OAAO,EAAE;EAC3C,IAAIA,OAAO,GAAG,CAAC,IAAIA,OAAO,IAAIR,KAAK,CAACS,QAAQ,EAAE;IAC5C,MAAM,IAAIN,UAAU,CAClB,0CACEH,KAAK,CAACS,QAAQ,GAAG,CAAC,oBACAD,OAAO,EAC7B,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAME,mBAAmB,GAAG;EACjCC,eAAe,EAAE,iBAAiB;EAClCC,gBAAgB,EAAE,iBAAiB;EACnCC,QAAQ,EAAE;AACZ,CAAC;AAED,OAAO,SAASC,kBAAkBA,CAACC,aAAa,EAAE;EAChD,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACrC,MAAM,IAAIC,SAAS,CAAC,gCAAgC,CAAC;EACvD;EACAD,aAAa,GAAGA,aAAa,CAACE,WAAW,CAAC,CAAC;EAC3C,IAAI,CAACP,mBAAmB,CAACK,aAAa,CAAC,EAAE;IACvC,MAAM,IAAIZ,UAAU,CAAC,oCAAoCY,aAAa,EAAE,CAAC;EAC3E;EACA,OAAOL,mBAAmB,CAACK,aAAa,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}