{"ast":null,"code":"import newArray from 'new-array';\n\n/**\n * Returns an array with the sum of the values of each channel\n * @memberof Image\n * @instance\n * @return {number[]} Array having has size the number of channels\n */\nexport default function sum() {\n  this.checkProcessable('sum', {\n    bitDepth: [8, 16]\n  });\n  let result = newArray(this.channels, 0);\n  for (let i = 0; i < this.data.length; i += this.channels) {\n    for (let c = 0; c < this.channels; c++) {\n      result[c] += this.data[i + c];\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["newArray","sum","checkProcessable","bitDepth","result","channels","i","data","length","c"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/compute/sum.js"],"sourcesContent":["import newArray from 'new-array';\n\n/**\n * Returns an array with the sum of the values of each channel\n * @memberof Image\n * @instance\n * @return {number[]} Array having has size the number of channels\n */\nexport default function sum() {\n  this.checkProcessable('sum', {\n    bitDepth: [8, 16],\n  });\n\n  let result = newArray(this.channels, 0);\n\n  for (let i = 0; i < this.data.length; i += this.channels) {\n    for (let c = 0; c < this.channels; c++) {\n      result[c] += this.data[i + c];\n    }\n  }\n  return result;\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAI,CAACC,gBAAgB,CAAC,KAAK,EAAE;IAC3BC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;EAClB,CAAC,CAAC;EAEF,IAAIC,MAAM,GAAGJ,QAAQ,CAAC,IAAI,CAACK,QAAQ,EAAE,CAAC,CAAC;EAEvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,IAAI,CAACC,MAAM,EAAEF,CAAC,IAAI,IAAI,CAACD,QAAQ,EAAE;IACxD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;MACtCL,MAAM,CAACK,CAAC,CAAC,IAAI,IAAI,CAACF,IAAI,CAACD,CAAC,GAAGG,CAAC,CAAC;IAC/B;EACF;EACA,OAAOL,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}