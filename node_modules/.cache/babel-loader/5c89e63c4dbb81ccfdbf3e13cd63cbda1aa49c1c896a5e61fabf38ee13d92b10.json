{"ast":null,"code":"// Section 14: Differencing Predictor (p. 64)\nexport function applyHorizontalDifferencing8Bit(data, width, components) {\n  let i = 0;\n  while (i < data.length) {\n    for (let j = components; j < width * components; j += components) {\n      for (let k = 0; k < components; k++) {\n        data[i + j + k] = data[i + j + k] + data[i + j - (components - k)] & 255;\n      }\n    }\n    i += width * components;\n  }\n}\nexport function applyHorizontalDifferencing16Bit(data, width, components) {\n  let i = 0;\n  while (i < data.length) {\n    for (let j = components; j < width * components; j += components) {\n      for (let k = 0; k < components; k++) {\n        data[i + j + k] = data[i + j + k] + data[i + j - (components - k)] & 65535;\n      }\n    }\n    i += width * components;\n  }\n}","map":{"version":3,"names":["applyHorizontalDifferencing8Bit","data","width","components","i","length","j","k","applyHorizontalDifferencing16Bit"],"sources":["C:\\Users\\Admin\\Documents\\Workspace\\opencv\\opencv\\node_modules\\tiff\\src\\horizontalDifferencing.ts"],"sourcesContent":["// Section 14: Differencing Predictor (p. 64)\n\nexport function applyHorizontalDifferencing8Bit(\n  data: Uint8Array,\n  width: number,\n  components: number,\n): void {\n  let i = 0;\n  while (i < data.length) {\n    for (let j = components; j < width * components; j += components) {\n      for (let k = 0; k < components; k++) {\n        data[i + j + k] =\n          (data[i + j + k] + data[i + j - (components - k)]) & 255;\n      }\n    }\n    i += width * components;\n  }\n}\n\nexport function applyHorizontalDifferencing16Bit(\n  data: Uint16Array,\n  width: number,\n  components: number,\n): void {\n  let i = 0;\n  while (i < data.length) {\n    for (let j = components; j < width * components; j += components) {\n      for (let k = 0; k < components; k++) {\n        data[i + j + k] =\n          (data[i + j + k] + data[i + j - (components - k)]) & 65535;\n      }\n    }\n    i += width * components;\n  }\n}\n"],"mappings":"AAAA;AAEA,OAAM,SAAUA,+BAA+BA,CAC7CC,IAAgB,EAChBC,KAAa,EACbC,UAAkB;EAElB,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAE;IACtB,KAAK,IAAIC,CAAC,GAAGH,UAAU,EAAEG,CAAC,GAAGJ,KAAK,GAAGC,UAAU,EAAEG,CAAC,IAAIH,UAAU,EAAE;MAChE,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;QACnCN,IAAI,CAACG,CAAC,GAAGE,CAAC,GAAGC,CAAC,CAAC,GACZN,IAAI,CAACG,CAAC,GAAGE,CAAC,GAAGC,CAAC,CAAC,GAAGN,IAAI,CAACG,CAAC,GAAGE,CAAC,IAAIH,UAAU,GAAGI,CAAC,CAAC,CAAC,GAAI,GAAG;;;IAG9DH,CAAC,IAAIF,KAAK,GAAGC,UAAU;;AAE3B;AAEA,OAAM,SAAUK,gCAAgCA,CAC9CP,IAAiB,EACjBC,KAAa,EACbC,UAAkB;EAElB,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAE;IACtB,KAAK,IAAIC,CAAC,GAAGH,UAAU,EAAEG,CAAC,GAAGJ,KAAK,GAAGC,UAAU,EAAEG,CAAC,IAAIH,UAAU,EAAE;MAChE,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;QACnCN,IAAI,CAACG,CAAC,GAAGE,CAAC,GAAGC,CAAC,CAAC,GACZN,IAAI,CAACG,CAAC,GAAGE,CAAC,GAAGC,CAAC,CAAC,GAAGN,IAAI,CAACG,CAAC,GAAGE,CAAC,IAAIH,UAAU,GAAGI,CAAC,CAAC,CAAC,GAAI,KAAK;;;IAGhEH,CAAC,IAAIF,KAAK,GAAGC,UAAU;;AAE3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}