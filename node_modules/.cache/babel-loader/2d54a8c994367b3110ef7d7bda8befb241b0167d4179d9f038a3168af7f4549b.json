{"ast":null,"code":"import array from 'new-array';\nimport Image from '../Image';\nimport copy from '../internal/copy';\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.size=0]\n * @param {string} [options.algorithm='copy']\n * @param {array<number>} [options.color]\n * @return {Image}\n */\nexport default function pad(options = {}) {\n  let {\n    size = 0,\n    algorithm = 'copy',\n    color\n  } = options;\n  this.checkProcessable('pad', {\n    bitDepth: [8, 16]\n  });\n  if (algorithm === 'set') {\n    if (color.length !== this.channels) {\n      throw new Error(`pad: the color array must have the same length as the number of channels. Here: ${this.channels}`);\n    }\n    for (let i = 0; i < color.length; i++) {\n      if (color[i] === 0) {\n        color[i] = 0.001;\n      }\n    }\n  } else {\n    color = array(this.channels, null);\n  }\n  if (!Array.isArray(size)) {\n    size = [size, size];\n  }\n  let newWidth = this.width + size[0] * 2;\n  let newHeight = this.height + size[1] * 2;\n  let channels = this.channels;\n  let newImage = Image.createFrom(this, {\n    width: newWidth,\n    height: newHeight\n  });\n  copy(this, newImage, size[0], size[1]);\n  for (let i = size[0]; i < newWidth - size[0]; i++) {\n    for (let k = 0; k < channels; k++) {\n      let value = color[k] || newImage.data[(size[1] * newWidth + i) * channels + k];\n      for (let j = 0; j < size[1]; j++) {\n        newImage.data[(j * newWidth + i) * channels + k] = value;\n      }\n      value = color[k] || newImage.data[((newHeight - size[1] - 1) * newWidth + i) * channels + k];\n      for (let j = newHeight - size[1]; j < newHeight; j++) {\n        newImage.data[(j * newWidth + i) * channels + k] = value;\n      }\n    }\n  }\n  for (let j = 0; j < newHeight; j++) {\n    for (let k = 0; k < channels; k++) {\n      let value = color[k] || newImage.data[(j * newWidth + size[0]) * channels + k];\n      for (let i = 0; i < size[0]; i++) {\n        newImage.data[(j * newWidth + i) * channels + k] = value;\n      }\n      value = color[k] || newImage.data[(j * newWidth + newWidth - size[0] - 1) * channels + k];\n      for (let i = newWidth - size[0]; i < newWidth; i++) {\n        newImage.data[(j * newWidth + i) * channels + k] = value;\n      }\n    }\n  }\n  return newImage;\n}","map":{"version":3,"names":["array","Image","copy","pad","options","size","algorithm","color","checkProcessable","bitDepth","length","channels","Error","i","Array","isArray","newWidth","width","newHeight","height","newImage","createFrom","k","value","data","j"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/pad.js"],"sourcesContent":["import array from 'new-array';\n\nimport Image from '../Image';\nimport copy from '../internal/copy';\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.size=0]\n * @param {string} [options.algorithm='copy']\n * @param {array<number>} [options.color]\n * @return {Image}\n */\nexport default function pad(options = {}) {\n  let { size = 0, algorithm = 'copy', color } = options;\n\n  this.checkProcessable('pad', {\n    bitDepth: [8, 16],\n  });\n\n  if (algorithm === 'set') {\n    if (color.length !== this.channels) {\n      throw new Error(\n        `pad: the color array must have the same length as the number of channels. Here: ${this.channels}`,\n      );\n    }\n    for (let i = 0; i < color.length; i++) {\n      if (color[i] === 0) {\n        color[i] = 0.001;\n      }\n    }\n  } else {\n    color = array(this.channels, null);\n  }\n\n  if (!Array.isArray(size)) {\n    size = [size, size];\n  }\n\n  let newWidth = this.width + size[0] * 2;\n  let newHeight = this.height + size[1] * 2;\n  let channels = this.channels;\n\n  let newImage = Image.createFrom(this, { width: newWidth, height: newHeight });\n\n  copy(this, newImage, size[0], size[1]);\n\n  for (let i = size[0]; i < newWidth - size[0]; i++) {\n    for (let k = 0; k < channels; k++) {\n      let value =\n        color[k] || newImage.data[(size[1] * newWidth + i) * channels + k];\n      for (let j = 0; j < size[1]; j++) {\n        newImage.data[(j * newWidth + i) * channels + k] = value;\n      }\n      value =\n        color[k] ||\n        newImage.data[\n          ((newHeight - size[1] - 1) * newWidth + i) * channels + k\n        ];\n      for (let j = newHeight - size[1]; j < newHeight; j++) {\n        newImage.data[(j * newWidth + i) * channels + k] = value;\n      }\n    }\n  }\n\n  for (let j = 0; j < newHeight; j++) {\n    for (let k = 0; k < channels; k++) {\n      let value =\n        color[k] || newImage.data[(j * newWidth + size[0]) * channels + k];\n      for (let i = 0; i < size[0]; i++) {\n        newImage.data[(j * newWidth + i) * channels + k] = value;\n      }\n      value =\n        color[k] ||\n        newImage.data[(j * newWidth + newWidth - size[0] - 1) * channels + k];\n      for (let i = newWidth - size[0]; i < newWidth; i++) {\n        newImage.data[(j * newWidth + i) * channels + k] = value;\n      }\n    }\n  }\n\n  return newImage;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}