{"ast":null,"code":"import { isAnyArray } from 'is-any-array';\nimport { checkArrayLength } from './checkArrayLength';\nexport class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (isAnyArray(x)) {\n      const y = [];\n      for (const xVal of x) {\n        y.push(this._predict(xVal));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _predict(x) {\n    throw new Error('_predict must be implemented');\n  }\n  train() {\n    // Do nothing for this package\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  toString(precision) {\n    return '';\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  toLaTeX(precision) {\n    return '';\n  }\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param x - explanatory variable\n   * @param y - response variable\n   * @return - Object with further statistics.\n   */\n  score(x, y) {\n    checkArrayLength(x, y);\n    const n = x.length;\n    const y2 = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += (y[i] - y2[i]) * (y[i] - y2[i]) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n    const r = (n * xY - xSum * ySum) / Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n    return {\n      r,\n      r2: r * r,\n      chi2,\n      rmsd: Math.sqrt(rmsd / n)\n    };\n  }\n}","map":{"version":3,"names":["isAnyArray","checkArrayLength","BaseRegression","constructor","new","target","Error","predict","x","_predict","y","xVal","push","TypeError","train","toString","precision","toLaTeX","score","n","length","y2","Array","i","xSum","ySum","chi2","rmsd","xSquared","ySquared","xY","r","Math","sqrt","r2"],"sources":["C:\\Users\\Admin\\Documents\\Workspace\\opencv\\opencv\\node_modules\\ml-regression-exponential\\node_modules\\ml-regression-simple-linear\\node_modules\\ml-regression-base\\src\\BaseRegression.ts"],"sourcesContent":["import { type NumberArray } from 'cheminfo-types';\nimport { isAnyArray } from 'is-any-array';\n\nimport { checkArrayLength } from './checkArrayLength';\n\nexport interface RegressionScore {\n  r: number;\n  r2: number;\n  chi2: number;\n  rmsd: number;\n}\nexport class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x: number): number;\n  predict(x: NumberArray): number[];\n  predict(x: number | NumberArray) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (isAnyArray(x)) {\n      const y = [];\n      for (const xVal of x) {\n        y.push(this._predict(xVal));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _predict(x: number): number {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {\n    // Do nothing for this package\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  toString(precision?: number) {\n    return '';\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  toLaTeX(precision?: number) {\n    return '';\n  }\n\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param x - explanatory variable\n   * @param y - response variable\n   * @return - Object with further statistics.\n   */\n  score(x: NumberArray, y: NumberArray): RegressionScore {\n    checkArrayLength(x, y);\n\n    const n = x.length;\n    const y2: number[] = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r =\n      (n * xY - xSum * ySum) /\n      Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n    return {\n      r,\n      r2: r * r,\n      chi2,\n      rmsd: Math.sqrt(rmsd / n),\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}