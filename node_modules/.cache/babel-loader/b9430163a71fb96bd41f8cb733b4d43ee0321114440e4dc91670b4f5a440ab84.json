{"ast":null,"code":"/**\n * Returns the median of an histogram\n * @param {number[]} histogram\n * @return {number}\n * @private\n */\nexport function median(histogram) {\n  let total = histogram.reduce((sum, x) => sum + x);\n  if (total === 0) {\n    throw new Error('unreachable');\n  }\n  let position = 0;\n  let currentTotal = 0;\n  let middle = total / 2;\n  let previous;\n  while (true) {\n    if (histogram[position] > 0) {\n      if (previous !== undefined) {\n        return (previous + position) / 2;\n      }\n      currentTotal += histogram[position];\n      if (currentTotal > middle) {\n        return position;\n      } else if (currentTotal === middle) {\n        previous = position;\n      }\n    }\n    position++;\n  }\n}\n\n/**\n * Retuns the mean of an histogram\n * @param {number[]} histogram\n * @return {number}\n * @private\n */\nexport function mean(histogram) {\n  let total = 0;\n  let sum = 0;\n  for (let i = 0; i < histogram.length; i++) {\n    total += histogram[i];\n    sum += histogram[i] * i;\n  }\n  if (total === 0) {\n    return 0;\n  }\n  return sum / total;\n}","map":{"version":3,"names":["median","histogram","total","reduce","sum","x","Error","position","currentTotal","middle","previous","undefined","mean","i","length"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/util/histogram.js"],"sourcesContent":["/**\n * Returns the median of an histogram\n * @param {number[]} histogram\n * @return {number}\n * @private\n */\nexport function median(histogram) {\n  let total = histogram.reduce((sum, x) => sum + x);\n\n  if (total === 0) {\n    throw new Error('unreachable');\n  }\n\n  let position = 0;\n  let currentTotal = 0;\n  let middle = total / 2;\n  let previous;\n\n  while (true) {\n    if (histogram[position] > 0) {\n      if (previous !== undefined) {\n        return (previous + position) / 2;\n      }\n      currentTotal += histogram[position];\n      if (currentTotal > middle) {\n        return position;\n      } else if (currentTotal === middle) {\n        previous = position;\n      }\n    }\n    position++;\n  }\n}\n\n/**\n * Retuns the mean of an histogram\n * @param {number[]} histogram\n * @return {number}\n * @private\n */\nexport function mean(histogram) {\n  let total = 0;\n  let sum = 0;\n\n  for (let i = 0; i < histogram.length; i++) {\n    total += histogram[i];\n    sum += histogram[i] * i;\n  }\n\n  if (total === 0) {\n    return 0;\n  }\n\n  return sum / total;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAMA,CAACC,SAAS,EAAE;EAChC,IAAIC,KAAK,GAAGD,SAAS,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,CAAC;EAEjD,IAAIH,KAAK,KAAK,CAAC,EAAE;IACf,MAAM,IAAII,KAAK,CAAC,aAAa,CAAC;EAChC;EAEA,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,MAAM,GAAGP,KAAK,GAAG,CAAC;EACtB,IAAIQ,QAAQ;EAEZ,OAAO,IAAI,EAAE;IACX,IAAIT,SAAS,CAACM,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3B,IAAIG,QAAQ,KAAKC,SAAS,EAAE;QAC1B,OAAO,CAACD,QAAQ,GAAGH,QAAQ,IAAI,CAAC;MAClC;MACAC,YAAY,IAAIP,SAAS,CAACM,QAAQ,CAAC;MACnC,IAAIC,YAAY,GAAGC,MAAM,EAAE;QACzB,OAAOF,QAAQ;MACjB,CAAC,MAAM,IAAIC,YAAY,KAAKC,MAAM,EAAE;QAClCC,QAAQ,GAAGH,QAAQ;MACrB;IACF;IACAA,QAAQ,EAAE;EACZ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,IAAIA,CAACX,SAAS,EAAE;EAC9B,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIE,GAAG,GAAG,CAAC;EAEX,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,SAAS,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;IACzCX,KAAK,IAAID,SAAS,CAACY,CAAC,CAAC;IACrBT,GAAG,IAAIH,SAAS,CAACY,CAAC,CAAC,GAAGA,CAAC;EACzB;EAEA,IAAIX,KAAK,KAAK,CAAC,EAAE;IACf,OAAO,CAAC;EACV;EAEA,OAAOE,GAAG,GAAGF,KAAK;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}