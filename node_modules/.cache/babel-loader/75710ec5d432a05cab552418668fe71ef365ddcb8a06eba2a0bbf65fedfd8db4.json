{"ast":null,"code":"import { validateArrayOfChannels } from '../../util/channel';\nimport { checkNumberArray } from '../../util/value';\n\n/**\n * @memberof Image\n * @instance\n * @param {*} value\n * @param {object} [options]\n * @return {this}\n */\nexport default function divide(value, options = {}) {\n  let {\n    channels\n  } = options;\n  this.checkProcessable('divide', {\n    bitDepth: [8, 16]\n  });\n  channels = validateArrayOfChannels(this, {\n    channels: channels\n  });\n  value = checkNumberArray(value);\n  if (!isNaN(value)) {\n    for (let j = 0; j < channels.length; j++) {\n      let c = channels[j];\n      for (let i = 0; i < this.data.length; i += this.channels) {\n        this.data[i + c] = Math.min(this.maxValue, this.data[i + c] / value >> 0);\n      }\n    }\n  } else {\n    if (this.data.length !== value.length) {\n      throw new Error('divide: the: the data size is different');\n    }\n    for (let j = 0; j < channels.length; j++) {\n      let c = channels[j];\n      for (let i = 0; i < this.data.length; i += this.channels) {\n        this.data[i + c] = Math.max(0, Math.min(this.maxValue, this.data[i + c] / value[i + c] >> 0));\n      }\n    }\n  }\n  return this;\n}","map":{"version":3,"names":["validateArrayOfChannels","checkNumberArray","divide","value","options","channels","checkProcessable","bitDepth","isNaN","j","length","c","i","data","Math","min","maxValue","Error","max"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/filter/divide.js"],"sourcesContent":["import { validateArrayOfChannels } from '../../util/channel';\nimport { checkNumberArray } from '../../util/value';\n\n/**\n * @memberof Image\n * @instance\n * @param {*} value\n * @param {object} [options]\n * @return {this}\n */\nexport default function divide(value, options = {}) {\n  let { channels } = options;\n  this.checkProcessable('divide', {\n    bitDepth: [8, 16],\n  });\n\n  channels = validateArrayOfChannels(this, { channels: channels });\n  value = checkNumberArray(value);\n\n  if (!isNaN(value)) {\n    for (let j = 0; j < channels.length; j++) {\n      let c = channels[j];\n      for (let i = 0; i < this.data.length; i += this.channels) {\n        this.data[i + c] = Math.min(\n          this.maxValue,\n          (this.data[i + c] / value) >> 0,\n        );\n      }\n    }\n  } else {\n    if (this.data.length !== value.length) {\n      throw new Error('divide: the: the data size is different');\n    }\n    for (let j = 0; j < channels.length; j++) {\n      let c = channels[j];\n      for (let i = 0; i < this.data.length; i += this.channels) {\n        this.data[i + c] = Math.max(\n          0,\n          Math.min(this.maxValue, (this.data[i + c] / value[i + c]) >> 0),\n        );\n      }\n    }\n  }\n\n  return this;\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,oBAAoB;AAC5D,SAASC,gBAAgB,QAAQ,kBAAkB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,MAAMA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAClD,IAAI;IAAEC;EAAS,CAAC,GAAGD,OAAO;EAC1B,IAAI,CAACE,gBAAgB,CAAC,QAAQ,EAAE;IAC9BC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;EAClB,CAAC,CAAC;EAEFF,QAAQ,GAAGL,uBAAuB,CAAC,IAAI,EAAE;IAAEK,QAAQ,EAAEA;EAAS,CAAC,CAAC;EAChEF,KAAK,GAAGF,gBAAgB,CAACE,KAAK,CAAC;EAE/B,IAAI,CAACK,KAAK,CAACL,KAAK,CAAC,EAAE;IACjB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAIE,CAAC,GAAGN,QAAQ,CAACI,CAAC,CAAC;MACnB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,IAAI,CAACH,MAAM,EAAEE,CAAC,IAAI,IAAI,CAACP,QAAQ,EAAE;QACxD,IAAI,CAACQ,IAAI,CAACD,CAAC,GAAGD,CAAC,CAAC,GAAGG,IAAI,CAACC,GAAG,CACzB,IAAI,CAACC,QAAQ,EACZ,IAAI,CAACH,IAAI,CAACD,CAAC,GAAGD,CAAC,CAAC,GAAGR,KAAK,IAAK,CAChC,CAAC;MACH;IACF;EACF,CAAC,MAAM;IACL,IAAI,IAAI,CAACU,IAAI,CAACH,MAAM,KAAKP,KAAK,CAACO,MAAM,EAAE;MACrC,MAAM,IAAIO,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IACA,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAIE,CAAC,GAAGN,QAAQ,CAACI,CAAC,CAAC;MACnB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,IAAI,CAACH,MAAM,EAAEE,CAAC,IAAI,IAAI,CAACP,QAAQ,EAAE;QACxD,IAAI,CAACQ,IAAI,CAACD,CAAC,GAAGD,CAAC,CAAC,GAAGG,IAAI,CAACI,GAAG,CACzB,CAAC,EACDJ,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,QAAQ,EAAG,IAAI,CAACH,IAAI,CAACD,CAAC,GAAGD,CAAC,CAAC,GAAGR,KAAK,CAACS,CAAC,GAAGD,CAAC,CAAC,IAAK,CAAC,CAChE,CAAC;MACH;IACF;EACF;EAEA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}