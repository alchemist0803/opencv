{"ast":null,"code":"const valueMethods = {\n  /**\n   * Get the value of specific pixel channel\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @param {number} channel\n   * @return {number} - the value of this pixel channel\n   */\n  getValueXY(x, y, channel) {\n    return this.data[(y * this.width + x) * this.channels + channel];\n  },\n  /**\n   * Set the value of specific pixel channel\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @param {number} channel\n   * @param {number} value - the new value of this pixel channel\n   * @return {this}\n   */\n  setValueXY(x, y, channel, value) {\n    this.data[(y * this.width + x) * this.channels + channel] = value;\n    this.computed = null;\n    return this;\n  },\n  /**\n   * Get the value of specific pixel channel\n   * @memberof Image\n   * @instance\n   * @param {number} index - 1D index of the pixel\n   * @param {number} channel\n   * @return {number} - the value of this pixel channel\n   */\n  getValue(index, channel) {\n    return this.data[index * this.channels + channel];\n  },\n  /**\n   * Set the value of specific pixel channel\n   * @memberof Image\n   * @instance\n   * @param {number} index - 1D index of the pixel\n   * @param {number} channel\n   * @param {number} value - the new value of this pixel channel\n   * @return {this}\n   */\n  setValue(index, channel, value) {\n    this.data[index * this.channels + channel] = value;\n    this.computed = null;\n    return this;\n  },\n  /**\n   * Get the value of an entire pixel\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @return {number[]} the value of this pixel\n   */\n  getPixelXY(x, y) {\n    return this.getPixel(y * this.width + x);\n  },\n  /**\n   * Set the value of an entire pixel\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @param {number[]} value - the new value of this pixel\n   * @return {this}\n   */\n  setPixelXY(x, y, value) {\n    return this.setPixel(y * this.width + x, value);\n  },\n  /**\n   * Get the value of an entire pixel\n   * @memberof Image\n   * @instance\n   * @param {number} index - 1D index of the pixel\n   * @return {number[]} the value of this pixel\n   */\n  getPixel(index) {\n    const value = new Array(this.channels);\n    const target = index * this.channels;\n    for (let i = 0; i < this.channels; i++) {\n      value[i] = this.data[target + i];\n    }\n    return value;\n  },\n  /**\n   * Set the value of an entire pixel\n   * @memberof Image\n   * @instance\n   * @param {number} index - 1D index of the pixel\n   * @param {number[]} value - the new value of this pixel\n   * @return {this}\n   */\n  setPixel(index, value) {\n    const target = index * this.channels;\n    for (let i = 0; i < value.length; i++) {\n      this.data[target + i] = value[i];\n    }\n    this.computed = null;\n    return this;\n  }\n};\nexport default function setValueMethods(Image) {\n  for (const i in valueMethods) {\n    Image.prototype[i] = valueMethods[i];\n  }\n}","map":{"version":3,"names":["valueMethods","getValueXY","x","y","channel","data","width","channels","setValueXY","value","computed","getValue","index","setValue","getPixelXY","getPixel","setPixelXY","setPixel","Array","target","i","length","setValueMethods","Image","prototype"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/core/valueMethods.js"],"sourcesContent":["const valueMethods = {\n  /**\n   * Get the value of specific pixel channel\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @param {number} channel\n   * @return {number} - the value of this pixel channel\n   */\n  getValueXY(x, y, channel) {\n    return this.data[(y * this.width + x) * this.channels + channel];\n  },\n\n  /**\n   * Set the value of specific pixel channel\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @param {number} channel\n   * @param {number} value - the new value of this pixel channel\n   * @return {this}\n   */\n  setValueXY(x, y, channel, value) {\n    this.data[(y * this.width + x) * this.channels + channel] = value;\n    this.computed = null;\n    return this;\n  },\n\n  /**\n   * Get the value of specific pixel channel\n   * @memberof Image\n   * @instance\n   * @param {number} index - 1D index of the pixel\n   * @param {number} channel\n   * @return {number} - the value of this pixel channel\n   */\n  getValue(index, channel) {\n    return this.data[index * this.channels + channel];\n  },\n\n  /**\n   * Set the value of specific pixel channel\n   * @memberof Image\n   * @instance\n   * @param {number} index - 1D index of the pixel\n   * @param {number} channel\n   * @param {number} value - the new value of this pixel channel\n   * @return {this}\n   */\n  setValue(index, channel, value) {\n    this.data[index * this.channels + channel] = value;\n    this.computed = null;\n    return this;\n  },\n\n  /**\n   * Get the value of an entire pixel\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @return {number[]} the value of this pixel\n   */\n  getPixelXY(x, y) {\n    return this.getPixel(y * this.width + x);\n  },\n\n  /**\n   * Set the value of an entire pixel\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @param {number[]} value - the new value of this pixel\n   * @return {this}\n   */\n  setPixelXY(x, y, value) {\n    return this.setPixel(y * this.width + x, value);\n  },\n\n  /**\n   * Get the value of an entire pixel\n   * @memberof Image\n   * @instance\n   * @param {number} index - 1D index of the pixel\n   * @return {number[]} the value of this pixel\n   */\n  getPixel(index) {\n    const value = new Array(this.channels);\n    const target = index * this.channels;\n    for (let i = 0; i < this.channels; i++) {\n      value[i] = this.data[target + i];\n    }\n    return value;\n  },\n\n  /**\n   * Set the value of an entire pixel\n   * @memberof Image\n   * @instance\n   * @param {number} index - 1D index of the pixel\n   * @param {number[]} value - the new value of this pixel\n   * @return {this}\n   */\n  setPixel(index, value) {\n    const target = index * this.channels;\n    for (let i = 0; i < value.length; i++) {\n      this.data[target + i] = value[i];\n    }\n    this.computed = null;\n    return this;\n  },\n};\n\nexport default function setValueMethods(Image) {\n  for (const i in valueMethods) {\n    Image.prototype[i] = valueMethods[i];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}