{"ast":null,"code":"// See http://imagej.nih.gov/ij/download/tools/source/ij/process/AutoThresholder.java\n// W. Doyle, \"Operation useful for similarity-invariant pattern recognition,\"\n// Journal of the Association for Computing Machinery, vol. 9,pp. 259-267, 1962.\n// ported to ImageJ plugin by G.Landini from Antti Niemisto's Matlab code (GPL)\n// Original Matlab code Copyright (C) 2004 Antti Niemisto\n// See http://www.cs.tut.fi/~ant/histthresh/ for an excellent slide presentation\n// and the original Matlab code.\nexport default function percentile(histogram) {\n  let threshold = -1;\n  let percentile = 0.5; // default fraction of foreground pixels\n  let avec = new Array(histogram.length);\n  let total = partialSum(histogram, histogram.length - 1);\n  let temp = 1.0;\n  for (let i = 0; i < histogram.length; i++) {\n    avec[i] = Math.abs(partialSum(histogram, i) / total - percentile);\n    if (avec[i] < temp) {\n      temp = avec[i];\n      threshold = i;\n    }\n  }\n  return threshold;\n}\nfunction partialSum(histogram, endIndex) {\n  let x = 0;\n  for (let i = 0; i <= endIndex; i++) {\n    x += histogram[i];\n  }\n  return x;\n}","map":{"version":3,"names":["percentile","histogram","threshold","avec","Array","length","total","partialSum","temp","i","Math","abs","endIndex","x"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/mask/percentile.js"],"sourcesContent":["// See http://imagej.nih.gov/ij/download/tools/source/ij/process/AutoThresholder.java\n// W. Doyle, \"Operation useful for similarity-invariant pattern recognition,\"\n// Journal of the Association for Computing Machinery, vol. 9,pp. 259-267, 1962.\n// ported to ImageJ plugin by G.Landini from Antti Niemisto's Matlab code (GPL)\n// Original Matlab code Copyright (C) 2004 Antti Niemisto\n// See http://www.cs.tut.fi/~ant/histthresh/ for an excellent slide presentation\n// and the original Matlab code.\nexport default function percentile(histogram) {\n  let threshold = -1;\n  let percentile = 0.5; // default fraction of foreground pixels\n  let avec = new Array(histogram.length);\n\n  let total = partialSum(histogram, histogram.length - 1);\n  let temp = 1.0;\n\n  for (let i = 0; i < histogram.length; i++) {\n    avec[i] = Math.abs(partialSum(histogram, i) / total - percentile);\n    if (avec[i] < temp) {\n      temp = avec[i];\n      threshold = i;\n    }\n  }\n\n  return threshold;\n}\n\nfunction partialSum(histogram, endIndex) {\n  let x = 0;\n  for (let i = 0; i <= endIndex; i++) {\n    x += histogram[i];\n  }\n  return x;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,UAAUA,CAACC,SAAS,EAAE;EAC5C,IAAIC,SAAS,GAAG,CAAC,CAAC;EAClB,IAAIF,UAAU,GAAG,GAAG,CAAC,CAAC;EACtB,IAAIG,IAAI,GAAG,IAAIC,KAAK,CAACH,SAAS,CAACI,MAAM,CAAC;EAEtC,IAAIC,KAAK,GAAGC,UAAU,CAACN,SAAS,EAAEA,SAAS,CAACI,MAAM,GAAG,CAAC,CAAC;EACvD,IAAIG,IAAI,GAAG,GAAG;EAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,SAAS,CAACI,MAAM,EAAEI,CAAC,EAAE,EAAE;IACzCN,IAAI,CAACM,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACJ,UAAU,CAACN,SAAS,EAAEQ,CAAC,CAAC,GAAGH,KAAK,GAAGN,UAAU,CAAC;IACjE,IAAIG,IAAI,CAACM,CAAC,CAAC,GAAGD,IAAI,EAAE;MAClBA,IAAI,GAAGL,IAAI,CAACM,CAAC,CAAC;MACdP,SAAS,GAAGO,CAAC;IACf;EACF;EAEA,OAAOP,SAAS;AAClB;AAEA,SAASK,UAAUA,CAACN,SAAS,EAAEW,QAAQ,EAAE;EACvC,IAAIC,CAAC,GAAG,CAAC;EACT,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIG,QAAQ,EAAEH,CAAC,EAAE,EAAE;IAClCI,CAAC,IAAIZ,SAAS,CAACQ,CAAC,CAAC;EACnB;EACA,OAAOI,CAAC;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}