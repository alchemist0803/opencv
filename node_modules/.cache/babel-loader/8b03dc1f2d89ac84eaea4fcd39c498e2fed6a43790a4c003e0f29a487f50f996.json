{"ast":null,"code":"/**\n * This function is the black top hat (also called black hat).\n * In mathematical morphology and digital image processing,\n * top-hat transform is an operation that extracts small elements and details from given images.\n * The black top-hat transform is defined dually as the difference between the closed and the input image.\n * Top-hat transforms are used for various image processing tasks, such as feature extraction, background equalization,\n * image enhancement, and others. (Wikipedia)\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function blackHat(options = {}) {\n  let {\n    kernel = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],\n    iterations = 1\n  } = options;\n  this.checkProcessable('blackHat', {\n    bitDepth: [8, 16],\n    components: 1,\n    alpha: 0\n  });\n  if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {\n    throw new TypeError('blackHat: The number of rows and columns of the kernel must be odd');\n  }\n  let newImage = this;\n  for (let i = 0; i < iterations; i++) {\n    const closeImage = newImage.close({\n      kernel\n    });\n    newImage = closeImage.subtractImage(newImage, {\n      absolute: true\n    });\n  }\n  return newImage;\n}","map":{"version":3,"names":["blackHat","options","kernel","iterations","checkProcessable","bitDepth","components","alpha","columns","rows","TypeError","newImage","i","closeImage","close","subtractImage","absolute"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/morphology/blackHat.js"],"sourcesContent":["/**\n * This function is the black top hat (also called black hat).\n * In mathematical morphology and digital image processing,\n * top-hat transform is an operation that extracts small elements and details from given images.\n * The black top-hat transform is defined dually as the difference between the closed and the input image.\n * Top-hat transforms are used for various image processing tasks, such as feature extraction, background equalization,\n * image enhancement, and others. (Wikipedia)\n * http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {Array<Array<number>>} [options.kernel] - The kernel can only have ones and zeros. Default: [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n * @param {number} [options.iterations=1] - Number of iterations of the morphological transform\n * @return {Image}\n */\nexport default function blackHat(options = {}) {\n  let {\n    kernel = [\n      [1, 1, 1],\n      [1, 1, 1],\n      [1, 1, 1],\n    ],\n    iterations = 1,\n  } = options;\n\n  this.checkProcessable('blackHat', {\n    bitDepth: [8, 16],\n    components: 1,\n    alpha: 0,\n  });\n  if (kernel.columns % 2 === 0 || kernel.rows % 2 === 0) {\n    throw new TypeError(\n      'blackHat: The number of rows and columns of the kernel must be odd',\n    );\n  }\n\n  let newImage = this;\n  for (let i = 0; i < iterations; i++) {\n    const closeImage = newImage.close({ kernel });\n    newImage = closeImage.subtractImage(newImage, { absolute: true });\n  }\n  return newImage;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,QAAQA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC7C,IAAI;IACFC,MAAM,GAAG,CACP,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;IACDC,UAAU,GAAG;EACf,CAAC,GAAGF,OAAO;EAEX,IAAI,CAACG,gBAAgB,CAAC,UAAU,EAAE;IAChCC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACjBC,UAAU,EAAE,CAAC;IACbC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,IAAIL,MAAM,CAACM,OAAO,GAAG,CAAC,KAAK,CAAC,IAAIN,MAAM,CAACO,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE;IACrD,MAAM,IAAIC,SAAS,CACjB,oEACF,CAAC;EACH;EAEA,IAAIC,QAAQ,GAAG,IAAI;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,UAAU,EAAES,CAAC,EAAE,EAAE;IACnC,MAAMC,UAAU,GAAGF,QAAQ,CAACG,KAAK,CAAC;MAAEZ;IAAO,CAAC,CAAC;IAC7CS,QAAQ,GAAGE,UAAU,CAACE,aAAa,CAACJ,QAAQ,EAAE;MAAEK,QAAQ,EAAE;IAAK,CAAC,CAAC;EACnE;EACA,OAAOL,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}