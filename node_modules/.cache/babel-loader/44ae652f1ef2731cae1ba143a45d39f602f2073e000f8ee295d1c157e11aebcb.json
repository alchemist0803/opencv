{"ast":null,"code":"/**\n * This method checks if a process can be applied on the current image\n * @memberof Image\n * @instance\n * @param {string} processName\n * @param {object} [options]\n */\nexport default function checkProcessable(processName, options = {}) {\n  let {\n    bitDepth,\n    alpha,\n    colorModel,\n    components,\n    channels\n  } = options;\n  if (typeof processName !== 'string' || processName.length === 0) {\n    throw new TypeError('processName must be a string');\n  }\n  if (bitDepth) {\n    if (!Array.isArray(bitDepth)) {\n      bitDepth = [bitDepth];\n    }\n    if (!bitDepth.includes(this.bitDepth)) {\n      throw new TypeError(`The process: ${processName} can only be applied if bit depth is in: ${bitDepth}`);\n    }\n  }\n  if (alpha) {\n    if (!Array.isArray(alpha)) {\n      alpha = [alpha];\n    }\n    if (!alpha.includes(this.alpha)) {\n      throw new TypeError(`The process: ${processName} can only be applied if alpha is in: ${alpha}`);\n    }\n  }\n  if (colorModel) {\n    if (!Array.isArray(colorModel)) {\n      colorModel = [colorModel];\n    }\n    if (!colorModel.includes(this.colorModel)) {\n      throw new TypeError(`The process: ${processName} can only be applied if color model is in: ${colorModel}`);\n    }\n  }\n  if (components) {\n    if (!Array.isArray(components)) {\n      components = [components];\n    }\n    if (!components.includes(this.components)) {\n      let errorMessage = `The process: ${processName} can only be applied if the number of components is in: ${components}`;\n      if (components.length === 1 && components[0] === 1) {\n        throw new TypeError(`${errorMessage}.\\rYou should transform your image using \"image.grey()\" before applying the algorithm.`);\n      } else {\n        throw new TypeError(errorMessage);\n      }\n    }\n  }\n  if (channels) {\n    if (!Array.isArray(channels)) {\n      channels = [channels];\n    }\n    if (!channels.includes(this.channels)) {\n      throw new TypeError(`The process: ${processName} can only be applied if the number of channels is in: ${channels}`);\n    }\n  }\n}","map":{"version":3,"names":["checkProcessable","processName","options","bitDepth","alpha","colorModel","components","channels","length","TypeError","Array","isArray","includes","errorMessage"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/core/checkProcessable.js"],"sourcesContent":["/**\n * This method checks if a process can be applied on the current image\n * @memberof Image\n * @instance\n * @param {string} processName\n * @param {object} [options]\n */\nexport default function checkProcessable(processName, options = {}) {\n  let { bitDepth, alpha, colorModel, components, channels } = options;\n  if (typeof processName !== 'string' || processName.length === 0) {\n    throw new TypeError('processName must be a string');\n  }\n  if (bitDepth) {\n    if (!Array.isArray(bitDepth)) {\n      bitDepth = [bitDepth];\n    }\n    if (!bitDepth.includes(this.bitDepth)) {\n      throw new TypeError(\n        `The process: ${processName} can only be applied if bit depth is in: ${bitDepth}`,\n      );\n    }\n  }\n  if (alpha) {\n    if (!Array.isArray(alpha)) {\n      alpha = [alpha];\n    }\n    if (!alpha.includes(this.alpha)) {\n      throw new TypeError(\n        `The process: ${processName} can only be applied if alpha is in: ${alpha}`,\n      );\n    }\n  }\n  if (colorModel) {\n    if (!Array.isArray(colorModel)) {\n      colorModel = [colorModel];\n    }\n    if (!colorModel.includes(this.colorModel)) {\n      throw new TypeError(\n        `The process: ${processName} can only be applied if color model is in: ${colorModel}`,\n      );\n    }\n  }\n  if (components) {\n    if (!Array.isArray(components)) {\n      components = [components];\n    }\n    if (!components.includes(this.components)) {\n      let errorMessage = `The process: ${processName} can only be applied if the number of components is in: ${components}`;\n      if (components.length === 1 && components[0] === 1) {\n        throw new TypeError(\n          `${errorMessage}.\\rYou should transform your image using \"image.grey()\" before applying the algorithm.`,\n        );\n      } else {\n        throw new TypeError(errorMessage);\n      }\n    }\n  }\n  if (channels) {\n    if (!Array.isArray(channels)) {\n      channels = [channels];\n    }\n    if (!channels.includes(this.channels)) {\n      throw new TypeError(\n        `The process: ${processName} can only be applied if the number of channels is in: ${channels}`,\n      );\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,gBAAgBA,CAACC,WAAW,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAClE,IAAI;IAAEC,QAAQ;IAAEC,KAAK;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAGL,OAAO;EACnE,IAAI,OAAOD,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAACO,MAAM,KAAK,CAAC,EAAE;IAC/D,MAAM,IAAIC,SAAS,CAAC,8BAA8B,CAAC;EACrD;EACA,IAAIN,QAAQ,EAAE;IACZ,IAAI,CAACO,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,EAAE;MAC5BA,QAAQ,GAAG,CAACA,QAAQ,CAAC;IACvB;IACA,IAAI,CAACA,QAAQ,CAACS,QAAQ,CAAC,IAAI,CAACT,QAAQ,CAAC,EAAE;MACrC,MAAM,IAAIM,SAAS,CACjB,gBAAgBR,WAAW,4CAA4CE,QAAQ,EACjF,CAAC;IACH;EACF;EACA,IAAIC,KAAK,EAAE;IACT,IAAI,CAACM,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;MACzBA,KAAK,GAAG,CAACA,KAAK,CAAC;IACjB;IACA,IAAI,CAACA,KAAK,CAACQ,QAAQ,CAAC,IAAI,CAACR,KAAK,CAAC,EAAE;MAC/B,MAAM,IAAIK,SAAS,CACjB,gBAAgBR,WAAW,wCAAwCG,KAAK,EAC1E,CAAC;IACH;EACF;EACA,IAAIC,UAAU,EAAE;IACd,IAAI,CAACK,KAAK,CAACC,OAAO,CAACN,UAAU,CAAC,EAAE;MAC9BA,UAAU,GAAG,CAACA,UAAU,CAAC;IAC3B;IACA,IAAI,CAACA,UAAU,CAACO,QAAQ,CAAC,IAAI,CAACP,UAAU,CAAC,EAAE;MACzC,MAAM,IAAII,SAAS,CACjB,gBAAgBR,WAAW,8CAA8CI,UAAU,EACrF,CAAC;IACH;EACF;EACA,IAAIC,UAAU,EAAE;IACd,IAAI,CAACI,KAAK,CAACC,OAAO,CAACL,UAAU,CAAC,EAAE;MAC9BA,UAAU,GAAG,CAACA,UAAU,CAAC;IAC3B;IACA,IAAI,CAACA,UAAU,CAACM,QAAQ,CAAC,IAAI,CAACN,UAAU,CAAC,EAAE;MACzC,IAAIO,YAAY,GAAG,gBAAgBZ,WAAW,2DAA2DK,UAAU,EAAE;MACrH,IAAIA,UAAU,CAACE,MAAM,KAAK,CAAC,IAAIF,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAClD,MAAM,IAAIG,SAAS,CACjB,GAAGI,YAAY,wFACjB,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIJ,SAAS,CAACI,YAAY,CAAC;MACnC;IACF;EACF;EACA,IAAIN,QAAQ,EAAE;IACZ,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAAC,EAAE;MAC5BA,QAAQ,GAAG,CAACA,QAAQ,CAAC;IACvB;IACA,IAAI,CAACA,QAAQ,CAACK,QAAQ,CAAC,IAAI,CAACL,QAAQ,CAAC,EAAE;MACrC,MAAM,IAAIE,SAAS,CACjB,gBAAgBR,WAAW,yDAAyDM,QAAQ,EAC9F,CAAC;IACH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}