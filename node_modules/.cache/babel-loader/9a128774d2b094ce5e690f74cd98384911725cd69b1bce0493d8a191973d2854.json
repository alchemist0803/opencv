{"ast":null,"code":"import * as ColorModel from '../model/model';\nimport * as Kind from './kindNames';\nconst kinds = {};\nkinds[Kind.BINARY] = {\n  components: 1,\n  alpha: 0,\n  bitDepth: 1,\n  colorModel: ColorModel.GREY\n};\nkinds[Kind.GREYA] = {\n  components: 1,\n  alpha: 1,\n  bitDepth: 8,\n  colorModel: ColorModel.GREY\n};\nkinds[Kind.GREY] = {\n  components: 1,\n  alpha: 0,\n  bitDepth: 8,\n  colorModel: ColorModel.GREY\n};\nkinds[Kind.RGBA] = {\n  components: 3,\n  alpha: 1,\n  bitDepth: 8,\n  colorModel: ColorModel.RGB\n};\nkinds[Kind.RGB] = {\n  components: 3,\n  alpha: 0,\n  bitDepth: 8,\n  colorModel: ColorModel.RGB\n};\nkinds[Kind.CMYK] = {\n  components: 4,\n  alpha: 0,\n  bitDepth: 8,\n  colorModel: ColorModel.CMYK\n};\nkinds[Kind.CMYKA] = {\n  components: 4,\n  alpha: 1,\n  bitDepth: 8,\n  colorModel: ColorModel.CMYK\n};\nexport function getKind(kind) {\n  const result = kinds[kind];\n  if (!result) {\n    throw new RangeError(`invalid image kind: ${kind}`);\n  }\n  return result;\n}\nconst validBitDepth = [1, 8, 16, 32];\nexport function verifyKindDefinition(definition) {\n  const {\n    components,\n    alpha,\n    bitDepth,\n    colorModel\n  } = definition;\n  if (!Number.isInteger(components) || components <= 0) {\n    throw new RangeError(`invalid components: ${components}. Must be a positive integer`);\n  }\n  if (alpha !== 0 && alpha !== 1 && typeof alpha !== 'boolean') {\n    throw new TypeError(`invalid alpha: ${alpha}: must be a boolean, 0 or 1`);\n  }\n  if (!validBitDepth.includes(bitDepth)) {\n    throw new RangeError(`invalid bitDepth: ${bitDepth}. Must be one of ${validBitDepth.join(', ')}`);\n  }\n  // eslint-disable-next-line import/namespace\n  if (!ColorModel[colorModel]) {\n    throw new RangeError(`invalid colorModel: ${colorModel}. Must be one of ${Object.keys(ColorModel).join(', ')}`);\n  }\n}\nexport function getTheoreticalPixelArraySize(size, channels, bitDepth) {\n  let length = channels * size;\n  if (bitDepth === 1) {\n    length = Math.ceil(length / 8);\n  }\n  return length;\n}\nexport function createPixelArray(size, components, alpha, channels, bitDepth, maxValue) {\n  const length = channels * size;\n  let arr;\n  switch (bitDepth) {\n    case 1:\n      arr = new Uint8Array(Math.ceil(length / 8));\n      break;\n    case 8:\n      arr = new Uint8Array(length);\n      break;\n    case 16:\n      arr = new Uint16Array(length);\n      break;\n    case 32:\n      arr = new Float32Array(length);\n      break;\n    default:\n      throw new Error(`Cannot create pixel array for bit depth ${bitDepth}`);\n  }\n\n  // alpha channel is 100% by default\n  if (alpha) {\n    for (let i = components; i < arr.length; i += channels) {\n      arr[i] = maxValue;\n    }\n  }\n  return arr;\n}","map":{"version":3,"names":["ColorModel","Kind","kinds","BINARY","components","alpha","bitDepth","colorModel","GREY","GREYA","RGBA","RGB","CMYK","CMYKA","getKind","kind","result","RangeError","validBitDepth","verifyKindDefinition","definition","Number","isInteger","TypeError","includes","join","Object","keys","getTheoreticalPixelArraySize","size","channels","length","Math","ceil","createPixelArray","maxValue","arr","Uint8Array","Uint16Array","Float32Array","Error","i"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/core/kind.js"],"sourcesContent":["import * as ColorModel from '../model/model';\n\nimport * as Kind from './kindNames';\n\nconst kinds = {};\n\nkinds[Kind.BINARY] = {\n  components: 1,\n  alpha: 0,\n  bitDepth: 1,\n  colorModel: ColorModel.GREY,\n};\n\nkinds[Kind.GREYA] = {\n  components: 1,\n  alpha: 1,\n  bitDepth: 8,\n  colorModel: ColorModel.GREY,\n};\n\nkinds[Kind.GREY] = {\n  components: 1,\n  alpha: 0,\n  bitDepth: 8,\n  colorModel: ColorModel.GREY,\n};\n\nkinds[Kind.RGBA] = {\n  components: 3,\n  alpha: 1,\n  bitDepth: 8,\n  colorModel: ColorModel.RGB,\n};\n\nkinds[Kind.RGB] = {\n  components: 3,\n  alpha: 0,\n  bitDepth: 8,\n  colorModel: ColorModel.RGB,\n};\n\nkinds[Kind.CMYK] = {\n  components: 4,\n  alpha: 0,\n  bitDepth: 8,\n  colorModel: ColorModel.CMYK,\n};\n\nkinds[Kind.CMYKA] = {\n  components: 4,\n  alpha: 1,\n  bitDepth: 8,\n  colorModel: ColorModel.CMYK,\n};\n\nexport function getKind(kind) {\n  const result = kinds[kind];\n  if (!result) {\n    throw new RangeError(`invalid image kind: ${kind}`);\n  }\n  return result;\n}\nconst validBitDepth = [1, 8, 16, 32];\nexport function verifyKindDefinition(definition) {\n  const { components, alpha, bitDepth, colorModel } = definition;\n  if (!Number.isInteger(components) || components <= 0) {\n    throw new RangeError(\n      `invalid components: ${components}. Must be a positive integer`,\n    );\n  }\n  if (alpha !== 0 && alpha !== 1 && typeof alpha !== 'boolean') {\n    throw new TypeError(`invalid alpha: ${alpha}: must be a boolean, 0 or 1`);\n  }\n  if (!validBitDepth.includes(bitDepth)) {\n    throw new RangeError(\n      `invalid bitDepth: ${bitDepth}. Must be one of ${validBitDepth.join(\n        ', ',\n      )}`,\n    );\n  }\n  // eslint-disable-next-line import/namespace\n  if (!ColorModel[colorModel]) {\n    throw new RangeError(\n      `invalid colorModel: ${colorModel}. Must be one of ${Object.keys(\n        ColorModel,\n      ).join(', ')}`,\n    );\n  }\n}\n\nexport function getTheoreticalPixelArraySize(size, channels, bitDepth) {\n  let length = channels * size;\n  if (bitDepth === 1) {\n    length = Math.ceil(length / 8);\n  }\n  return length;\n}\n\nexport function createPixelArray(\n  size,\n  components,\n  alpha,\n  channels,\n  bitDepth,\n  maxValue,\n) {\n  const length = channels * size;\n  let arr;\n  switch (bitDepth) {\n    case 1:\n      arr = new Uint8Array(Math.ceil(length / 8));\n      break;\n    case 8:\n      arr = new Uint8Array(length);\n      break;\n    case 16:\n      arr = new Uint16Array(length);\n      break;\n    case 32:\n      arr = new Float32Array(length);\n      break;\n    default:\n      throw new Error(`Cannot create pixel array for bit depth ${bitDepth}`);\n  }\n\n  // alpha channel is 100% by default\n  if (alpha) {\n    for (let i = components; i < arr.length; i += channels) {\n      arr[i] = maxValue;\n    }\n  }\n\n  return arr;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}