{"ast":null,"code":"// http://www.easyrgb.com/index.php?X=MATH&H=18#text18\n// check rgbToHsl : https://bgrins.github.io/TinyColor/docs/tinycolor.html\n\nimport Image from '../Image';\nimport { RGB, HSL } from '../model/model';\n\n/**\n * Make a copy of the current image and convert the color model to HSL\n * The source image has to be RGB !\n * @memberof Image\n * @instance\n * @return {Image} - New image in HSL color model\n * @example\n * var hslImage = image.hsl();\n * // we can create one image per channel\n * var channels = hslImage.split();\n */\nexport default function hsl() {\n  this.checkProcessable('hsl', {\n    bitDepth: [8, 16],\n    alpha: [0, 1],\n    colorModel: [RGB]\n  });\n  let newImage = Image.createFrom(this, {\n    colorModel: HSL\n  });\n  let threshold = Math.floor(this.maxValue / 2);\n  let ptr = 0;\n  let data = this.data;\n  for (let i = 0; i < data.length; i += this.channels) {\n    let red = data[i];\n    let green = data[i + 1];\n    let blue = data[i + 2];\n    let max = Math.max(red, green, blue);\n    let min = Math.min(red, green, blue);\n    let hue = 0;\n    let saturation = 0;\n    let luminance = (max + min) / 2;\n    if (max !== min) {\n      let delta = max - min;\n      saturation = luminance > threshold ? delta / (2 - max - min) : delta / (max + min);\n      switch (max) {\n        case red:\n          hue = (green - blue) / delta + (green < blue ? 6 : 0);\n          break;\n        case green:\n          hue = (blue - red) / delta + 2;\n          break;\n        case blue:\n          hue = (red - green) / delta + 4;\n          break;\n        default:\n          throw new Error('unreachable');\n      }\n      hue /= 6;\n    }\n    newImage.data[ptr++] = hue * this.maxValue;\n    newImage.data[ptr++] = saturation * this.maxValue;\n    newImage.data[ptr++] = luminance;\n    if (this.alpha) {\n      newImage.data[ptr++] = data[i + 3];\n    }\n  }\n  return newImage;\n}","map":{"version":3,"names":["Image","RGB","HSL","hsl","checkProcessable","bitDepth","alpha","colorModel","newImage","createFrom","threshold","Math","floor","maxValue","ptr","data","i","length","channels","red","green","blue","max","min","hue","saturation","luminance","delta","Error"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/hsl.js"],"sourcesContent":["// http://www.easyrgb.com/index.php?X=MATH&H=18#text18\n// check rgbToHsl : https://bgrins.github.io/TinyColor/docs/tinycolor.html\n\nimport Image from '../Image';\nimport { RGB, HSL } from '../model/model';\n\n/**\n * Make a copy of the current image and convert the color model to HSL\n * The source image has to be RGB !\n * @memberof Image\n * @instance\n * @return {Image} - New image in HSL color model\n * @example\n * var hslImage = image.hsl();\n * // we can create one image per channel\n * var channels = hslImage.split();\n */\nexport default function hsl() {\n  this.checkProcessable('hsl', {\n    bitDepth: [8, 16],\n    alpha: [0, 1],\n    colorModel: [RGB],\n  });\n\n  let newImage = Image.createFrom(this, {\n    colorModel: HSL,\n  });\n\n  let threshold = Math.floor(this.maxValue / 2);\n  let ptr = 0;\n  let data = this.data;\n  for (let i = 0; i < data.length; i += this.channels) {\n    let red = data[i];\n    let green = data[i + 1];\n    let blue = data[i + 2];\n\n    let max = Math.max(red, green, blue);\n    let min = Math.min(red, green, blue);\n    let hue = 0;\n    let saturation = 0;\n    let luminance = (max + min) / 2;\n    if (max !== min) {\n      let delta = max - min;\n      saturation =\n        luminance > threshold ? delta / (2 - max - min) : delta / (max + min);\n      switch (max) {\n        case red:\n          hue = (green - blue) / delta + (green < blue ? 6 : 0);\n          break;\n        case green:\n          hue = (blue - red) / delta + 2;\n          break;\n        case blue:\n          hue = (red - green) / delta + 4;\n          break;\n        default:\n          throw new Error('unreachable');\n      }\n      hue /= 6;\n    }\n\n    newImage.data[ptr++] = hue * this.maxValue;\n    newImage.data[ptr++] = saturation * this.maxValue;\n    newImage.data[ptr++] = luminance;\n    if (this.alpha) {\n      newImage.data[ptr++] = data[i + 3];\n    }\n  }\n\n  return newImage;\n}\n"],"mappings":"AAAA;AACA;;AAEA,OAAOA,KAAK,MAAM,UAAU;AAC5B,SAASC,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAI,CAACC,gBAAgB,CAAC,KAAK,EAAE;IAC3BC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACjBC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACbC,UAAU,EAAE,CAACN,GAAG;EAClB,CAAC,CAAC;EAEF,IAAIO,QAAQ,GAAGR,KAAK,CAACS,UAAU,CAAC,IAAI,EAAE;IACpCF,UAAU,EAAEL;EACd,CAAC,CAAC;EAEF,IAAIQ,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EAC7C,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,IAAI,GAAG,IAAI,CAACA,IAAI;EACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAED,CAAC,IAAI,IAAI,CAACE,QAAQ,EAAE;IACnD,IAAIC,GAAG,GAAGJ,IAAI,CAACC,CAAC,CAAC;IACjB,IAAII,KAAK,GAAGL,IAAI,CAACC,CAAC,GAAG,CAAC,CAAC;IACvB,IAAIK,IAAI,GAAGN,IAAI,CAACC,CAAC,GAAG,CAAC,CAAC;IAEtB,IAAIM,GAAG,GAAGX,IAAI,CAACW,GAAG,CAACH,GAAG,EAAEC,KAAK,EAAEC,IAAI,CAAC;IACpC,IAAIE,GAAG,GAAGZ,IAAI,CAACY,GAAG,CAACJ,GAAG,EAAEC,KAAK,EAAEC,IAAI,CAAC;IACpC,IAAIG,GAAG,GAAG,CAAC;IACX,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,SAAS,GAAG,CAACJ,GAAG,GAAGC,GAAG,IAAI,CAAC;IAC/B,IAAID,GAAG,KAAKC,GAAG,EAAE;MACf,IAAII,KAAK,GAAGL,GAAG,GAAGC,GAAG;MACrBE,UAAU,GACRC,SAAS,GAAGhB,SAAS,GAAGiB,KAAK,IAAI,CAAC,GAAGL,GAAG,GAAGC,GAAG,CAAC,GAAGI,KAAK,IAAIL,GAAG,GAAGC,GAAG,CAAC;MACvE,QAAQD,GAAG;QACT,KAAKH,GAAG;UACNK,GAAG,GAAG,CAACJ,KAAK,GAAGC,IAAI,IAAIM,KAAK,IAAIP,KAAK,GAAGC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;UACrD;QACF,KAAKD,KAAK;UACRI,GAAG,GAAG,CAACH,IAAI,GAAGF,GAAG,IAAIQ,KAAK,GAAG,CAAC;UAC9B;QACF,KAAKN,IAAI;UACPG,GAAG,GAAG,CAACL,GAAG,GAAGC,KAAK,IAAIO,KAAK,GAAG,CAAC;UAC/B;QACF;UACE,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;MAClC;MACAJ,GAAG,IAAI,CAAC;IACV;IAEAhB,QAAQ,CAACO,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGU,GAAG,GAAG,IAAI,CAACX,QAAQ;IAC1CL,QAAQ,CAACO,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGW,UAAU,GAAG,IAAI,CAACZ,QAAQ;IACjDL,QAAQ,CAACO,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGY,SAAS;IAChC,IAAI,IAAI,CAACpB,KAAK,EAAE;MACdE,QAAQ,CAACO,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGC,IAAI,CAACC,CAAC,GAAG,CAAC,CAAC;IACpC;EACF;EAEA,OAAOR,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}