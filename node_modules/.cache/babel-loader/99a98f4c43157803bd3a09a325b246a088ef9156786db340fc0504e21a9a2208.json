{"ast":null,"code":"'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & this.size - 1) !== 0) throw new Error('FFT size must be a power of two and bigger than 1');\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1) power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= (j >>> shift & 3) << revShift;\n    }\n  }\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2) res[i >>> 1] = complex[i];\n  return res;\n};\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++) res[i] = 0;\n  return res;\n};\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data) throw new Error('Input and output buffers must be different');\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data) throw new Error('Input and output buffers must be different');\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data) throw new Error('Input and output buffers must be different');\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++) out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = size / step << 1;\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = size / step << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off, step) {\n  const out = this._out;\n  const data = this._data;\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off, step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = size / step << 1;\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = size / step << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen) continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff, off, step) {\n  const out = this._out;\n  const data = this._data;\n  const evenR = data[off];\n  const oddR = data[off + step];\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff, off, step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FBr = T1r;\n  const FBi = -T3r;\n  const FCr = T0r - T2r;\n  const FDr = T1r;\n  const FDi = T3r;\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};","map":{"version":3,"names":["FFT","size","Error","_csize","table","Array","i","length","angle","Math","PI","cos","sin","power","t","_width","_bitrev","j","shift","revShift","_out","_data","_inv","module","exports","prototype","fromComplexArray","complex","storage","res","createComplexArray","toComplexArray","input","completeSpectrum","spectrum","half","transform","out","data","_transform4","realTransform","_realTransform4","inverseTransform","width","step","len","outOff","bitrev","off","_singleTransform2","_singleTransform4","inv","quarterLen","limit","k","A","B","C","D","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","_singleRealTransform2","_singleRealTransform4","halfLen","hquarterLen","ST0r","ST0i","ST1r","ST1i","ST2r","ST2i","ST3r","ST3i","SFAr","SFAi","SFBr","SFBi","SA","SB"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/fft.js/lib/fft.js"],"sourcesContent":["'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}