{"ast":null,"code":"'use strict';\n\nconst defaultByteLength = 1024 * 8;\nconst charArray = [];\nclass IOBuffer {\n  constructor(data, options) {\n    options = options || {};\n    if (data === undefined) {\n      data = defaultByteLength;\n    }\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    }\n    let length = data.byteLength;\n    const offset = options.offset ? options.offset >>> 0 : 0;\n    if (data.buffer) {\n      length = data.byteLength - offset;\n      if (data.byteLength !== data.buffer.byteLength) {\n        // Node.js buffer from pool\n        data = data.buffer.slice(data.byteOffset + offset, data.byteOffset + data.byteLength);\n      } else if (offset) {\n        data = data.buffer.slice(offset);\n      } else {\n        data = data.buffer;\n      }\n    }\n    this.buffer = data;\n    this.length = length;\n    this.byteLength = length;\n    this.byteOffset = 0;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer);\n    this._increment = length || defaultByteLength;\n    this._mark = 0;\n  }\n  available(byteLength) {\n    if (byteLength === undefined) byteLength = 1;\n    return this.offset + byteLength <= this.length;\n  }\n  isLittleEndian() {\n    return this.littleEndian;\n  }\n  setLittleEndian() {\n    this.littleEndian = true;\n  }\n  isBigEndian() {\n    return !this.littleEndian;\n  }\n  setBigEndian() {\n    this.littleEndian = false;\n  }\n  skip(n) {\n    if (n === undefined) n = 1;\n    this.offset += n;\n  }\n  seek(offset) {\n    this.offset = offset;\n  }\n  mark() {\n    this._mark = this.offset;\n  }\n  reset() {\n    this.offset = this._mark;\n  }\n  rewind() {\n    this.offset = 0;\n  }\n  ensureAvailable(byteLength) {\n    if (byteLength === undefined) byteLength = 1;\n    if (!this.available(byteLength)) {\n      const newIncrement = this._increment + this._increment;\n      this._increment = newIncrement;\n      const newLength = this.length + newIncrement;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = newLength;\n      this._data = new DataView(this.buffer);\n    }\n  }\n  readBoolean() {\n    return this.readUint8() !== 0;\n  }\n  readInt8() {\n    return this._data.getInt8(this.offset++);\n  }\n  readUint8() {\n    return this._data.getUint8(this.offset++);\n  }\n  readByte() {\n    return this.readUint8();\n  }\n  readBytes(n) {\n    if (n === undefined) n = 1;\n    var bytes = new Uint8Array(n);\n    for (var i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n    return bytes;\n  }\n  readInt16() {\n    var value = this._data.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  readUint16() {\n    var value = this._data.getUint16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  readInt32() {\n    var value = this._data.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  readUint32() {\n    var value = this._data.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  readFloat32() {\n    var value = this._data.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  readFloat64() {\n    var value = this._data.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  readChar() {\n    return String.fromCharCode(this.readInt8());\n  }\n  readChars(n) {\n    if (n === undefined) n = 1;\n    charArray.length = n;\n    for (var i = 0; i < n; i++) {\n      charArray[i] = this.readChar();\n    }\n    return charArray.join('');\n  }\n  writeBoolean(bool) {\n    this.writeUint8(bool ? 0xff : 0x00);\n  }\n  writeInt8(value) {\n    this.ensureAvailable(1);\n    this._data.setInt8(this.offset++, value);\n  }\n  writeUint8(value) {\n    this.ensureAvailable(1);\n    this._data.setUint8(this.offset++, value);\n  }\n  writeByte(value) {\n    this.writeUint8(value);\n  }\n  writeBytes(bytes) {\n    this.ensureAvailable(bytes.length);\n    for (var i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n  }\n  writeInt16(value) {\n    this.ensureAvailable(2);\n    this._data.setInt16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n  }\n  writeUint16(value) {\n    this.ensureAvailable(2);\n    this._data.setUint16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n  }\n  writeInt32(value) {\n    this.ensureAvailable(4);\n    this._data.setInt32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n  }\n  writeUint32(value) {\n    this.ensureAvailable(4);\n    this._data.setUint32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n  }\n  writeFloat32(value) {\n    this.ensureAvailable(4);\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n  }\n  writeFloat64(value) {\n    this.ensureAvailable(8);\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n    this.offset += 8;\n  }\n  writeChar(str) {\n    this.writeUint8(str.charCodeAt(0));\n  }\n  writeChars(str) {\n    for (var i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n  }\n  toArray() {\n    return new Uint8Array(this.buffer, 0, this.offset);\n  }\n}\nmodule.exports = IOBuffer;","map":{"version":3,"names":["defaultByteLength","charArray","IOBuffer","constructor","data","options","undefined","ArrayBuffer","length","byteLength","offset","buffer","slice","byteOffset","littleEndian","_data","DataView","_increment","_mark","available","isLittleEndian","setLittleEndian","isBigEndian","setBigEndian","skip","n","seek","mark","reset","rewind","ensureAvailable","newIncrement","newLength","newArray","Uint8Array","set","readBoolean","readUint8","readInt8","getInt8","getUint8","readByte","readBytes","bytes","i","readInt16","value","getInt16","readUint16","getUint16","readInt32","getInt32","readUint32","getUint32","readFloat32","getFloat32","readFloat64","getFloat64","readChar","String","fromCharCode","readChars","join","writeBoolean","bool","writeUint8","writeInt8","setInt8","setUint8","writeByte","writeBytes","writeInt16","setInt16","writeUint16","setUint16","writeInt32","setInt32","writeUint32","setUint32","writeFloat32","setFloat32","writeFloat64","setFloat64","writeChar","str","charCodeAt","writeChars","toArray","module","exports"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/fast-jpeg/node_modules/iobuffer/IOBuffer.js"],"sourcesContent":["'use strict';\n\nconst defaultByteLength = 1024 * 8;\nconst charArray = [];\n\nclass IOBuffer {\n    constructor(data, options) {\n        options = options || {};\n        if (data === undefined) {\n            data = defaultByteLength;\n        }\n        if (typeof data === 'number') {\n            data = new ArrayBuffer(data);\n        }\n        let length = data.byteLength;\n        const offset = options.offset ? options.offset>>>0 : 0;\n        if (data.buffer) {\n            length = data.byteLength - offset;\n            if (data.byteLength !== data.buffer.byteLength) { // Node.js buffer from pool\n                data = data.buffer.slice(data.byteOffset + offset, data.byteOffset + data.byteLength);\n            } else if (offset) {\n                data = data.buffer.slice(offset);\n            } else {\n                data = data.buffer;\n            }\n        }\n        this.buffer = data;\n        this.length = length;\n        this.byteLength = length;\n        this.byteOffset = 0;\n        this.offset = 0;\n        this.littleEndian = true;\n        this._data = new DataView(this.buffer);\n        this._increment = length || defaultByteLength;\n        this._mark = 0;\n    }\n\n    available(byteLength) {\n        if (byteLength === undefined) byteLength = 1;\n        return (this.offset + byteLength) <= this.length;\n    }\n\n    isLittleEndian() {\n        return this.littleEndian;\n    }\n\n    setLittleEndian() {\n        this.littleEndian = true;\n    }\n\n    isBigEndian() {\n        return !this.littleEndian;\n    }\n\n    setBigEndian() {\n        this.littleEndian = false;\n    }\n\n    skip(n) {\n        if (n === undefined) n = 1;\n        this.offset += n;\n    }\n\n    seek(offset) {\n        this.offset = offset;\n    }\n\n    mark() {\n        this._mark = this.offset;\n    }\n\n    reset() {\n        this.offset = this._mark;\n    }\n\n    rewind() {\n        this.offset = 0;\n    }\n\n    ensureAvailable(byteLength) {\n        if (byteLength === undefined) byteLength = 1;\n        if (!this.available(byteLength)) {\n            const newIncrement = this._increment + this._increment;\n            this._increment = newIncrement;\n            const newLength = this.length + newIncrement;\n            const newArray = new Uint8Array(newLength);\n            newArray.set(new Uint8Array(this.buffer));\n            this.buffer = newArray.buffer;\n            this.length = newLength;\n            this._data = new DataView(this.buffer);\n        }\n    }\n\n    readBoolean() {\n        return this.readUint8() !== 0;\n    }\n\n    readInt8() {\n        return this._data.getInt8(this.offset++);\n    }\n\n    readUint8() {\n        return this._data.getUint8(this.offset++);\n    }\n\n    readByte() {\n        return this.readUint8();\n    }\n\n    readBytes(n) {\n        if (n === undefined) n = 1;\n        var bytes = new Uint8Array(n);\n        for (var i = 0; i < n; i++) {\n            bytes[i] = this.readByte();\n        }\n        return bytes;\n    }\n\n    readInt16() {\n        var value = this._data.getInt16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n\n    readUint16() {\n        var value = this._data.getUint16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n\n    readInt32() {\n        var value = this._data.getInt32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    readUint32() {\n        var value = this._data.getUint32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    readFloat32() {\n        var value = this._data.getFloat32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n\n    readFloat64() {\n        var value = this._data.getFloat64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n\n    readChar() {\n        return String.fromCharCode(this.readInt8());\n    }\n\n    readChars(n) {\n        if (n === undefined) n = 1;\n        charArray.length = n;\n        for (var i = 0; i < n; i++) {\n            charArray[i] = this.readChar();\n        }\n        return charArray.join('');\n    }\n\n    writeBoolean(bool) {\n        this.writeUint8(bool ? 0xff : 0x00);\n    }\n\n    writeInt8(value) {\n        this.ensureAvailable(1);\n        this._data.setInt8(this.offset++, value);\n    }\n\n    writeUint8(value) {\n        this.ensureAvailable(1);\n        this._data.setUint8(this.offset++, value);\n    }\n\n    writeByte(value) {\n        this.writeUint8(value);\n    }\n\n    writeBytes(bytes) {\n        this.ensureAvailable(bytes.length);\n        for (var i = 0; i < bytes.length; i++) {\n            this._data.setUint8(this.offset++, bytes[i]);\n        }\n    }\n\n    writeInt16(value) {\n        this.ensureAvailable(2);\n        this._data.setInt16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n    }\n\n    writeUint16(value) {\n        this.ensureAvailable(2);\n        this._data.setUint16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n    }\n\n    writeInt32(value) {\n        this.ensureAvailable(4);\n        this._data.setInt32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n    }\n\n    writeUint32(value) {\n        this.ensureAvailable(4);\n        this._data.setUint32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n    }\n\n    writeFloat32(value) {\n        this.ensureAvailable(4);\n        this._data.setFloat32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n    }\n\n    writeFloat64(value) {\n        this.ensureAvailable(8);\n        this._data.setFloat64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n    }\n\n    writeChar(str) {\n        this.writeUint8(str.charCodeAt(0));\n    }\n\n    writeChars(str) {\n        for (var i = 0; i < str.length; i++) {\n            this.writeUint8(str.charCodeAt(i));\n        }\n    }\n\n    toArray() {\n        return new Uint8Array(this.buffer, 0, this.offset);\n    }\n}\n\nmodule.exports = IOBuffer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}