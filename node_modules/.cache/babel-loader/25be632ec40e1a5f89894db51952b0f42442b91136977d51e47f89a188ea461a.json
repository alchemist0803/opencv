{"ast":null,"code":"import { IOBuffer } from 'iobuffer';\nconst CLEAR_CODE = 256;\nconst EOI_CODE = 257;\n// 0-255 from the table + 256 for clear code + 257 for end of information code.\nconst TABLE_START = 258;\nconst MIN_BIT_LENGTH = 9;\nlet stringTable = [];\nfunction initializeStringTable() {\n  if (stringTable.length === 0) {\n    for (let i = 0; i < 256; i++) {\n      stringTable.push([i]);\n    }\n    // Fill the table with dummy data.\n    // Elements at indices > 257 will be replaced during decompression.\n    const dummyString = [];\n    for (let i = 256; i < 4096; i++) {\n      stringTable.push(dummyString);\n    }\n  }\n}\nconst andTable = [511, 1023, 2047, 4095];\nconst bitJumps = [0, 0, 0, 0, 0, 0, 0, 0, 0, 511, 1023, 2047, 4095];\nclass LzwDecoder {\n  constructor(data) {\n    this.nextData = 0;\n    this.nextBits = 0;\n    this.bytePointer = 0;\n    this.tableLength = TABLE_START;\n    this.currentBitLength = MIN_BIT_LENGTH;\n    this.stripArray = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    this.outData = new IOBuffer(data.byteLength);\n    this.initializeTable();\n  }\n  decode() {\n    let code = 0;\n    let oldCode = 0;\n    while ((code = this.getNextCode()) !== EOI_CODE) {\n      if (code === CLEAR_CODE) {\n        this.initializeTable();\n        code = this.getNextCode();\n        if (code === EOI_CODE) {\n          break;\n        }\n        this.writeString(this.stringFromCode(code));\n        oldCode = code;\n      } else if (this.isInTable(code)) {\n        this.writeString(this.stringFromCode(code));\n        this.addStringToTable(this.stringFromCode(oldCode).concat(this.stringFromCode(code)[0]));\n        oldCode = code;\n      } else {\n        const outString = this.stringFromCode(oldCode).concat(this.stringFromCode(oldCode)[0]);\n        this.writeString(outString);\n        this.addStringToTable(outString);\n        oldCode = code;\n      }\n    }\n    const outArray = this.outData.toArray();\n    return new DataView(outArray.buffer, outArray.byteOffset, outArray.byteLength);\n  }\n  initializeTable() {\n    initializeStringTable();\n    this.tableLength = TABLE_START;\n    this.currentBitLength = MIN_BIT_LENGTH;\n  }\n  writeString(string) {\n    this.outData.writeBytes(string);\n  }\n  stringFromCode(code) {\n    // At this point, `code` must be defined in the table.\n    return stringTable[code];\n  }\n  isInTable(code) {\n    return code < this.tableLength;\n  }\n  addStringToTable(string) {\n    stringTable[this.tableLength++] = string;\n    if (stringTable.length > 4096) {\n      stringTable = [];\n      throw new Error('LZW decoding error. Please open an issue at https://github.com/image-js/tiff/issues/new/choose (include a test image).');\n    }\n    if (this.tableLength === bitJumps[this.currentBitLength]) {\n      this.currentBitLength++;\n    }\n  }\n  getNextCode() {\n    this.nextData = this.nextData << 8 | this.stripArray[this.bytePointer++] & 0xff;\n    this.nextBits += 8;\n    if (this.nextBits < this.currentBitLength) {\n      this.nextData = this.nextData << 8 | this.stripArray[this.bytePointer++] & 0xff;\n      this.nextBits += 8;\n    }\n    const code = this.nextData >> this.nextBits - this.currentBitLength & andTable[this.currentBitLength - 9];\n    this.nextBits -= this.currentBitLength;\n    // This should not really happen but is present in other codes as well.\n    // See: https://github.com/sugark/Tiffus/blob/15a60123813d1612f4ae9e4fab964f9f7d71cf63/src/org/eclipse/swt/internal/image/TIFFLZWDecoder.java\n    if (this.bytePointer > this.stripArray.length) {\n      return 257;\n    }\n    return code;\n  }\n}\nexport function decompressLzw(stripData) {\n  return new LzwDecoder(stripData).decode();\n}","map":{"version":3,"names":["IOBuffer","CLEAR_CODE","EOI_CODE","TABLE_START","MIN_BIT_LENGTH","stringTable","initializeStringTable","length","i","push","dummyString","andTable","bitJumps","LzwDecoder","constructor","data","nextData","nextBits","bytePointer","tableLength","currentBitLength","stripArray","Uint8Array","buffer","byteOffset","byteLength","outData","initializeTable","decode","code","oldCode","getNextCode","writeString","stringFromCode","isInTable","addStringToTable","concat","outString","outArray","toArray","DataView","string","writeBytes","Error","decompressLzw","stripData"],"sources":["C:\\Users\\Admin\\Documents\\Workspace\\opencv\\opencv\\node_modules\\tiff\\src\\lzw.ts"],"sourcesContent":["import { IOBuffer } from 'iobuffer';\n\nconst CLEAR_CODE = 256;\nconst EOI_CODE = 257;\n// 0-255 from the table + 256 for clear code + 257 for end of information code.\nconst TABLE_START = 258;\nconst MIN_BIT_LENGTH = 9;\n\nlet stringTable: number[][] = [];\nfunction initializeStringTable() {\n  if (stringTable.length === 0) {\n    for (let i = 0; i < 256; i++) {\n      stringTable.push([i]);\n    }\n    // Fill the table with dummy data.\n    // Elements at indices > 257 will be replaced during decompression.\n    const dummyString: number[] = [];\n    for (let i = 256; i < 4096; i++) {\n      stringTable.push(dummyString);\n    }\n  }\n}\n\nconst andTable = [511, 1023, 2047, 4095];\nconst bitJumps = [0, 0, 0, 0, 0, 0, 0, 0, 0, 511, 1023, 2047, 4095];\n\nclass LzwDecoder {\n  private stripArray: Uint8Array;\n  private nextData = 0;\n  private nextBits = 0;\n  private bytePointer = 0;\n  private tableLength = TABLE_START;\n  private currentBitLength = MIN_BIT_LENGTH;\n  private outData: IOBuffer;\n\n  public constructor(data: DataView) {\n    this.stripArray = new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength,\n    );\n    this.outData = new IOBuffer(data.byteLength);\n    this.initializeTable();\n  }\n\n  public decode(): DataView {\n    let code = 0;\n    let oldCode = 0;\n    while ((code = this.getNextCode()) !== EOI_CODE) {\n      if (code === CLEAR_CODE) {\n        this.initializeTable();\n        code = this.getNextCode();\n        if (code === EOI_CODE) {\n          break;\n        }\n        this.writeString(this.stringFromCode(code));\n        oldCode = code;\n      } else if (this.isInTable(code)) {\n        this.writeString(this.stringFromCode(code));\n        this.addStringToTable(\n          this.stringFromCode(oldCode).concat(this.stringFromCode(code)[0]),\n        );\n        oldCode = code;\n      } else {\n        const outString = this.stringFromCode(oldCode).concat(\n          this.stringFromCode(oldCode)[0],\n        );\n        this.writeString(outString);\n        this.addStringToTable(outString);\n        oldCode = code;\n      }\n    }\n    const outArray = this.outData.toArray();\n\n    return new DataView(\n      outArray.buffer,\n      outArray.byteOffset,\n      outArray.byteLength,\n    );\n  }\n\n  private initializeTable(): void {\n    initializeStringTable();\n    this.tableLength = TABLE_START;\n    this.currentBitLength = MIN_BIT_LENGTH;\n  }\n\n  private writeString(string: number[]): void {\n    this.outData.writeBytes(string);\n  }\n\n  private stringFromCode(code: number): number[] {\n    // At this point, `code` must be defined in the table.\n    return stringTable[code];\n  }\n\n  private isInTable(code: number): boolean {\n    return code < this.tableLength;\n  }\n\n  private addStringToTable(string: number[]): void {\n    stringTable[this.tableLength++] = string;\n    if (stringTable.length > 4096) {\n      stringTable = [];\n      throw new Error(\n        'LZW decoding error. Please open an issue at https://github.com/image-js/tiff/issues/new/choose (include a test image).',\n      );\n    }\n    if (this.tableLength === bitJumps[this.currentBitLength]) {\n      this.currentBitLength++;\n    }\n  }\n\n  private getNextCode(): number {\n    this.nextData =\n      (this.nextData << 8) | (this.stripArray[this.bytePointer++] & 0xff);\n    this.nextBits += 8;\n\n    if (this.nextBits < this.currentBitLength) {\n      this.nextData =\n        (this.nextData << 8) | (this.stripArray[this.bytePointer++] & 0xff);\n      this.nextBits += 8;\n    }\n\n    const code =\n      (this.nextData >> (this.nextBits - this.currentBitLength)) &\n      andTable[this.currentBitLength - 9];\n    this.nextBits -= this.currentBitLength;\n\n    // This should not really happen but is present in other codes as well.\n    // See: https://github.com/sugark/Tiffus/blob/15a60123813d1612f4ae9e4fab964f9f7d71cf63/src/org/eclipse/swt/internal/image/TIFFLZWDecoder.java\n    if (this.bytePointer > this.stripArray.length) {\n      return 257;\n    }\n\n    return code;\n  }\n}\n\nexport function decompressLzw(stripData: DataView): DataView {\n  return new LzwDecoder(stripData).decode();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}