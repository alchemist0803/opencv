{"ast":null,"code":"import BaseRegression, { maybeToPrecision } from 'ml-regression-base';\nimport PolynomialRegression from 'ml-regression-polynomial';\n\n/*\n * Function that calculate the potential fit in the form f(x) = A*x^M\n * with a given M and return de A coefficient.\n *\n * @param {Vector} X - Vector of the x positions of the points.\n * @param {Vector} Y - Vector of the x positions of the points.\n * @param {Number} M - The exponent of the potential fit.\n * @return {Number} A - The A coefficient of the potential fit.\n */\nexport default class PotentialRegression extends BaseRegression {\n  /**\n   * @constructor\n   * @param x: Independent variable\n   * @param y: Dependent variable\n   * @param M\n   */\n  constructor(x, y, M) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.M = y.M;\n    } else {\n      var n = x.length;\n      if (n !== y.length) {\n        throw new RangeError('input and output array have a different length');\n      }\n      var linear = new PolynomialRegression(x, y, [M]);\n      this.A = linear.coefficients[0];\n      this.M = M;\n    }\n  }\n  _predict(x) {\n    return this.A * Math.pow(x, this.M);\n  }\n  toJSON() {\n    return {\n      name: 'potentialRegression',\n      A: this.A,\n      M: this.M\n    };\n  }\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.A, precision)} * x^${this.M}`;\n  }\n  toLaTeX(precision) {\n    if (this.M >= 0) {\n      return `f(x) = ${maybeToPrecision(this.A, precision)}x^{${this.M}}`;\n    } else {\n      return `f(x) = \\\\frac{${maybeToPrecision(this.A, precision)}}{x^{${-this.M}}}`;\n    }\n  }\n  static load(json) {\n    if (json.name !== 'potentialRegression') {\n      throw new TypeError('not a potential regression model');\n    }\n    return new PotentialRegression(true, json);\n  }\n}","map":{"version":3,"names":["BaseRegression","maybeToPrecision","PolynomialRegression","PotentialRegression","constructor","x","y","M","A","n","length","RangeError","linear","coefficients","_predict","Math","pow","toJSON","name","toString","precision","toLaTeX","load","json","TypeError"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-regression/src/regression/potential-regression.js"],"sourcesContent":["import BaseRegression, { maybeToPrecision } from 'ml-regression-base';\nimport PolynomialRegression from 'ml-regression-polynomial';\n\n\n/*\n * Function that calculate the potential fit in the form f(x) = A*x^M\n * with a given M and return de A coefficient.\n *\n * @param {Vector} X - Vector of the x positions of the points.\n * @param {Vector} Y - Vector of the x positions of the points.\n * @param {Number} M - The exponent of the potential fit.\n * @return {Number} A - The A coefficient of the potential fit.\n */\nexport default class PotentialRegression extends BaseRegression {\n  /**\n   * @constructor\n   * @param x: Independent variable\n   * @param y: Dependent variable\n   * @param M\n   */\n  constructor(x, y, M) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.M = y.M;\n    } else {\n      var n = x.length;\n      if (n !== y.length) {\n        throw new RangeError('input and output array have a different length');\n      }\n\n      var linear = new PolynomialRegression(x, y, [M]);\n      this.A = linear.coefficients[0];\n      this.M = M;\n    }\n  }\n\n  _predict(x) {\n    return this.A * Math.pow(x, this.M);\n  }\n\n  toJSON() {\n    return {\n      name: 'potentialRegression',\n      A: this.A,\n      M: this.M\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.A, precision)} * x^${this.M}`;\n  }\n\n  toLaTeX(precision) {\n    if (this.M >= 0) {\n      return (\n        `f(x) = ${maybeToPrecision(this.A, precision)}x^{${this.M}}`\n      );\n    } else {\n      return (\n        `f(x) = \\\\frac{${\n          maybeToPrecision(this.A, precision)\n        }}{x^{${\n          -this.M\n        }}}`\n      );\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'potentialRegression') {\n      throw new TypeError('not a potential regression model');\n    }\n    return new PotentialRegression(true, json);\n  }\n}\n"],"mappings":"AAAA,OAAOA,cAAc,IAAIC,gBAAgB,QAAQ,oBAAoB;AACrE,OAAOC,oBAAoB,MAAM,0BAA0B;;AAG3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,mBAAmB,SAASH,cAAc,CAAC;EAC9D;AACF;AACA;AACA;AACA;AACA;EACEI,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACnB,KAAK,CAAC,CAAC;IACP,IAAIF,CAAC,KAAK,IAAI,EAAE;MACd;MACA,IAAI,CAACG,CAAC,GAAGF,CAAC,CAACE,CAAC;MACZ,IAAI,CAACD,CAAC,GAAGD,CAAC,CAACC,CAAC;IACd,CAAC,MAAM;MACL,IAAIE,CAAC,GAAGJ,CAAC,CAACK,MAAM;MAChB,IAAID,CAAC,KAAKH,CAAC,CAACI,MAAM,EAAE;QAClB,MAAM,IAAIC,UAAU,CAAC,gDAAgD,CAAC;MACxE;MAEA,IAAIC,MAAM,GAAG,IAAIV,oBAAoB,CAACG,CAAC,EAAEC,CAAC,EAAE,CAACC,CAAC,CAAC,CAAC;MAChD,IAAI,CAACC,CAAC,GAAGI,MAAM,CAACC,YAAY,CAAC,CAAC,CAAC;MAC/B,IAAI,CAACN,CAAC,GAAGA,CAAC;IACZ;EACF;EAEAO,QAAQA,CAACT,CAAC,EAAE;IACV,OAAO,IAAI,CAACG,CAAC,GAAGO,IAAI,CAACC,GAAG,CAACX,CAAC,EAAE,IAAI,CAACE,CAAC,CAAC;EACrC;EAEAU,MAAMA,CAAA,EAAG;IACP,OAAO;MACLC,IAAI,EAAE,qBAAqB;MAC3BV,CAAC,EAAE,IAAI,CAACA,CAAC;MACTD,CAAC,EAAE,IAAI,CAACA;IACV,CAAC;EACH;EAEAY,QAAQA,CAACC,SAAS,EAAE;IAClB,OAAO,UAAUnB,gBAAgB,CAAC,IAAI,CAACO,CAAC,EAAEY,SAAS,CAAC,QAAQ,IAAI,CAACb,CAAC,EAAE;EACtE;EAEAc,OAAOA,CAACD,SAAS,EAAE;IACjB,IAAI,IAAI,CAACb,CAAC,IAAI,CAAC,EAAE;MACf,OACE,UAAUN,gBAAgB,CAAC,IAAI,CAACO,CAAC,EAAEY,SAAS,CAAC,MAAM,IAAI,CAACb,CAAC,GAAG;IAEhE,CAAC,MAAM;MACL,OACE,iBACEN,gBAAgB,CAAC,IAAI,CAACO,CAAC,EAAEY,SAAS,CAAC,QAEnC,CAAC,IAAI,CAACb,CAAC,IACL;IAER;EACF;EAEA,OAAOe,IAAIA,CAACC,IAAI,EAAE;IAChB,IAAIA,IAAI,CAACL,IAAI,KAAK,qBAAqB,EAAE;MACvC,MAAM,IAAIM,SAAS,CAAC,kCAAkC,CAAC;IACzD;IACA,OAAO,IAAIrB,mBAAmB,CAAC,IAAI,EAAEoB,IAAI,CAAC;EAC5C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}