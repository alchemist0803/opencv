{"ast":null,"code":"import { Matrix, solve } from 'ml-matrix';\nimport Kernel from 'ml-kernel';\nimport BaseRegression from 'ml-regression-base';\nconst defaultOptions = {\n  lambda: 0.1,\n  kernelType: 'gaussian',\n  kernelOptions: {},\n  computeCoefficient: false\n};\n\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport default class KernelRidgeRegression extends BaseRegression {\n  constructor(inputs, outputs, options) {\n    super();\n    if (inputs === true) {\n      // reloading model\n      this.alpha = outputs.alpha;\n      this.inputs = outputs.inputs;\n      this.kernelType = outputs.kernelType;\n      this.kernelOptions = outputs.kernelOptions;\n      this.kernel = new Kernel(outputs.kernelType, outputs.kernelOptions);\n    } else {\n      inputs = Matrix.checkMatrix(inputs);\n      options = Object.assign({}, defaultOptions, options);\n      const kernelFunction = new Kernel(options.kernelType, options.kernelOptions);\n      const K = kernelFunction.compute(inputs);\n      const n = inputs.rows;\n      K.add(Matrix.eye(n, n).mul(options.lambda));\n      this.alpha = solve(K, outputs);\n      this.inputs = inputs;\n      this.kernelType = options.kernelType;\n      this.kernelOptions = options.kernelOptions;\n      this.kernel = kernelFunction;\n    }\n  }\n  _predict(newInputs) {\n    return this.kernel.compute([newInputs], this.inputs).mmul(this.alpha).getRow(0);\n  }\n  toJSON() {\n    return {\n      name: 'kernelRidgeRegression',\n      alpha: this.alpha,\n      inputs: this.inputs,\n      kernelType: this.kernelType,\n      kernelOptions: this.kernelOptions\n    };\n  }\n  static load(json) {\n    if (json.name !== 'kernelRidgeRegression') {\n      throw new TypeError('not a KRR model');\n    }\n    return new KernelRidgeRegression(true, json);\n  }\n}","map":{"version":3,"names":["Matrix","solve","Kernel","BaseRegression","defaultOptions","lambda","kernelType","kernelOptions","computeCoefficient","KernelRidgeRegression","constructor","inputs","outputs","options","alpha","kernel","checkMatrix","Object","assign","kernelFunction","K","compute","n","rows","add","eye","mul","_predict","newInputs","mmul","getRow","toJSON","name","load","json","TypeError"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-regression/src/regression/kernel-ridge-regression.js"],"sourcesContent":["import { Matrix, solve } from 'ml-matrix';\nimport Kernel from 'ml-kernel';\nimport BaseRegression from 'ml-regression-base';\n\nconst defaultOptions = {\n  lambda: 0.1,\n  kernelType: 'gaussian',\n  kernelOptions: {},\n  computeCoefficient: false\n};\n\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport default class KernelRidgeRegression extends BaseRegression {\n  constructor(inputs, outputs, options) {\n    super();\n    if (inputs === true) {\n      // reloading model\n      this.alpha = outputs.alpha;\n      this.inputs = outputs.inputs;\n      this.kernelType = outputs.kernelType;\n      this.kernelOptions = outputs.kernelOptions;\n      this.kernel = new Kernel(outputs.kernelType, outputs.kernelOptions);\n    } else {\n      inputs = Matrix.checkMatrix(inputs);\n      options = Object.assign({}, defaultOptions, options);\n\n      const kernelFunction = new Kernel(\n        options.kernelType,\n        options.kernelOptions\n      );\n      const K = kernelFunction.compute(inputs);\n      const n = inputs.rows;\n      K.add(Matrix.eye(n, n).mul(options.lambda));\n\n      this.alpha = solve(K, outputs);\n      this.inputs = inputs;\n      this.kernelType = options.kernelType;\n      this.kernelOptions = options.kernelOptions;\n      this.kernel = kernelFunction;\n    }\n  }\n\n  _predict(newInputs) {\n    return this.kernel\n      .compute([newInputs], this.inputs)\n      .mmul(this.alpha)\n      .getRow(0);\n  }\n\n  toJSON() {\n    return {\n      name: 'kernelRidgeRegression',\n      alpha: this.alpha,\n      inputs: this.inputs,\n      kernelType: this.kernelType,\n      kernelOptions: this.kernelOptions\n    };\n  }\n\n  static load(json) {\n    if (json.name !== 'kernelRidgeRegression') {\n      throw new TypeError('not a KRR model');\n    }\n    return new KernelRidgeRegression(true, json);\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,KAAK,QAAQ,WAAW;AACzC,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,cAAc,MAAM,oBAAoB;AAE/C,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,GAAG;EACXC,UAAU,EAAE,UAAU;EACtBC,aAAa,EAAE,CAAC,CAAC;EACjBC,kBAAkB,EAAE;AACtB,CAAC;;AAED;AACA;AACA,eAAe,MAAMC,qBAAqB,SAASN,cAAc,CAAC;EAChEO,WAAWA,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE;IACpC,KAAK,CAAC,CAAC;IACP,IAAIF,MAAM,KAAK,IAAI,EAAE;MACnB;MACA,IAAI,CAACG,KAAK,GAAGF,OAAO,CAACE,KAAK;MAC1B,IAAI,CAACH,MAAM,GAAGC,OAAO,CAACD,MAAM;MAC5B,IAAI,CAACL,UAAU,GAAGM,OAAO,CAACN,UAAU;MACpC,IAAI,CAACC,aAAa,GAAGK,OAAO,CAACL,aAAa;MAC1C,IAAI,CAACQ,MAAM,GAAG,IAAIb,MAAM,CAACU,OAAO,CAACN,UAAU,EAAEM,OAAO,CAACL,aAAa,CAAC;IACrE,CAAC,MAAM;MACLI,MAAM,GAAGX,MAAM,CAACgB,WAAW,CAACL,MAAM,CAAC;MACnCE,OAAO,GAAGI,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEd,cAAc,EAAES,OAAO,CAAC;MAEpD,MAAMM,cAAc,GAAG,IAAIjB,MAAM,CAC/BW,OAAO,CAACP,UAAU,EAClBO,OAAO,CAACN,aACV,CAAC;MACD,MAAMa,CAAC,GAAGD,cAAc,CAACE,OAAO,CAACV,MAAM,CAAC;MACxC,MAAMW,CAAC,GAAGX,MAAM,CAACY,IAAI;MACrBH,CAAC,CAACI,GAAG,CAACxB,MAAM,CAACyB,GAAG,CAACH,CAAC,EAAEA,CAAC,CAAC,CAACI,GAAG,CAACb,OAAO,CAACR,MAAM,CAAC,CAAC;MAE3C,IAAI,CAACS,KAAK,GAAGb,KAAK,CAACmB,CAAC,EAAER,OAAO,CAAC;MAC9B,IAAI,CAACD,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACL,UAAU,GAAGO,OAAO,CAACP,UAAU;MACpC,IAAI,CAACC,aAAa,GAAGM,OAAO,CAACN,aAAa;MAC1C,IAAI,CAACQ,MAAM,GAAGI,cAAc;IAC9B;EACF;EAEAQ,QAAQA,CAACC,SAAS,EAAE;IAClB,OAAO,IAAI,CAACb,MAAM,CACfM,OAAO,CAAC,CAACO,SAAS,CAAC,EAAE,IAAI,CAACjB,MAAM,CAAC,CACjCkB,IAAI,CAAC,IAAI,CAACf,KAAK,CAAC,CAChBgB,MAAM,CAAC,CAAC,CAAC;EACd;EAEAC,MAAMA,CAAA,EAAG;IACP,OAAO;MACLC,IAAI,EAAE,uBAAuB;MAC7BlB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBH,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBL,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,aAAa,EAAE,IAAI,CAACA;IACtB,CAAC;EACH;EAEA,OAAO0B,IAAIA,CAACC,IAAI,EAAE;IAChB,IAAIA,IAAI,CAACF,IAAI,KAAK,uBAAuB,EAAE;MACzC,MAAM,IAAIG,SAAS,CAAC,iBAAiB,CAAC;IACxC;IACA,OAAO,IAAI1B,qBAAqB,CAAC,IAAI,EAAEyB,IAAI,CAAC;EAC9C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}