{"ast":null,"code":"import { solve } from 'ml-matrix';\nimport BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\n\n/**\n * @class RobustPolynomialRegression\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree - polynomial degree\n */\nexport default class RobustPolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      robustPolynomial(this, x, y, degree);\n    }\n  }\n  toJSON() {\n    return {\n      name: 'robustPolynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n  _predict(x) {\n    return predict(x, this.powers, this.coefficients);\n  }\n\n  /**\n   * Display the formula\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  /**\n   * Display the formula in LaTeX format\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) + times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n    return `f(x) = ${fn}`;\n  }\n  static load(json) {\n    if (json.name !== 'robustPolynomialRegression') {\n      throw new TypeError('not a RobustPolynomialRegression model');\n    }\n    return new RobustPolynomialRegression(true, json);\n  }\n}\nfunction robustPolynomial(regression, x, y, degree) {\n  let powers = Array(degree).fill(0).map((_, index) => index);\n  const tuples = getRandomTuples(x, y, degree);\n  let min;\n  for (let i = 0; i < tuples.length; i++) {\n    let tuple = tuples[i];\n    let coefficients = calcCoefficients(tuple, powers);\n    let residuals = x.slice();\n    for (let j = 0; j < x.length; j++) {\n      residuals[j] = y[j] - predict(x[j], powers, coefficients);\n      residuals[j] = {\n        residual: residuals[j] * residuals[j],\n        coefficients\n      };\n    }\n    let median = residualsMedian(residuals);\n    if (!min || median.residual < min.residual) {\n      min = median;\n    }\n  }\n  regression.degree = degree;\n  regression.powers = powers;\n  regression.coefficients = min.coefficients;\n}\n\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\nfunction getRandomTuples(x, y, degree) {\n  let len = Math.floor(x.length / degree);\n  let tuples = new Array(len);\n  for (let i = 0; i < x.length; i++) {\n    let pos = Math.floor(Math.random() * len);\n    let counter = 0;\n    while (counter < x.length) {\n      if (!tuples[pos]) {\n        tuples[pos] = [{\n          x: x[i],\n          y: y[i]\n        }];\n        break;\n      } else if (tuples[pos].length < degree) {\n        tuples[pos].push({\n          x: x[i],\n          y: y[i]\n        });\n        break;\n      } else {\n        counter++;\n        pos = (pos + 1) % len;\n      }\n    }\n    if (counter === x.length) {\n      return tuples;\n    }\n  }\n  return tuples;\n}\n\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\nfunction calcCoefficients(tuple, powers) {\n  let X = tuple.slice();\n  let Y = tuple.slice();\n  for (let i = 0; i < X.length; i++) {\n    Y[i] = [tuple[i].y];\n    X[i] = new Array(powers.length);\n    for (let j = 0; j < powers.length; j++) {\n      X[i][j] = Math.pow(tuple[i].x, powers[j]);\n    }\n  }\n  return solve(X, Y).to1DArray();\n}\nfunction predict(x, powers, coefficients) {\n  let y = 0;\n  for (let k = 0; k < powers.length; k++) {\n    y += coefficients[k] * Math.pow(x, powers[k]);\n  }\n  return y;\n}\nfunction residualsMedian(residuals) {\n  residuals.sort((a, b) => a.residual - b.residual);\n  let l = residuals.length;\n  let half = Math.floor(l / 2);\n  return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}","map":{"version":3,"names":["solve","BaseRegression","checkArrayLength","maybeToPrecision","RobustPolynomialRegression","constructor","x","y","degree","powers","coefficients","robustPolynomial","toJSON","name","_predict","predict","toString","precision","_toFormula","toLaTeX","isLaTeX","sup","closeSup","times","fn","str","k","length","charAt","slice","load","json","TypeError","regression","Array","fill","map","_","index","tuples","getRandomTuples","min","i","tuple","calcCoefficients","residuals","j","residual","median","residualsMedian","len","Math","floor","pos","random","counter","push","X","Y","pow","to1DArray","sort","a","b","l","half"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-regression-robust-polynomial/src/index.js"],"sourcesContent":["import { solve } from 'ml-matrix';\nimport BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\n\n/**\n * @class RobustPolynomialRegression\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree - polynomial degree\n */\nexport default class RobustPolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      robustPolynomial(this, x, y, degree);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'robustPolynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  _predict(x) {\n    return predict(x, this.powers, this.coefficients);\n  }\n\n  /**\n   * Display the formula\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  /**\n   * Display the formula in LaTeX format\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'robustPolynomialRegression') {\n      throw new TypeError('not a RobustPolynomialRegression model');\n    }\n    return new RobustPolynomialRegression(true, json);\n  }\n}\n\nfunction robustPolynomial(regression, x, y, degree) {\n  let powers = Array(degree)\n    .fill(0)\n    .map((_, index) => index);\n\n  const tuples = getRandomTuples(x, y, degree);\n\n  let min;\n  for (let i = 0; i < tuples.length; i++) {\n    let tuple = tuples[i];\n    let coefficients = calcCoefficients(tuple, powers);\n\n    let residuals = x.slice();\n    for (let j = 0; j < x.length; j++) {\n      residuals[j] = y[j] - predict(x[j], powers, coefficients);\n      residuals[j] = {\n        residual: residuals[j] * residuals[j],\n        coefficients\n      };\n    }\n\n    let median = residualsMedian(residuals);\n    if (!min || median.residual < min.residual) {\n      min = median;\n    }\n  }\n\n  regression.degree = degree;\n  regression.powers = powers;\n  regression.coefficients = min.coefficients;\n}\n\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\nfunction getRandomTuples(x, y, degree) {\n  let len = Math.floor(x.length / degree);\n  let tuples = new Array(len);\n\n  for (let i = 0; i < x.length; i++) {\n    let pos = Math.floor(Math.random() * len);\n\n    let counter = 0;\n    while (counter < x.length) {\n      if (!tuples[pos]) {\n        tuples[pos] = [\n          {\n            x: x[i],\n            y: y[i]\n          }\n        ];\n        break;\n      } else if (tuples[pos].length < degree) {\n        tuples[pos].push({\n          x: x[i],\n          y: y[i]\n        });\n        break;\n      } else {\n        counter++;\n        pos = (pos + 1) % len;\n      }\n    }\n\n    if (counter === x.length) {\n      return tuples;\n    }\n  }\n  return tuples;\n}\n\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\nfunction calcCoefficients(tuple, powers) {\n  let X = tuple.slice();\n  let Y = tuple.slice();\n  for (let i = 0; i < X.length; i++) {\n    Y[i] = [tuple[i].y];\n    X[i] = new Array(powers.length);\n    for (let j = 0; j < powers.length; j++) {\n      X[i][j] = Math.pow(tuple[i].x, powers[j]);\n    }\n  }\n\n  return solve(X, Y).to1DArray();\n}\n\nfunction predict(x, powers, coefficients) {\n  let y = 0;\n  for (let k = 0; k < powers.length; k++) {\n    y += coefficients[k] * Math.pow(x, powers[k]);\n  }\n  return y;\n}\n\nfunction residualsMedian(residuals) {\n  residuals.sort((a, b) => a.residual - b.residual);\n\n  let l = residuals.length;\n  let half = Math.floor(l / 2);\n  return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,WAAW;AACjC,OAAOC,cAAc,IACnBC,gBAAgB,EAChBC,gBAAgB,QACX,oBAAoB;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,0BAA0B,SAASH,cAAc,CAAC;EACrEI,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAE;IACxB,KAAK,CAAC,CAAC;IACP,IAAIF,CAAC,KAAK,IAAI,EAAE;MACd,IAAI,CAACE,MAAM,GAAGD,CAAC,CAACC,MAAM;MACtB,IAAI,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM;MACtB,IAAI,CAACC,YAAY,GAAGH,CAAC,CAACG,YAAY;IACpC,CAAC,MAAM;MACLR,gBAAgB,CAACI,CAAC,EAAEC,CAAC,CAAC;MACtBI,gBAAgB,CAAC,IAAI,EAAEL,CAAC,EAAEC,CAAC,EAAEC,MAAM,CAAC;IACtC;EACF;EAEAI,MAAMA,CAAA,EAAG;IACP,OAAO;MACLC,IAAI,EAAE,4BAA4B;MAClCL,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,YAAY,EAAE,IAAI,CAACA;IACrB,CAAC;EACH;EAEAI,QAAQA,CAACR,CAAC,EAAE;IACV,OAAOS,OAAO,CAACT,CAAC,EAAE,IAAI,CAACG,MAAM,EAAE,IAAI,CAACC,YAAY,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;EACEM,QAAQA,CAACC,SAAS,EAAE;IAClB,OAAO,IAAI,CAACC,UAAU,CAACD,SAAS,EAAE,KAAK,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;EACEE,OAAOA,CAACF,SAAS,EAAE;IACjB,OAAO,IAAI,CAACC,UAAU,CAACD,SAAS,EAAE,IAAI,CAAC;EACzC;EAEAC,UAAUA,CAACD,SAAS,EAAEG,OAAO,EAAE;IAC7B,IAAIC,GAAG,GAAG,GAAG;IACb,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,KAAK,GAAG,KAAK;IACjB,IAAIH,OAAO,EAAE;MACXC,GAAG,GAAG,IAAI;MACVC,QAAQ,GAAG,GAAG;MACdC,KAAK,GAAG,EAAE;IACZ;IAEA,IAAIC,EAAE,GAAG,EAAE;IACX,IAAIC,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChB,YAAY,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;MACjDD,GAAG,GAAG,EAAE;MACR,IAAI,IAAI,CAACf,YAAY,CAACgB,CAAC,CAAC,KAAK,CAAC,EAAE;QAC9B,IAAI,IAAI,CAACjB,MAAM,CAACiB,CAAC,CAAC,KAAK,CAAC,EAAE;UACxBD,GAAG,GAAGtB,gBAAgB,CAAC,IAAI,CAACO,YAAY,CAACgB,CAAC,CAAC,EAAET,SAAS,CAAC;QACzD,CAAC,MAAM;UACL,IAAI,IAAI,CAACR,MAAM,CAACiB,CAAC,CAAC,KAAK,CAAC,EAAE;YACxBD,GAAG,GAAG,GAAGtB,gBAAgB,CAAC,IAAI,CAACO,YAAY,CAACgB,CAAC,CAAC,EAAET,SAAS,CAAC,GACxDM,KAAK,GAAG;UACZ,CAAC,MAAM;YACLE,GAAG,GAAG,GAAGtB,gBAAgB,CAAC,IAAI,CAACO,YAAY,CAACgB,CAAC,CAAC,EAAET,SAAS,CAAC,GACxDM,KAAK,IAAIF,GAAG,GAAG,IAAI,CAACZ,MAAM,CAACiB,CAAC,CAAC,GAAGJ,QAAQ,EAAE;UAC9C;QACF;QAEA,IAAI,IAAI,CAACZ,YAAY,CAACgB,CAAC,CAAC,GAAG,CAAC,IAAIA,CAAC,KAAK,IAAI,CAAChB,YAAY,CAACiB,MAAM,GAAG,CAAC,EAAE;UAClEF,GAAG,GAAG,MAAMA,GAAG,EAAE;QACnB,CAAC,MAAM,IAAIC,CAAC,KAAK,IAAI,CAAChB,YAAY,CAACiB,MAAM,GAAG,CAAC,EAAE;UAC7CF,GAAG,GAAG,IAAIA,GAAG,EAAE;QACjB;MACF;MACAD,EAAE,GAAGC,GAAG,GAAGD,EAAE;IACf;IACA,IAAIA,EAAE,CAACI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACxBJ,EAAE,GAAGA,EAAE,CAACK,KAAK,CAAC,CAAC,CAAC;IAClB;IAEA,OAAO,UAAUL,EAAE,EAAE;EACvB;EAEA,OAAOM,IAAIA,CAACC,IAAI,EAAE;IAChB,IAAIA,IAAI,CAAClB,IAAI,KAAK,4BAA4B,EAAE;MAC9C,MAAM,IAAImB,SAAS,CAAC,wCAAwC,CAAC;IAC/D;IACA,OAAO,IAAI5B,0BAA0B,CAAC,IAAI,EAAE2B,IAAI,CAAC;EACnD;AACF;AAEA,SAASpB,gBAAgBA,CAACsB,UAAU,EAAE3B,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAE;EAClD,IAAIC,MAAM,GAAGyB,KAAK,CAAC1B,MAAM,CAAC,CACvB2B,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,CAAC;EAE3B,MAAMC,MAAM,GAAGC,eAAe,CAAClC,CAAC,EAAEC,CAAC,EAAEC,MAAM,CAAC;EAE5C,IAAIiC,GAAG;EACP,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACZ,MAAM,EAAEe,CAAC,EAAE,EAAE;IACtC,IAAIC,KAAK,GAAGJ,MAAM,CAACG,CAAC,CAAC;IACrB,IAAIhC,YAAY,GAAGkC,gBAAgB,CAACD,KAAK,EAAElC,MAAM,CAAC;IAElD,IAAIoC,SAAS,GAAGvC,CAAC,CAACuB,KAAK,CAAC,CAAC;IACzB,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,CAAC,CAACqB,MAAM,EAAEmB,CAAC,EAAE,EAAE;MACjCD,SAAS,CAACC,CAAC,CAAC,GAAGvC,CAAC,CAACuC,CAAC,CAAC,GAAG/B,OAAO,CAACT,CAAC,CAACwC,CAAC,CAAC,EAAErC,MAAM,EAAEC,YAAY,CAAC;MACzDmC,SAAS,CAACC,CAAC,CAAC,GAAG;QACbC,QAAQ,EAAEF,SAAS,CAACC,CAAC,CAAC,GAAGD,SAAS,CAACC,CAAC,CAAC;QACrCpC;MACF,CAAC;IACH;IAEA,IAAIsC,MAAM,GAAGC,eAAe,CAACJ,SAAS,CAAC;IACvC,IAAI,CAACJ,GAAG,IAAIO,MAAM,CAACD,QAAQ,GAAGN,GAAG,CAACM,QAAQ,EAAE;MAC1CN,GAAG,GAAGO,MAAM;IACd;EACF;EAEAf,UAAU,CAACzB,MAAM,GAAGA,MAAM;EAC1ByB,UAAU,CAACxB,MAAM,GAAGA,MAAM;EAC1BwB,UAAU,CAACvB,YAAY,GAAG+B,GAAG,CAAC/B,YAAY;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8B,eAAeA,CAAClC,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAE;EACrC,IAAI0C,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC9C,CAAC,CAACqB,MAAM,GAAGnB,MAAM,CAAC;EACvC,IAAI+B,MAAM,GAAG,IAAIL,KAAK,CAACgB,GAAG,CAAC;EAE3B,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpC,CAAC,CAACqB,MAAM,EAAEe,CAAC,EAAE,EAAE;IACjC,IAAIW,GAAG,GAAGF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACG,MAAM,CAAC,CAAC,GAAGJ,GAAG,CAAC;IAEzC,IAAIK,OAAO,GAAG,CAAC;IACf,OAAOA,OAAO,GAAGjD,CAAC,CAACqB,MAAM,EAAE;MACzB,IAAI,CAACY,MAAM,CAACc,GAAG,CAAC,EAAE;QAChBd,MAAM,CAACc,GAAG,CAAC,GAAG,CACZ;UACE/C,CAAC,EAAEA,CAAC,CAACoC,CAAC,CAAC;UACPnC,CAAC,EAAEA,CAAC,CAACmC,CAAC;QACR,CAAC,CACF;QACD;MACF,CAAC,MAAM,IAAIH,MAAM,CAACc,GAAG,CAAC,CAAC1B,MAAM,GAAGnB,MAAM,EAAE;QACtC+B,MAAM,CAACc,GAAG,CAAC,CAACG,IAAI,CAAC;UACflD,CAAC,EAAEA,CAAC,CAACoC,CAAC,CAAC;UACPnC,CAAC,EAAEA,CAAC,CAACmC,CAAC;QACR,CAAC,CAAC;QACF;MACF,CAAC,MAAM;QACLa,OAAO,EAAE;QACTF,GAAG,GAAG,CAACA,GAAG,GAAG,CAAC,IAAIH,GAAG;MACvB;IACF;IAEA,IAAIK,OAAO,KAAKjD,CAAC,CAACqB,MAAM,EAAE;MACxB,OAAOY,MAAM;IACf;EACF;EACA,OAAOA,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,gBAAgBA,CAACD,KAAK,EAAElC,MAAM,EAAE;EACvC,IAAIgD,CAAC,GAAGd,KAAK,CAACd,KAAK,CAAC,CAAC;EACrB,IAAI6B,CAAC,GAAGf,KAAK,CAACd,KAAK,CAAC,CAAC;EACrB,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGe,CAAC,CAAC9B,MAAM,EAAEe,CAAC,EAAE,EAAE;IACjCgB,CAAC,CAAChB,CAAC,CAAC,GAAG,CAACC,KAAK,CAACD,CAAC,CAAC,CAACnC,CAAC,CAAC;IACnBkD,CAAC,CAACf,CAAC,CAAC,GAAG,IAAIR,KAAK,CAACzB,MAAM,CAACkB,MAAM,CAAC;IAC/B,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrC,MAAM,CAACkB,MAAM,EAAEmB,CAAC,EAAE,EAAE;MACtCW,CAAC,CAACf,CAAC,CAAC,CAACI,CAAC,CAAC,GAAGK,IAAI,CAACQ,GAAG,CAAChB,KAAK,CAACD,CAAC,CAAC,CAACpC,CAAC,EAAEG,MAAM,CAACqC,CAAC,CAAC,CAAC;IAC3C;EACF;EAEA,OAAO9C,KAAK,CAACyD,CAAC,EAAEC,CAAC,CAAC,CAACE,SAAS,CAAC,CAAC;AAChC;AAEA,SAAS7C,OAAOA,CAACT,CAAC,EAAEG,MAAM,EAAEC,YAAY,EAAE;EACxC,IAAIH,CAAC,GAAG,CAAC;EACT,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,MAAM,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;IACtCnB,CAAC,IAAIG,YAAY,CAACgB,CAAC,CAAC,GAAGyB,IAAI,CAACQ,GAAG,CAACrD,CAAC,EAAEG,MAAM,CAACiB,CAAC,CAAC,CAAC;EAC/C;EACA,OAAOnB,CAAC;AACV;AAEA,SAAS0C,eAAeA,CAACJ,SAAS,EAAE;EAClCA,SAAS,CAACgB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACf,QAAQ,GAAGgB,CAAC,CAAChB,QAAQ,CAAC;EAEjD,IAAIiB,CAAC,GAAGnB,SAAS,CAAClB,MAAM;EACxB,IAAIsC,IAAI,GAAGd,IAAI,CAACC,KAAK,CAACY,CAAC,GAAG,CAAC,CAAC;EAC5B,OAAOA,CAAC,GAAG,CAAC,KAAK,CAAC,GAAGnB,SAAS,CAACoB,IAAI,GAAG,CAAC,CAAC,GAAGpB,SAAS,CAACoB,IAAI,CAAC;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}