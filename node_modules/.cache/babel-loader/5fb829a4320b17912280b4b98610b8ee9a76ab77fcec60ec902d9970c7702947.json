{"ast":null,"code":"// Those methods can only be called on binary images, but we won't lose time to check.\nconst bitMethods = {\n  /**\n   * Get the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   * @return {number} 0: bit is unset, 1: bit is set\n   */\n  getBit(pixel) {\n    return this.data[getSlot(pixel)] & 1 << getShift(pixel) ? 1 : 0;\n  },\n  /**\n   * Set the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  setBit(pixel) {\n    this.data[getSlot(pixel)] |= 1 << getShift(pixel);\n  },\n  /**\n   * Clear the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  clearBit(pixel) {\n    this.data[getSlot(pixel)] &= ~(1 << getShift(pixel));\n  },\n  /**\n   * Toggle (invert) the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  toggleBit(pixel) {\n    this.data[getSlot(pixel)] ^= 1 << getShift(pixel);\n  },\n  /**\n   * Get the bit of a pixel using coordinates.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @return {number} 0: bit is unset, 1: bit is set\n   */\n  getBitXY(x, y) {\n    if (x >= this.width || y >= this.height) return 0;\n    return this.getBit(y * this.width + x);\n  },\n  /**\n   * Set the bit of a pixel using coordinates.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  setBitXY(x, y) {\n    this.setBit(y * this.width + x);\n  },\n  /**\n   * Clear the bit of a pixel using coordinates.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  clearBitXY(x, y) {\n    this.clearBit(y * this.width + x);\n  },\n  /**\n   * Toggle (invert) the bit of a pixel using coordinates.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  toggleBitXY(x, y) {\n    this.toggleBit(y * this.width + x);\n  }\n};\nfunction getSlot(pixel) {\n  return pixel >> 3;\n}\nfunction getShift(pixel) {\n  return 7 - (pixel & 0b00000111);\n}\nexport default function setBitMethods(Image) {\n  for (const i in bitMethods) {\n    Image.prototype[i] = bitMethods[i];\n  }\n}","map":{"version":3,"names":["bitMethods","getBit","pixel","data","getSlot","getShift","setBit","clearBit","toggleBit","getBitXY","x","y","width","height","setBitXY","clearBitXY","toggleBitXY","setBitMethods","Image","i","prototype"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/core/bitMethods.js"],"sourcesContent":["// Those methods can only be called on binary images, but we won't lose time to check.\nconst bitMethods = {\n  /**\n   * Get the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   * @return {number} 0: bit is unset, 1: bit is set\n   */\n  getBit(pixel) {\n    return this.data[getSlot(pixel)] & (1 << getShift(pixel)) ? 1 : 0;\n  },\n\n  /**\n   * Set the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  setBit(pixel) {\n    this.data[getSlot(pixel)] |= 1 << getShift(pixel);\n  },\n\n  /**\n   * Clear the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  clearBit(pixel) {\n    this.data[getSlot(pixel)] &= ~(1 << getShift(pixel));\n  },\n\n  /**\n   * Toggle (invert) the bit of a pixel using a pixel index.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} pixel - The pixel index which corresponds to `x * image.width + y`\n   */\n  toggleBit(pixel) {\n    this.data[getSlot(pixel)] ^= 1 << getShift(pixel);\n  },\n\n  /**\n   * Get the bit of a pixel using coordinates.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   * @return {number} 0: bit is unset, 1: bit is set\n   */\n  getBitXY(x, y) {\n    if (x >= this.width || y >= this.height) return 0;\n    return this.getBit(y * this.width + x);\n  },\n\n  /**\n   * Set the bit of a pixel using coordinates.\n   * This method can only be called on binary images.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  setBitXY(x, y) {\n    this.setBit(y * this.width + x);\n  },\n\n  /**\n   * Clear the bit of a pixel using coordinates.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  clearBitXY(x, y) {\n    this.clearBit(y * this.width + x);\n  },\n\n  /**\n   * Toggle (invert) the bit of a pixel using coordinates.\n   * @memberof Image\n   * @instance\n   * @param {number} x - x coordinate (0 = left)\n   * @param {number} y - y coordinate (0 = top)\n   */\n  toggleBitXY(x, y) {\n    this.toggleBit(y * this.width + x);\n  },\n};\n\nfunction getSlot(pixel) {\n  return pixel >> 3;\n}\n\nfunction getShift(pixel) {\n  return 7 - (pixel & 0b00000111);\n}\n\nexport default function setBitMethods(Image) {\n  for (const i in bitMethods) {\n    Image.prototype[i] = bitMethods[i];\n  }\n}\n"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG;EACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,KAAK,EAAE;IACZ,OAAO,IAAI,CAACC,IAAI,CAACC,OAAO,CAACF,KAAK,CAAC,CAAC,GAAI,CAAC,IAAIG,QAAQ,CAACH,KAAK,CAAE,GAAG,CAAC,GAAG,CAAC;EACnE,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,MAAMA,CAACJ,KAAK,EAAE;IACZ,IAAI,CAACC,IAAI,CAACC,OAAO,CAACF,KAAK,CAAC,CAAC,IAAI,CAAC,IAAIG,QAAQ,CAACH,KAAK,CAAC;EACnD,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,QAAQA,CAACL,KAAK,EAAE;IACd,IAAI,CAACC,IAAI,CAACC,OAAO,CAACF,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,IAAIG,QAAQ,CAACH,KAAK,CAAC,CAAC;EACtD,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEM,SAASA,CAACN,KAAK,EAAE;IACf,IAAI,CAACC,IAAI,CAACC,OAAO,CAACF,KAAK,CAAC,CAAC,IAAI,CAAC,IAAIG,QAAQ,CAACH,KAAK,CAAC;EACnD,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,QAAQA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACb,IAAID,CAAC,IAAI,IAAI,CAACE,KAAK,IAAID,CAAC,IAAI,IAAI,CAACE,MAAM,EAAE,OAAO,CAAC;IACjD,OAAO,IAAI,CAACZ,MAAM,CAACU,CAAC,GAAG,IAAI,CAACC,KAAK,GAAGF,CAAC,CAAC;EACxC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,QAAQA,CAACJ,CAAC,EAAEC,CAAC,EAAE;IACb,IAAI,CAACL,MAAM,CAACK,CAAC,GAAG,IAAI,CAACC,KAAK,GAAGF,CAAC,CAAC;EACjC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,UAAUA,CAACL,CAAC,EAAEC,CAAC,EAAE;IACf,IAAI,CAACJ,QAAQ,CAACI,CAAC,GAAG,IAAI,CAACC,KAAK,GAAGF,CAAC,CAAC;EACnC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEM,WAAWA,CAACN,CAAC,EAAEC,CAAC,EAAE;IAChB,IAAI,CAACH,SAAS,CAACG,CAAC,GAAG,IAAI,CAACC,KAAK,GAAGF,CAAC,CAAC;EACpC;AACF,CAAC;AAED,SAASN,OAAOA,CAACF,KAAK,EAAE;EACtB,OAAOA,KAAK,IAAI,CAAC;AACnB;AAEA,SAASG,QAAQA,CAACH,KAAK,EAAE;EACvB,OAAO,CAAC,IAAIA,KAAK,GAAG,UAAU,CAAC;AACjC;AAEA,eAAe,SAASe,aAAaA,CAACC,KAAK,EAAE;EAC3C,KAAK,MAAMC,CAAC,IAAInB,UAAU,EAAE;IAC1BkB,KAAK,CAACE,SAAS,CAACD,CAAC,CAAC,GAAGnB,UAAU,CAACmB,CAAC,CAAC;EACpC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}