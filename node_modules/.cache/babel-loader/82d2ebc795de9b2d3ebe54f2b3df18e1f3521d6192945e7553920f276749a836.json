{"ast":null,"code":"import Shape from '../../../util/Shape';\nimport RoiMap from '../RoiMap';\n\n/**\n * @memberof RoiManager\n * @instance\n * @param {Array<Array<number>>} pointsToPaint - an array of points\n * @param {object} [options]\n * @return {RoiMap}\n */\nexport default function fromPoints(pointsToPaint, options = {}) {\n  let shape = new Shape(options);\n\n  // based on a binary image we will create plenty of small images\n  let data = new Int16Array(this.size); // maxValue: 32767, minValue: -32768\n  let positiveID = 0;\n  let shapePoints = shape.getPoints();\n  for (let i = 0; i < pointsToPaint.length; i++) {\n    positiveID++;\n    let xP = pointsToPaint[i][0];\n    let yP = pointsToPaint[i][1];\n    for (let j = 0; j < shapePoints.length; j++) {\n      let xS = shapePoints[j][0];\n      let yS = shapePoints[j][1];\n      if (xP + xS >= 0 && yP + yS >= 0 && xP + xS < this.width && yP + yS < this.height) {\n        data[xP + xS + (yP + yS) * this.width] = positiveID;\n      }\n    }\n  }\n  return new RoiMap(this, data);\n}","map":{"version":3,"names":["Shape","RoiMap","fromPoints","pointsToPaint","options","shape","data","Int16Array","size","positiveID","shapePoints","getPoints","i","length","xP","yP","j","xS","yS","width","height"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/roi/creator/fromPoints.js"],"sourcesContent":["import Shape from '../../../util/Shape';\nimport RoiMap from '../RoiMap';\n\n/**\n * @memberof RoiManager\n * @instance\n * @param {Array<Array<number>>} pointsToPaint - an array of points\n * @param {object} [options]\n * @return {RoiMap}\n */\nexport default function fromPoints(pointsToPaint, options = {}) {\n  let shape = new Shape(options);\n\n  // based on a binary image we will create plenty of small images\n  let data = new Int16Array(this.size); // maxValue: 32767, minValue: -32768\n  let positiveID = 0;\n  let shapePoints = shape.getPoints();\n  for (let i = 0; i < pointsToPaint.length; i++) {\n    positiveID++;\n    let xP = pointsToPaint[i][0];\n    let yP = pointsToPaint[i][1];\n    for (let j = 0; j < shapePoints.length; j++) {\n      let xS = shapePoints[j][0];\n      let yS = shapePoints[j][1];\n      if (\n        xP + xS >= 0 &&\n        yP + yS >= 0 &&\n        xP + xS < this.width &&\n        yP + yS < this.height\n      ) {\n        data[xP + xS + (yP + yS) * this.width] = positiveID;\n      }\n    }\n  }\n\n  return new RoiMap(this, data);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,qBAAqB;AACvC,OAAOC,MAAM,MAAM,WAAW;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAACC,aAAa,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC9D,IAAIC,KAAK,GAAG,IAAIL,KAAK,CAACI,OAAO,CAAC;;EAE9B;EACA,IAAIE,IAAI,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;EACtC,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,WAAW,GAAGL,KAAK,CAACM,SAAS,CAAC,CAAC;EACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,aAAa,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IAC7CH,UAAU,EAAE;IACZ,IAAIK,EAAE,GAAGX,aAAa,CAACS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAIG,EAAE,GAAGZ,aAAa,CAACS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,WAAW,CAACG,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC3C,IAAIC,EAAE,GAAGP,WAAW,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1B,IAAIE,EAAE,GAAGR,WAAW,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1B,IACEF,EAAE,GAAGG,EAAE,IAAI,CAAC,IACZF,EAAE,GAAGG,EAAE,IAAI,CAAC,IACZJ,EAAE,GAAGG,EAAE,GAAG,IAAI,CAACE,KAAK,IACpBJ,EAAE,GAAGG,EAAE,GAAG,IAAI,CAACE,MAAM,EACrB;QACAd,IAAI,CAACQ,EAAE,GAAGG,EAAE,GAAG,CAACF,EAAE,GAAGG,EAAE,IAAI,IAAI,CAACC,KAAK,CAAC,GAAGV,UAAU;MACrD;IACF;EACF;EAEA,OAAO,IAAIR,MAAM,CAAC,IAAI,EAAEK,IAAI,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}