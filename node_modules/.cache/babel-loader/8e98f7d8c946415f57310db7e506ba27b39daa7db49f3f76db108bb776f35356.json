{"ast":null,"code":"import { factorDimensions } from '../../../util/converter';\nimport Image from '../../Image';\nimport { validInterpolations, checkInterpolation } from '../../internal/checks';\nimport nearestNeighbor from './nearestNeighbor';\n\n/**\n * Resize an image\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.width=this.width] - new width\n * @param {number} [options.height=this.height] - new height\n * @param {number} [options.factor=1] - scaling factor (applied to the new width and height values)\n * @param {InterpolationAlgorithm} [options.interpolation='nearestNeighbor']\n * @param {boolean} [options.preserveAspectRatio=true] - preserve width/height ratio if only one of them is defined\n * @return {Image}\n */\nexport default function resize(options = {}) {\n  const {\n    factor = 1,\n    interpolation = validInterpolations.nearestneighbor,\n    preserveAspectRatio = true\n  } = options;\n  const interpolationToUse = checkInterpolation(interpolation);\n  let width = options.width;\n  let height = options.height;\n  if (!width) {\n    if (height && preserveAspectRatio) {\n      width = Math.round(height * (this.width / this.height));\n    } else {\n      width = this.width;\n    }\n  }\n  if (!height) {\n    if (preserveAspectRatio) {\n      height = Math.round(width * (this.height / this.width));\n    } else {\n      height = this.height;\n    }\n  }\n  ({\n    width,\n    height\n  } = factorDimensions(factor, width, height));\n  if (width === this.width && height === this.height) {\n    const newImage = this.clone();\n    newImage.position = [0, 0];\n    return newImage;\n  }\n  let shiftX = Math.round((this.width - width) / 2);\n  let shiftY = Math.round((this.height - height) / 2);\n  const newImage = Image.createFrom(this, {\n    width,\n    height,\n    position: [shiftX, shiftY]\n  });\n  switch (interpolationToUse) {\n    case validInterpolations.nearestneighbor:\n      nearestNeighbor.call(this, newImage, width, height);\n      break;\n    default:\n      throw new Error(`unsupported resize interpolation: ${interpolationToUse}`);\n  }\n  return newImage;\n}","map":{"version":3,"names":["factorDimensions","Image","validInterpolations","checkInterpolation","nearestNeighbor","resize","options","factor","interpolation","nearestneighbor","preserveAspectRatio","interpolationToUse","width","height","Math","round","newImage","clone","position","shiftX","shiftY","createFrom","call","Error"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/resize/resize.js"],"sourcesContent":["import { factorDimensions } from '../../../util/converter';\nimport Image from '../../Image';\nimport { validInterpolations, checkInterpolation } from '../../internal/checks';\n\nimport nearestNeighbor from './nearestNeighbor';\n\n/**\n * Resize an image\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {number} [options.width=this.width] - new width\n * @param {number} [options.height=this.height] - new height\n * @param {number} [options.factor=1] - scaling factor (applied to the new width and height values)\n * @param {InterpolationAlgorithm} [options.interpolation='nearestNeighbor']\n * @param {boolean} [options.preserveAspectRatio=true] - preserve width/height ratio if only one of them is defined\n * @return {Image}\n */\nexport default function resize(options = {}) {\n  const {\n    factor = 1,\n    interpolation = validInterpolations.nearestneighbor,\n    preserveAspectRatio = true,\n  } = options;\n\n  const interpolationToUse = checkInterpolation(interpolation);\n\n  let width = options.width;\n  let height = options.height;\n\n  if (!width) {\n    if (height && preserveAspectRatio) {\n      width = Math.round(height * (this.width / this.height));\n    } else {\n      width = this.width;\n    }\n  }\n  if (!height) {\n    if (preserveAspectRatio) {\n      height = Math.round(width * (this.height / this.width));\n    } else {\n      height = this.height;\n    }\n  }\n\n  ({ width, height } = factorDimensions(factor, width, height));\n\n  if (width === this.width && height === this.height) {\n    const newImage = this.clone();\n    newImage.position = [0, 0];\n    return newImage;\n  }\n\n  let shiftX = Math.round((this.width - width) / 2);\n  let shiftY = Math.round((this.height - height) / 2);\n  const newImage = Image.createFrom(this, {\n    width,\n    height,\n    position: [shiftX, shiftY],\n  });\n\n  switch (interpolationToUse) {\n    case validInterpolations.nearestneighbor:\n      nearestNeighbor.call(this, newImage, width, height);\n      break;\n    default:\n      throw new Error(\n        `unsupported resize interpolation: ${interpolationToUse}`,\n      );\n  }\n\n  return newImage;\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,yBAAyB;AAC1D,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,mBAAmB,EAAEC,kBAAkB,QAAQ,uBAAuB;AAE/E,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,MAAMA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3C,MAAM;IACJC,MAAM,GAAG,CAAC;IACVC,aAAa,GAAGN,mBAAmB,CAACO,eAAe;IACnDC,mBAAmB,GAAG;EACxB,CAAC,GAAGJ,OAAO;EAEX,MAAMK,kBAAkB,GAAGR,kBAAkB,CAACK,aAAa,CAAC;EAE5D,IAAII,KAAK,GAAGN,OAAO,CAACM,KAAK;EACzB,IAAIC,MAAM,GAAGP,OAAO,CAACO,MAAM;EAE3B,IAAI,CAACD,KAAK,EAAE;IACV,IAAIC,MAAM,IAAIH,mBAAmB,EAAE;MACjCE,KAAK,GAAGE,IAAI,CAACC,KAAK,CAACF,MAAM,IAAI,IAAI,CAACD,KAAK,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC;IACzD,CAAC,MAAM;MACLD,KAAK,GAAG,IAAI,CAACA,KAAK;IACpB;EACF;EACA,IAAI,CAACC,MAAM,EAAE;IACX,IAAIH,mBAAmB,EAAE;MACvBG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,IAAI,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,KAAK,CAAC,CAAC;IACzD,CAAC,MAAM;MACLC,MAAM,GAAG,IAAI,CAACA,MAAM;IACtB;EACF;EAEA,CAAC;IAAED,KAAK;IAAEC;EAAO,CAAC,GAAGb,gBAAgB,CAACO,MAAM,EAAEK,KAAK,EAAEC,MAAM,CAAC;EAE5D,IAAID,KAAK,KAAK,IAAI,CAACA,KAAK,IAAIC,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;IAClD,MAAMG,QAAQ,GAAG,IAAI,CAACC,KAAK,CAAC,CAAC;IAC7BD,QAAQ,CAACE,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAC1B,OAAOF,QAAQ;EACjB;EAEA,IAAIG,MAAM,GAAGL,IAAI,CAACC,KAAK,CAAC,CAAC,IAAI,CAACH,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;EACjD,IAAIQ,MAAM,GAAGN,IAAI,CAACC,KAAK,CAAC,CAAC,IAAI,CAACF,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;EACnD,MAAMG,QAAQ,GAAGf,KAAK,CAACoB,UAAU,CAAC,IAAI,EAAE;IACtCT,KAAK;IACLC,MAAM;IACNK,QAAQ,EAAE,CAACC,MAAM,EAAEC,MAAM;EAC3B,CAAC,CAAC;EAEF,QAAQT,kBAAkB;IACxB,KAAKT,mBAAmB,CAACO,eAAe;MACtCL,eAAe,CAACkB,IAAI,CAAC,IAAI,EAAEN,QAAQ,EAAEJ,KAAK,EAAEC,MAAM,CAAC;MACnD;IACF;MACE,MAAM,IAAIU,KAAK,CACb,qCAAqCZ,kBAAkB,EACzD,CAAC;EACL;EAEA,OAAOK,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}