{"ast":null,"code":"import { directConvolution } from 'ml-convolution';\nexport default function convolutionSeparable(data, separatedKernel, width, height) {\n  const result = new Array(data.length);\n  let tmp, conv, offset, kernel;\n  kernel = separatedKernel[1];\n  offset = (kernel.length - 1) / 2;\n  conv = new Array(width + kernel.length - 1);\n  tmp = new Array(width);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      tmp[x] = data[y * width + x];\n    }\n    directConvolution(tmp, kernel, conv);\n    for (let x = 0; x < width; x++) {\n      result[y * width + x] = conv[offset + x];\n    }\n  }\n  kernel = separatedKernel[0];\n  offset = (kernel.length - 1) / 2;\n  conv = new Array(height + kernel.length - 1);\n  tmp = new Array(height);\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      tmp[y] = result[y * width + x];\n    }\n    directConvolution(tmp, kernel, conv);\n    for (let y = 0; y < height; y++) {\n      result[y * width + x] = conv[offset + y];\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["directConvolution","convolutionSeparable","data","separatedKernel","width","height","result","Array","length","tmp","conv","offset","kernel","y","x"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/operator/convolutionSeparable.js"],"sourcesContent":["import { directConvolution } from 'ml-convolution';\n\nexport default function convolutionSeparable(\n  data,\n  separatedKernel,\n  width,\n  height,\n) {\n  const result = new Array(data.length);\n  let tmp, conv, offset, kernel;\n\n  kernel = separatedKernel[1];\n  offset = (kernel.length - 1) / 2;\n  conv = new Array(width + kernel.length - 1);\n  tmp = new Array(width);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      tmp[x] = data[y * width + x];\n    }\n    directConvolution(tmp, kernel, conv);\n    for (let x = 0; x < width; x++) {\n      result[y * width + x] = conv[offset + x];\n    }\n  }\n\n  kernel = separatedKernel[0];\n  offset = (kernel.length - 1) / 2;\n  conv = new Array(height + kernel.length - 1);\n  tmp = new Array(height);\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      tmp[y] = result[y * width + x];\n    }\n    directConvolution(tmp, kernel, conv);\n    for (let y = 0; y < height; y++) {\n      result[y * width + x] = conv[offset + y];\n    }\n  }\n  return result;\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gBAAgB;AAElD,eAAe,SAASC,oBAAoBA,CAC1CC,IAAI,EACJC,eAAe,EACfC,KAAK,EACLC,MAAM,EACN;EACA,MAAMC,MAAM,GAAG,IAAIC,KAAK,CAACL,IAAI,CAACM,MAAM,CAAC;EACrC,IAAIC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM;EAE7BA,MAAM,GAAGT,eAAe,CAAC,CAAC,CAAC;EAC3BQ,MAAM,GAAG,CAACC,MAAM,CAACJ,MAAM,GAAG,CAAC,IAAI,CAAC;EAChCE,IAAI,GAAG,IAAIH,KAAK,CAACH,KAAK,GAAGQ,MAAM,CAACJ,MAAM,GAAG,CAAC,CAAC;EAC3CC,GAAG,GAAG,IAAIF,KAAK,CAACH,KAAK,CAAC;EACtB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,EAAEQ,CAAC,EAAE,EAAE;IAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,EAAEU,CAAC,EAAE,EAAE;MAC9BL,GAAG,CAACK,CAAC,CAAC,GAAGZ,IAAI,CAACW,CAAC,GAAGT,KAAK,GAAGU,CAAC,CAAC;IAC9B;IACAd,iBAAiB,CAACS,GAAG,EAAEG,MAAM,EAAEF,IAAI,CAAC;IACpC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,EAAEU,CAAC,EAAE,EAAE;MAC9BR,MAAM,CAACO,CAAC,GAAGT,KAAK,GAAGU,CAAC,CAAC,GAAGJ,IAAI,CAACC,MAAM,GAAGG,CAAC,CAAC;IAC1C;EACF;EAEAF,MAAM,GAAGT,eAAe,CAAC,CAAC,CAAC;EAC3BQ,MAAM,GAAG,CAACC,MAAM,CAACJ,MAAM,GAAG,CAAC,IAAI,CAAC;EAChCE,IAAI,GAAG,IAAIH,KAAK,CAACF,MAAM,GAAGO,MAAM,CAACJ,MAAM,GAAG,CAAC,CAAC;EAC5CC,GAAG,GAAG,IAAIF,KAAK,CAACF,MAAM,CAAC;EACvB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,EAAEU,CAAC,EAAE,EAAE;IAC9B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,EAAEQ,CAAC,EAAE,EAAE;MAC/BJ,GAAG,CAACI,CAAC,CAAC,GAAGP,MAAM,CAACO,CAAC,GAAGT,KAAK,GAAGU,CAAC,CAAC;IAChC;IACAd,iBAAiB,CAACS,GAAG,EAAEG,MAAM,EAAEF,IAAI,CAAC;IACpC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,EAAEQ,CAAC,EAAE,EAAE;MAC/BP,MAAM,CAACO,CAAC,GAAGT,KAAK,GAAGU,CAAC,CAAC,GAAGJ,IAAI,CAACC,MAAM,GAAGE,CAAC,CAAC;IAC1C;EACF;EACA,OAAOP,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}