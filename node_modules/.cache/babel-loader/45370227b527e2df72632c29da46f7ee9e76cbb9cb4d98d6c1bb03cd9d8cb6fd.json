{"ast":null,"code":"/**\n * Fast Fourier Transform module\n * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n */\nvar FFT = function () {\n  var FFT;\n  if (typeof exports !== 'undefined') {\n    FFT = exports; // for CommonJS\n  } else {\n    FFT = {};\n  }\n  var version = {\n    release: '0.3.0',\n    date: '2013-03'\n  };\n  FFT.toString = function () {\n    return \"version \" + version.release + \", released \" + version.date;\n  };\n\n  // core operations\n  var _n = 0,\n    // order\n    _bitrev = null,\n    // bit reversal table\n    _cstb = null; // sin/cos table\n\n  var core = {\n    init: function (n) {\n      if (n !== 0 && (n & n - 1) === 0) {\n        _n = n;\n        core._initArray();\n        core._makeBitReversalTable();\n        core._makeCosSinTable();\n      } else {\n        throw new Error(\"init: radix-2 required\");\n      }\n    },\n    // 1D-FFT\n    fft1d: function (re, im) {\n      core.fft(re, im, 1);\n    },\n    // 1D-IFFT\n    ifft1d: function (re, im) {\n      var n = 1 / _n;\n      core.fft(re, im, -1);\n      for (var i = 0; i < _n; i++) {\n        re[i] *= n;\n        im[i] *= n;\n      }\n    },\n    // 1D-IFFT\n    bt1d: function (re, im) {\n      core.fft(re, im, -1);\n    },\n    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n    fft2d: function (re, im) {\n      var tre = [],\n        tim = [],\n        i = 0;\n      // x-axis\n      for (var y = 0; y < _n; y++) {\n        i = y * _n;\n        for (var x1 = 0; x1 < _n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.fft1d(tre, tim);\n        for (var x2 = 0; x2 < _n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for (var x = 0; x < _n; x++) {\n        for (var y1 = 0; y1 < _n; y1++) {\n          i = x + y1 * _n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.fft1d(tre, tim);\n        for (var y2 = 0; y2 < _n; y2++) {\n          i = x + y2 * _n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // 2D-IFFT\n    ifft2d: function (re, im) {\n      var tre = [],\n        tim = [],\n        i = 0;\n      // x-axis\n      for (var y = 0; y < _n; y++) {\n        i = y * _n;\n        for (var x1 = 0; x1 < _n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.ifft1d(tre, tim);\n        for (var x2 = 0; x2 < _n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for (var x = 0; x < _n; x++) {\n        for (var y1 = 0; y1 < _n; y1++) {\n          i = x + y1 * _n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.ifft1d(tre, tim);\n        for (var y2 = 0; y2 < _n; y2++) {\n          i = x + y2 * _n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // core operation of FFT\n    fft: function (re, im, inv) {\n      var d,\n        h,\n        ik,\n        m,\n        tmp,\n        wr,\n        wi,\n        xr,\n        xi,\n        n4 = _n >> 2;\n      // bit reversal\n      for (var l = 0; l < _n; l++) {\n        m = _bitrev[l];\n        if (l < m) {\n          tmp = re[l];\n          re[l] = re[m];\n          re[m] = tmp;\n          tmp = im[l];\n          im[l] = im[m];\n          im[m] = tmp;\n        }\n      }\n      // butterfly operation\n      for (var k = 1; k < _n; k <<= 1) {\n        h = 0;\n        d = _n / (k << 1);\n        for (var j = 0; j < k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv * _cstb[h];\n          for (var i = j; i < _n; i += k << 1) {\n            ik = i + k;\n            xr = wr * re[ik] + wi * im[ik];\n            xi = wr * im[ik] - wi * re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n          h += d;\n        }\n      }\n    },\n    // initialize the array (supports TypedArray)\n    _initArray: function () {\n      if (typeof Uint32Array !== 'undefined') {\n        _bitrev = new Uint32Array(_n);\n      } else {\n        _bitrev = [];\n      }\n      if (typeof Float64Array !== 'undefined') {\n        _cstb = new Float64Array(_n * 1.25);\n      } else {\n        _cstb = [];\n      }\n    },\n    // zero padding\n    _paddingZero: function () {\n      // TODO\n    },\n    // makes bit reversal table\n    _makeBitReversalTable: function () {\n      var i = 0,\n        j = 0,\n        k = 0;\n      _bitrev[0] = 0;\n      while (++i < _n) {\n        k = _n >> 1;\n        while (k <= j) {\n          j -= k;\n          k >>= 1;\n        }\n        j += k;\n        _bitrev[i] = j;\n      }\n    },\n    // makes trigonometiric function table\n    _makeCosSinTable: function () {\n      var n2 = _n >> 1,\n        n4 = _n >> 2,\n        n8 = _n >> 3,\n        n2p4 = n2 + n4,\n        t = Math.sin(Math.PI / _n),\n        dc = 2 * t * t,\n        ds = Math.sqrt(dc * (2 - dc)),\n        c = _cstb[n4] = 1,\n        s = _cstb[0] = 0;\n      t = 2 * dc;\n      for (var i = 1; i < n8; i++) {\n        c -= dc;\n        dc += t * c;\n        s += ds;\n        ds -= t * s;\n        _cstb[i] = s;\n        _cstb[n4 - i] = c;\n      }\n      if (n8 !== 0) {\n        _cstb[n8] = Math.sqrt(0.5);\n      }\n      for (var j = 0; j < n4; j++) {\n        _cstb[n2 - j] = _cstb[j];\n      }\n      for (var k = 0; k < n2p4; k++) {\n        _cstb[k + n2] = -_cstb[k];\n      }\n    }\n  };\n  // aliases (public APIs)\n  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n  for (var i = 0; i < apis.length; i++) {\n    FFT[apis[i]] = core[apis[i]];\n  }\n  FFT.bt = core.bt1d;\n  FFT.fft = core.fft1d;\n  FFT.ifft = core.ifft1d;\n  return FFT;\n}.call(this);","map":{"version":3,"names":["FFT","exports","version","release","date","toString","_n","_bitrev","_cstb","core","init","n","_initArray","_makeBitReversalTable","_makeCosSinTable","Error","fft1d","re","im","fft","ifft1d","i","bt1d","fft2d","tre","tim","y","x1","x2","x","y1","y2","ifft2d","inv","d","h","ik","m","tmp","wr","wi","xr","xi","n4","l","k","j","Uint32Array","Float64Array","_paddingZero","n2","n8","n2p4","t","Math","sin","PI","dc","ds","sqrt","c","s","apis","length","bt","ifft","call"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-fft/src/fftlib.js"],"sourcesContent":["/**\n * Fast Fourier Transform module\n * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n */\nvar FFT = (function(){\n  var FFT;  \n  \n  if(typeof exports !== 'undefined') {\n    FFT = exports;   // for CommonJS\n  } else {\n    FFT = {};\n  }\n  \n  var version = {\n    release: '0.3.0',\n    date: '2013-03'\n  };\n  FFT.toString = function() {\n    return \"version \" + version.release + \", released \" + version.date;\n  };\n\n  // core operations\n  var _n = 0,          // order\n      _bitrev = null,  // bit reversal table\n      _cstb = null;    // sin/cos table\n\n  var core = {\n    init : function(n) {\n      if(n !== 0 && (n & (n - 1)) === 0) {\n        _n = n;\n        core._initArray();\n        core._makeBitReversalTable();\n        core._makeCosSinTable();\n      } else {\n        throw new Error(\"init: radix-2 required\");\n      }\n    },\n    // 1D-FFT\n    fft1d : function(re, im) {\n      core.fft(re, im, 1);\n    },\n    // 1D-IFFT\n    ifft1d : function(re, im) {\n      var n = 1/_n;\n      core.fft(re, im, -1);\n      for(var i=0; i<_n; i++) {\n        re[i] *= n;\n        im[i] *= n;\n      }\n    },\n     // 1D-IFFT\n    bt1d : function(re, im) {\n      core.fft(re, im, -1);\n    },\n    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n    fft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.fft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.fft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // 2D-IFFT\n    ifft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.ifft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.ifft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // core operation of FFT\n    fft : function(re, im, inv) {\n      var d, h, ik, m, tmp, wr, wi, xr, xi,\n          n4 = _n >> 2;\n      // bit reversal\n      for(var l=0; l<_n; l++) {\n        m = _bitrev[l];\n        if(l < m) {\n          tmp = re[l];\n          re[l] = re[m];\n          re[m] = tmp;\n          tmp = im[l];\n          im[l] = im[m];\n          im[m] = tmp;\n        }\n      }\n      // butterfly operation\n      for(var k=1; k<_n; k<<=1) {\n        h = 0;\n        d = _n/(k << 1);\n        for(var j=0; j<k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv*_cstb[h];\n          for(var i=j; i<_n; i+=(k<<1)) {\n            ik = i + k;\n            xr = wr*re[ik] + wi*im[ik];\n            xi = wr*im[ik] - wi*re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n          h += d;\n        }\n      }\n    },\n    // initialize the array (supports TypedArray)\n    _initArray : function() {\n      if(typeof Uint32Array !== 'undefined') {\n        _bitrev = new Uint32Array(_n);\n      } else {\n        _bitrev = [];\n      }\n      if(typeof Float64Array !== 'undefined') {\n        _cstb = new Float64Array(_n*1.25);\n      } else {\n        _cstb = [];\n      }\n    },\n    // zero padding\n    _paddingZero : function() {\n      // TODO\n    },\n    // makes bit reversal table\n    _makeBitReversalTable : function() {\n      var i = 0,\n          j = 0,\n          k = 0;\n      _bitrev[0] = 0;\n      while(++i < _n) {\n        k = _n >> 1;\n        while(k <= j) {\n          j -= k;\n          k >>= 1;\n        }\n        j += k;\n        _bitrev[i] = j;\n      }\n    },\n    // makes trigonometiric function table\n    _makeCosSinTable : function() {\n      var n2 = _n >> 1,\n          n4 = _n >> 2,\n          n8 = _n >> 3,\n          n2p4 = n2 + n4,\n          t = Math.sin(Math.PI/_n),\n          dc = 2*t*t,\n          ds = Math.sqrt(dc*(2 - dc)),\n          c = _cstb[n4] = 1,\n          s = _cstb[0] = 0;\n      t = 2*dc;\n      for(var i=1; i<n8; i++) {\n        c -= dc;\n        dc += t*c;\n        s += ds;\n        ds -= t*s;\n        _cstb[i] = s;\n        _cstb[n4 - i] = c;\n      }\n      if(n8 !== 0) {\n        _cstb[n8] = Math.sqrt(0.5);\n      }\n      for(var j=0; j<n4; j++) {\n        _cstb[n2 - j]  = _cstb[j];\n      }\n      for(var k=0; k<n2p4; k++) {\n        _cstb[k + n2] = -_cstb[k];\n      }\n    }\n  };\n  // aliases (public APIs)\n  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n  for(var i=0; i<apis.length; i++) {\n    FFT[apis[i]] = core[apis[i]];\n  }\n  FFT.bt = core.bt1d;\n  FFT.fft = core.fft1d;\n  FFT.ifft = core.ifft1d;\n  \n  return FFT;\n}).call(this);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}