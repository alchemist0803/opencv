{"ast":null,"code":"/**\n * Allows to generate an array of points for a binary image (bit depth = 1)\n * The points consider the beginning and the end of each pixel\n * This method is only used to calculate minimalBoundRectangle\n * @memberof Image\n * @instance\n * @return {Array<Array<number>>} - an array of [x,y] corresponding to the set pixels in the binary image\n */\nexport default function extendedPoints() {\n  this.checkProcessable('extendedPoints', {\n    bitDepth: [1]\n  });\n  const pixels = [];\n  for (let y = 0; y < this.height; y++) {\n    for (let x = 0; x < this.width; x++) {\n      if (this.getBitXY(x, y) === 1) {\n        pixels.push([x, y]);\n        if (this.getBitXY(x + 1, y) !== 1) {\n          pixels.push([x + 1, y]);\n          pixels.push([x + 1, y + 1]);\n          if (this.getBitXY(x, y + 1) !== 1) {\n            pixels.push([x, y + 1]);\n          }\n        } else {\n          if (this.getBitXY(x, y + 1) !== 1) {\n            pixels.push([x, y + 1]);\n            pixels.push([x + 1, y + 1]);\n          }\n        }\n\n        // this small optimization allows to reduce dramatically the number of points for MBR calculation\n        while (x < this.width - 2 && this.getBitXY(x + 1, y) === 1 && this.getBitXY(x + 2, y) === 1) {\n          x++;\n        }\n      }\n    }\n  }\n  return pixels;\n}","map":{"version":3,"names":["extendedPoints","checkProcessable","bitDepth","pixels","y","height","x","width","getBitXY","push"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/compute/extendedPoints.js"],"sourcesContent":["/**\n * Allows to generate an array of points for a binary image (bit depth = 1)\n * The points consider the beginning and the end of each pixel\n * This method is only used to calculate minimalBoundRectangle\n * @memberof Image\n * @instance\n * @return {Array<Array<number>>} - an array of [x,y] corresponding to the set pixels in the binary image\n */\nexport default function extendedPoints() {\n  this.checkProcessable('extendedPoints', {\n    bitDepth: [1],\n  });\n\n  const pixels = [];\n  for (let y = 0; y < this.height; y++) {\n    for (let x = 0; x < this.width; x++) {\n      if (this.getBitXY(x, y) === 1) {\n        pixels.push([x, y]);\n\n        if (this.getBitXY(x + 1, y) !== 1) {\n          pixels.push([x + 1, y]);\n          pixels.push([x + 1, y + 1]);\n          if (this.getBitXY(x, y + 1) !== 1) {\n            pixels.push([x, y + 1]);\n          }\n        } else {\n          if (this.getBitXY(x, y + 1) !== 1) {\n            pixels.push([x, y + 1]);\n            pixels.push([x + 1, y + 1]);\n          }\n        }\n\n        // this small optimization allows to reduce dramatically the number of points for MBR calculation\n        while (\n          x < this.width - 2 &&\n          this.getBitXY(x + 1, y) === 1 &&\n          this.getBitXY(x + 2, y) === 1\n        ) {\n          x++;\n        }\n      }\n    }\n  }\n  return pixels;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,cAAcA,CAAA,EAAG;EACvC,IAAI,CAACC,gBAAgB,CAAC,gBAAgB,EAAE;IACtCC,QAAQ,EAAE,CAAC,CAAC;EACd,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,KAAK,EAAED,CAAC,EAAE,EAAE;MACnC,IAAI,IAAI,CAACE,QAAQ,CAACF,CAAC,EAAEF,CAAC,CAAC,KAAK,CAAC,EAAE;QAC7BD,MAAM,CAACM,IAAI,CAAC,CAACH,CAAC,EAAEF,CAAC,CAAC,CAAC;QAEnB,IAAI,IAAI,CAACI,QAAQ,CAACF,CAAC,GAAG,CAAC,EAAEF,CAAC,CAAC,KAAK,CAAC,EAAE;UACjCD,MAAM,CAACM,IAAI,CAAC,CAACH,CAAC,GAAG,CAAC,EAAEF,CAAC,CAAC,CAAC;UACvBD,MAAM,CAACM,IAAI,CAAC,CAACH,CAAC,GAAG,CAAC,EAAEF,CAAC,GAAG,CAAC,CAAC,CAAC;UAC3B,IAAI,IAAI,CAACI,QAAQ,CAACF,CAAC,EAAEF,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;YACjCD,MAAM,CAACM,IAAI,CAAC,CAACH,CAAC,EAAEF,CAAC,GAAG,CAAC,CAAC,CAAC;UACzB;QACF,CAAC,MAAM;UACL,IAAI,IAAI,CAACI,QAAQ,CAACF,CAAC,EAAEF,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;YACjCD,MAAM,CAACM,IAAI,CAAC,CAACH,CAAC,EAAEF,CAAC,GAAG,CAAC,CAAC,CAAC;YACvBD,MAAM,CAACM,IAAI,CAAC,CAACH,CAAC,GAAG,CAAC,EAAEF,CAAC,GAAG,CAAC,CAAC,CAAC;UAC7B;QACF;;QAEA;QACA,OACEE,CAAC,GAAG,IAAI,CAACC,KAAK,GAAG,CAAC,IAClB,IAAI,CAACC,QAAQ,CAACF,CAAC,GAAG,CAAC,EAAEF,CAAC,CAAC,KAAK,CAAC,IAC7B,IAAI,CAACI,QAAQ,CAACF,CAAC,GAAG,CAAC,EAAEF,CAAC,CAAC,KAAK,CAAC,EAC7B;UACAE,CAAC,EAAE;QACL;MACF;IACF;EACF;EACA,OAAOH,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}