{"ast":null,"code":"/*\n *\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Intermodes: This assumes a bimodal histogram. Implements the thresholding Prewitt, JMS & Mendelsohn, ML (1966),\n * \"The analysis of cell images\", Annals of the NewYork Academy of Sciences 128: 1035-1053\n *\n */\n\nexport default function intermodes(histogram) {\n  let iHisto = histogram.slice();\n  let iter = 0;\n  while (!bimodalTest(iHisto)) {\n    // smooth with a 3 point running mean filter\n    let previous = 0;\n    let current = 0;\n    let next = iHisto[0];\n    for (let i = 0; i < histogram.length - 1; i++) {\n      previous = current;\n      current = next;\n      next = iHisto[i + 1];\n      iHisto[i] = (previous + current + next) / 3;\n    }\n    iHisto[histogram.length - 1] = (current + next) / 3;\n    iter++;\n    if (iter > 10000) {\n      throw new Error('Intermodes Threshold not found after 10000 iterations');\n    }\n  }\n\n  // The threshold is the mean between the two peaks.\n  let tt = 0;\n  for (let i = 1; i < histogram.length - 1; i++) {\n    if (iHisto[i - 1] < iHisto[i] && iHisto[i + 1] < iHisto[i]) {\n      tt += i;\n    }\n  }\n  return Math.floor(tt / 2.0);\n}\nfunction bimodalTest(iHisto) {\n  let b = false;\n  let modes = 0;\n  for (let k = 1; k < iHisto.length - 1; k++) {\n    if (iHisto[k - 1] < iHisto[k] && iHisto[k + 1] < iHisto[k]) {\n      modes++;\n      if (modes > 2) {\n        return false;\n      }\n    }\n  }\n  if (modes === 2) {\n    b = true;\n  }\n  return b;\n}","map":{"version":3,"names":["intermodes","histogram","iHisto","slice","iter","bimodalTest","previous","current","next","i","length","Error","tt","Math","floor","b","modes","k"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/mask/intermodes.js"],"sourcesContent":["/*\n *\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Intermodes: This assumes a bimodal histogram. Implements the thresholding Prewitt, JMS & Mendelsohn, ML (1966),\n * \"The analysis of cell images\", Annals of the NewYork Academy of Sciences 128: 1035-1053\n *\n */\n\nexport default function intermodes(histogram) {\n  let iHisto = histogram.slice();\n  let iter = 0;\n  while (!bimodalTest(iHisto)) {\n    // smooth with a 3 point running mean filter\n    let previous = 0;\n    let current = 0;\n    let next = iHisto[0];\n    for (let i = 0; i < histogram.length - 1; i++) {\n      previous = current;\n      current = next;\n      next = iHisto[i + 1];\n      iHisto[i] = (previous + current + next) / 3;\n    }\n    iHisto[histogram.length - 1] = (current + next) / 3;\n    iter++;\n    if (iter > 10000) {\n      throw new Error('Intermodes Threshold not found after 10000 iterations');\n    }\n  }\n\n  // The threshold is the mean between the two peaks.\n  let tt = 0;\n  for (let i = 1; i < histogram.length - 1; i++) {\n    if (iHisto[i - 1] < iHisto[i] && iHisto[i + 1] < iHisto[i]) {\n      tt += i;\n    }\n  }\n  return Math.floor(tt / 2.0);\n}\n\nfunction bimodalTest(iHisto) {\n  let b = false;\n  let modes = 0;\n\n  for (let k = 1; k < iHisto.length - 1; k++) {\n    if (iHisto[k - 1] < iHisto[k] && iHisto[k + 1] < iHisto[k]) {\n      modes++;\n      if (modes > 2) {\n        return false;\n      }\n    }\n  }\n  if (modes === 2) {\n    b = true;\n  }\n  return b;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASA,UAAUA,CAACC,SAAS,EAAE;EAC5C,IAAIC,MAAM,GAAGD,SAAS,CAACE,KAAK,CAAC,CAAC;EAC9B,IAAIC,IAAI,GAAG,CAAC;EACZ,OAAO,CAACC,WAAW,CAACH,MAAM,CAAC,EAAE;IAC3B;IACA,IAAII,QAAQ,GAAG,CAAC;IAChB,IAAIC,OAAO,GAAG,CAAC;IACf,IAAIC,IAAI,GAAGN,MAAM,CAAC,CAAC,CAAC;IACpB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,SAAS,CAACS,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;MAC7CH,QAAQ,GAAGC,OAAO;MAClBA,OAAO,GAAGC,IAAI;MACdA,IAAI,GAAGN,MAAM,CAACO,CAAC,GAAG,CAAC,CAAC;MACpBP,MAAM,CAACO,CAAC,CAAC,GAAG,CAACH,QAAQ,GAAGC,OAAO,GAAGC,IAAI,IAAI,CAAC;IAC7C;IACAN,MAAM,CAACD,SAAS,CAACS,MAAM,GAAG,CAAC,CAAC,GAAG,CAACH,OAAO,GAAGC,IAAI,IAAI,CAAC;IACnDJ,IAAI,EAAE;IACN,IAAIA,IAAI,GAAG,KAAK,EAAE;MAChB,MAAM,IAAIO,KAAK,CAAC,uDAAuD,CAAC;IAC1E;EACF;;EAEA;EACA,IAAIC,EAAE,GAAG,CAAC;EACV,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,SAAS,CAACS,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;IAC7C,IAAIP,MAAM,CAACO,CAAC,GAAG,CAAC,CAAC,GAAGP,MAAM,CAACO,CAAC,CAAC,IAAIP,MAAM,CAACO,CAAC,GAAG,CAAC,CAAC,GAAGP,MAAM,CAACO,CAAC,CAAC,EAAE;MAC1DG,EAAE,IAAIH,CAAC;IACT;EACF;EACA,OAAOI,IAAI,CAACC,KAAK,CAACF,EAAE,GAAG,GAAG,CAAC;AAC7B;AAEA,SAASP,WAAWA,CAACH,MAAM,EAAE;EAC3B,IAAIa,CAAC,GAAG,KAAK;EACb,IAAIC,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,MAAM,CAACQ,MAAM,GAAG,CAAC,EAAEO,CAAC,EAAE,EAAE;IAC1C,IAAIf,MAAM,CAACe,CAAC,GAAG,CAAC,CAAC,GAAGf,MAAM,CAACe,CAAC,CAAC,IAAIf,MAAM,CAACe,CAAC,GAAG,CAAC,CAAC,GAAGf,MAAM,CAACe,CAAC,CAAC,EAAE;MAC1DD,KAAK,EAAE;MACP,IAAIA,KAAK,GAAG,CAAC,EAAE;QACb,OAAO,KAAK;MACd;IACF;EACF;EACA,IAAIA,KAAK,KAAK,CAAC,EAAE;IACfD,CAAC,GAAG,IAAI;EACV;EACA,OAAOA,CAAC;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}