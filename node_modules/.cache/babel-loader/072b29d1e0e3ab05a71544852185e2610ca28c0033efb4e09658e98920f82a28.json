{"ast":null,"code":"// http://www.easyrgb.com/index.php?X=MATH&H=18#text18\n// check rgbToHsl : https://bgrins.github.io/TinyColor/docs/tinycolor.html\n\nimport Image from '../Image';\nimport { RGB, CMYK } from '../model/model';\n\n/**\n * Make a copy of the current image and convert the color model to CMYK\n * The source image has to be RGB !\n * @memberof Image\n * @instance\n * @return {Image} - New image in CMYK color model\n * @example\n * var cmykImage = image.cmyk();\n * // we can create one image per channel\n * var channels = cmykImage.split();\n */\nexport default function cmyk() {\n  this.checkProcessable('cmyk', {\n    bitDepth: [8, 16],\n    alpha: [0, 1],\n    colorModel: [RGB]\n  });\n  let newImage = Image.createFrom(this, {\n    components: 4,\n    colorModel: CMYK\n  });\n  let ptr = 0;\n  let data = this.data;\n  for (let i = 0; i < data.length; i += this.channels) {\n    let red = data[i];\n    let green = data[i + 1];\n    let blue = data[i + 2];\n    let black = Math.min(this.maxValue - red, this.maxValue - green, this.maxValue - blue);\n    let cyan = (this.maxValue - red - black) / (1 - black / this.maxValue);\n    let magenta = (this.maxValue - green - black) / (1 - black / this.maxValue);\n    let yellow = (this.maxValue - blue - black) / (1 - black / this.maxValue);\n    newImage.data[ptr++] = Math.round(cyan);\n    newImage.data[ptr++] = Math.round(magenta);\n    newImage.data[ptr++] = Math.round(yellow);\n    newImage.data[ptr++] = Math.round(black);\n    if (this.alpha) {\n      newImage.data[ptr++] = data[i + 3];\n    }\n  }\n  return newImage;\n}","map":{"version":3,"names":["Image","RGB","CMYK","cmyk","checkProcessable","bitDepth","alpha","colorModel","newImage","createFrom","components","ptr","data","i","length","channels","red","green","blue","black","Math","min","maxValue","cyan","magenta","yellow","round"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/transform/cmyk.js"],"sourcesContent":["// http://www.easyrgb.com/index.php?X=MATH&H=18#text18\n// check rgbToHsl : https://bgrins.github.io/TinyColor/docs/tinycolor.html\n\nimport Image from '../Image';\nimport { RGB, CMYK } from '../model/model';\n\n/**\n * Make a copy of the current image and convert the color model to CMYK\n * The source image has to be RGB !\n * @memberof Image\n * @instance\n * @return {Image} - New image in CMYK color model\n * @example\n * var cmykImage = image.cmyk();\n * // we can create one image per channel\n * var channels = cmykImage.split();\n */\nexport default function cmyk() {\n  this.checkProcessable('cmyk', {\n    bitDepth: [8, 16],\n    alpha: [0, 1],\n    colorModel: [RGB],\n  });\n\n  let newImage = Image.createFrom(this, {\n    components: 4,\n    colorModel: CMYK,\n  });\n\n  let ptr = 0;\n  let data = this.data;\n  for (let i = 0; i < data.length; i += this.channels) {\n    let red = data[i];\n    let green = data[i + 1];\n    let blue = data[i + 2];\n\n    let black = Math.min(\n      this.maxValue - red,\n      this.maxValue - green,\n      this.maxValue - blue,\n    );\n    let cyan = (this.maxValue - red - black) / (1 - black / this.maxValue);\n    let magenta = (this.maxValue - green - black) / (1 - black / this.maxValue);\n    let yellow = (this.maxValue - blue - black) / (1 - black / this.maxValue);\n\n    newImage.data[ptr++] = Math.round(cyan);\n    newImage.data[ptr++] = Math.round(magenta);\n    newImage.data[ptr++] = Math.round(yellow);\n    newImage.data[ptr++] = Math.round(black);\n    if (this.alpha) {\n      newImage.data[ptr++] = data[i + 3];\n    }\n  }\n\n  return newImage;\n}\n"],"mappings":"AAAA;AACA;;AAEA,OAAOA,KAAK,MAAM,UAAU;AAC5B,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,IAAIA,CAAA,EAAG;EAC7B,IAAI,CAACC,gBAAgB,CAAC,MAAM,EAAE;IAC5BC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACjBC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACbC,UAAU,EAAE,CAACN,GAAG;EAClB,CAAC,CAAC;EAEF,IAAIO,QAAQ,GAAGR,KAAK,CAACS,UAAU,CAAC,IAAI,EAAE;IACpCC,UAAU,EAAE,CAAC;IACbH,UAAU,EAAEL;EACd,CAAC,CAAC;EAEF,IAAIS,GAAG,GAAG,CAAC;EACX,IAAIC,IAAI,GAAG,IAAI,CAACA,IAAI;EACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAED,CAAC,IAAI,IAAI,CAACE,QAAQ,EAAE;IACnD,IAAIC,GAAG,GAAGJ,IAAI,CAACC,CAAC,CAAC;IACjB,IAAII,KAAK,GAAGL,IAAI,CAACC,CAAC,GAAG,CAAC,CAAC;IACvB,IAAIK,IAAI,GAAGN,IAAI,CAACC,CAAC,GAAG,CAAC,CAAC;IAEtB,IAAIM,KAAK,GAAGC,IAAI,CAACC,GAAG,CAClB,IAAI,CAACC,QAAQ,GAAGN,GAAG,EACnB,IAAI,CAACM,QAAQ,GAAGL,KAAK,EACrB,IAAI,CAACK,QAAQ,GAAGJ,IAClB,CAAC;IACD,IAAIK,IAAI,GAAG,CAAC,IAAI,CAACD,QAAQ,GAAGN,GAAG,GAAGG,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,IAAI,CAACG,QAAQ,CAAC;IACtE,IAAIE,OAAO,GAAG,CAAC,IAAI,CAACF,QAAQ,GAAGL,KAAK,GAAGE,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,IAAI,CAACG,QAAQ,CAAC;IAC3E,IAAIG,MAAM,GAAG,CAAC,IAAI,CAACH,QAAQ,GAAGJ,IAAI,GAAGC,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,IAAI,CAACG,QAAQ,CAAC;IAEzEd,QAAQ,CAACI,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGS,IAAI,CAACM,KAAK,CAACH,IAAI,CAAC;IACvCf,QAAQ,CAACI,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGS,IAAI,CAACM,KAAK,CAACF,OAAO,CAAC;IAC1ChB,QAAQ,CAACI,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGS,IAAI,CAACM,KAAK,CAACD,MAAM,CAAC;IACzCjB,QAAQ,CAACI,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGS,IAAI,CAACM,KAAK,CAACP,KAAK,CAAC;IACxC,IAAI,IAAI,CAACb,KAAK,EAAE;MACdE,QAAQ,CAACI,IAAI,CAACD,GAAG,EAAE,CAAC,GAAGC,IAAI,CAACC,CAAC,GAAG,CAAC,CAAC;IACpC;EACF;EAEA,OAAOL,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}