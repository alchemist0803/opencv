{"ast":null,"code":"import BaseRegression, { checkArrayLength, maybeToPrecision } from 'ml-regression-base';\nexport default class SimpleLinearRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = [y.intercept, y.slope];\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    return new SimpleLinearRegression(true, json);\n  }\n}\nfunction regress(slr, x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n  let xSquared = 0;\n  let xY = 0;\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n  const numerator = n * xY - xSum * ySum;\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\n  slr.intercept = 1 / n * ySum - slr.slope * (1 / n) * xSum;\n  slr.coefficients = [slr.intercept, slr.slope];\n}","map":{"version":3,"names":["BaseRegression","checkArrayLength","maybeToPrecision","SimpleLinearRegression","constructor","x","y","slope","intercept","coefficients","regress","toJSON","name","_predict","computeX","toString","precision","result","xFactor","absIntercept","Math","abs","operator","toLaTeX","load","json","TypeError","slr","n","length","xSum","ySum","xSquared","xY","i","numerator"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/ml-regression-simple-linear/src/index.js"],"sourcesContent":["import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\n\nexport default class SimpleLinearRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = [y.intercept, y.slope];\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept,\n    };\n  }\n\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    return new SimpleLinearRegression(true, json);\n  }\n}\n\nfunction regress(slr, x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n\n  let xSquared = 0;\n  let xY = 0;\n\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n\n  const numerator = n * xY - xSum * ySum;\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\n  slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\n  slr.coefficients = [slr.intercept, slr.slope];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}