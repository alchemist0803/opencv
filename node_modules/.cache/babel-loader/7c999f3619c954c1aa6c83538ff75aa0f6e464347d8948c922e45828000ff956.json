{"ast":null,"code":"import Stack from '../../stack/Stack';\nimport Image from '../Image';\nimport { GREY } from '../model/model';\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {boolean} [options.preserveAlpha=true]\n * @return {Stack}\n */\nexport default function split(options = {}) {\n  let {\n    preserveAlpha = true\n  } = options;\n  this.checkProcessable('split', {\n    bitDepth: [8, 16]\n  });\n\n  // split will always return a stack of images\n  if (this.components === 1) {\n    return new Stack([this.clone()]);\n  }\n  let images = new Stack();\n  let data = this.data;\n  if (this.alpha && preserveAlpha) {\n    for (let i = 0; i < this.components; i++) {\n      let newImage = Image.createFrom(this, {\n        components: 1,\n        alpha: true,\n        colorModel: GREY\n      });\n      let ptr = 0;\n      for (let j = 0; j < data.length; j += this.channels) {\n        newImage.data[ptr++] = data[j + i];\n        newImage.data[ptr++] = data[j + this.components];\n      }\n      images.push(newImage);\n    }\n  } else {\n    for (let i = 0; i < this.channels; i++) {\n      let newImage = Image.createFrom(this, {\n        components: 1,\n        alpha: false,\n        colorModel: GREY\n      });\n      let ptr = 0;\n      for (let j = 0; j < data.length; j += this.channels) {\n        newImage.data[ptr++] = data[j + i];\n      }\n      images.push(newImage);\n    }\n  }\n  return images;\n}","map":{"version":3,"names":["Stack","Image","GREY","split","options","preserveAlpha","checkProcessable","bitDepth","components","clone","images","data","alpha","i","newImage","createFrom","colorModel","ptr","j","length","channels","push"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/utility/split.js"],"sourcesContent":["import Stack from '../../stack/Stack';\nimport Image from '../Image';\nimport { GREY } from '../model/model';\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {boolean} [options.preserveAlpha=true]\n * @return {Stack}\n */\nexport default function split(options = {}) {\n  let { preserveAlpha = true } = options;\n\n  this.checkProcessable('split', {\n    bitDepth: [8, 16],\n  });\n\n  // split will always return a stack of images\n  if (this.components === 1) {\n    return new Stack([this.clone()]);\n  }\n\n  let images = new Stack();\n\n  let data = this.data;\n  if (this.alpha && preserveAlpha) {\n    for (let i = 0; i < this.components; i++) {\n      let newImage = Image.createFrom(this, {\n        components: 1,\n        alpha: true,\n        colorModel: GREY,\n      });\n      let ptr = 0;\n      for (let j = 0; j < data.length; j += this.channels) {\n        newImage.data[ptr++] = data[j + i];\n        newImage.data[ptr++] = data[j + this.components];\n      }\n      images.push(newImage);\n    }\n  } else {\n    for (let i = 0; i < this.channels; i++) {\n      let newImage = Image.createFrom(this, {\n        components: 1,\n        alpha: false,\n        colorModel: GREY,\n      });\n      let ptr = 0;\n      for (let j = 0; j < data.length; j += this.channels) {\n        newImage.data[ptr++] = data[j + i];\n      }\n      images.push(newImage);\n    }\n  }\n\n  return images;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,mBAAmB;AACrC,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,IAAI,QAAQ,gBAAgB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,KAAKA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1C,IAAI;IAAEC,aAAa,GAAG;EAAK,CAAC,GAAGD,OAAO;EAEtC,IAAI,CAACE,gBAAgB,CAAC,OAAO,EAAE;IAC7BC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;EAClB,CAAC,CAAC;;EAEF;EACA,IAAI,IAAI,CAACC,UAAU,KAAK,CAAC,EAAE;IACzB,OAAO,IAAIR,KAAK,CAAC,CAAC,IAAI,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;EAClC;EAEA,IAAIC,MAAM,GAAG,IAAIV,KAAK,CAAC,CAAC;EAExB,IAAIW,IAAI,GAAG,IAAI,CAACA,IAAI;EACpB,IAAI,IAAI,CAACC,KAAK,IAAIP,aAAa,EAAE;IAC/B,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,UAAU,EAAEK,CAAC,EAAE,EAAE;MACxC,IAAIC,QAAQ,GAAGb,KAAK,CAACc,UAAU,CAAC,IAAI,EAAE;QACpCP,UAAU,EAAE,CAAC;QACbI,KAAK,EAAE,IAAI;QACXI,UAAU,EAAEd;MACd,CAAC,CAAC;MACF,IAAIe,GAAG,GAAG,CAAC;MACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACQ,MAAM,EAAED,CAAC,IAAI,IAAI,CAACE,QAAQ,EAAE;QACnDN,QAAQ,CAACH,IAAI,CAACM,GAAG,EAAE,CAAC,GAAGN,IAAI,CAACO,CAAC,GAAGL,CAAC,CAAC;QAClCC,QAAQ,CAACH,IAAI,CAACM,GAAG,EAAE,CAAC,GAAGN,IAAI,CAACO,CAAC,GAAG,IAAI,CAACV,UAAU,CAAC;MAClD;MACAE,MAAM,CAACW,IAAI,CAACP,QAAQ,CAAC;IACvB;EACF,CAAC,MAAM;IACL,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACO,QAAQ,EAAEP,CAAC,EAAE,EAAE;MACtC,IAAIC,QAAQ,GAAGb,KAAK,CAACc,UAAU,CAAC,IAAI,EAAE;QACpCP,UAAU,EAAE,CAAC;QACbI,KAAK,EAAE,KAAK;QACZI,UAAU,EAAEd;MACd,CAAC,CAAC;MACF,IAAIe,GAAG,GAAG,CAAC;MACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACQ,MAAM,EAAED,CAAC,IAAI,IAAI,CAACE,QAAQ,EAAE;QACnDN,QAAQ,CAACH,IAAI,CAACM,GAAG,EAAE,CAAC,GAAGN,IAAI,CAACO,CAAC,GAAGL,CAAC,CAAC;MACpC;MACAH,MAAM,CAACW,IAAI,CAACP,QAAQ,CAAC;IACvB;EACF;EAEA,OAAOJ,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}