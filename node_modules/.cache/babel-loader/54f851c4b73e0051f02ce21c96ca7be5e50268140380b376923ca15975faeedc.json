{"ast":null,"code":"import newArray from 'new-array';\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {boolean} [options.useAlpha=true]\n * @param {number} [options.nbSlots=512]\n * @return {number[]}\n */\nexport default function getColorHistogram(options = {}) {\n  let {\n    useAlpha = true,\n    nbSlots = 512\n  } = options;\n  this.checkProcessable('getColorHistogram', {\n    bitDepth: [8, 16],\n    components: [3]\n  });\n  let nbSlotsCheck = Math.log(nbSlots) / Math.log(8);\n  if (nbSlotsCheck !== Math.floor(nbSlotsCheck)) {\n    throw new RangeError('nbSlots must be a power of 8. Usually 8, 64, 512 or 4096');\n  }\n  let bitShift = this.bitDepth - nbSlotsCheck;\n  let data = this.data;\n  let result = newArray(Math.pow(8, nbSlotsCheck), 0);\n  let factor2 = Math.pow(2, nbSlotsCheck * 2);\n  let factor1 = Math.pow(2, nbSlotsCheck);\n  for (let i = 0; i < data.length; i += this.channels) {\n    let slot = (data[i] >> bitShift) * factor2 + (data[i + 1] >> bitShift) * factor1 + (data[i + 2] >> bitShift);\n    if (useAlpha && this.alpha) {\n      result[slot] += data[i + this.channels - 1] / this.maxValue;\n    } else {\n      result[slot]++;\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["newArray","getColorHistogram","options","useAlpha","nbSlots","checkProcessable","bitDepth","components","nbSlotsCheck","Math","log","floor","RangeError","bitShift","data","result","pow","factor2","factor1","i","length","channels","slot","alpha","maxValue"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/compute/colorHistogram.js"],"sourcesContent":["import newArray from 'new-array';\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {boolean} [options.useAlpha=true]\n * @param {number} [options.nbSlots=512]\n * @return {number[]}\n */\nexport default function getColorHistogram(options = {}) {\n  let { useAlpha = true, nbSlots = 512 } = options;\n\n  this.checkProcessable('getColorHistogram', {\n    bitDepth: [8, 16],\n    components: [3],\n  });\n\n  let nbSlotsCheck = Math.log(nbSlots) / Math.log(8);\n  if (nbSlotsCheck !== Math.floor(nbSlotsCheck)) {\n    throw new RangeError(\n      'nbSlots must be a power of 8. Usually 8, 64, 512 or 4096',\n    );\n  }\n\n  let bitShift = this.bitDepth - nbSlotsCheck;\n\n  let data = this.data;\n  let result = newArray(Math.pow(8, nbSlotsCheck), 0);\n  let factor2 = Math.pow(2, nbSlotsCheck * 2);\n  let factor1 = Math.pow(2, nbSlotsCheck);\n\n  for (let i = 0; i < data.length; i += this.channels) {\n    let slot =\n      (data[i] >> bitShift) * factor2 +\n      (data[i + 1] >> bitShift) * factor1 +\n      (data[i + 2] >> bitShift);\n    if (useAlpha && this.alpha) {\n      result[slot] += data[i + this.channels - 1] / this.maxValue;\n    } else {\n      result[slot]++;\n    }\n  }\n\n  return result;\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,iBAAiBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACtD,IAAI;IAAEC,QAAQ,GAAG,IAAI;IAAEC,OAAO,GAAG;EAAI,CAAC,GAAGF,OAAO;EAEhD,IAAI,CAACG,gBAAgB,CAAC,mBAAmB,EAAE;IACzCC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACjBC,UAAU,EAAE,CAAC,CAAC;EAChB,CAAC,CAAC;EAEF,IAAIC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACN,OAAO,CAAC,GAAGK,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;EAClD,IAAIF,YAAY,KAAKC,IAAI,CAACE,KAAK,CAACH,YAAY,CAAC,EAAE;IAC7C,MAAM,IAAII,UAAU,CAClB,0DACF,CAAC;EACH;EAEA,IAAIC,QAAQ,GAAG,IAAI,CAACP,QAAQ,GAAGE,YAAY;EAE3C,IAAIM,IAAI,GAAG,IAAI,CAACA,IAAI;EACpB,IAAIC,MAAM,GAAGf,QAAQ,CAACS,IAAI,CAACO,GAAG,CAAC,CAAC,EAAER,YAAY,CAAC,EAAE,CAAC,CAAC;EACnD,IAAIS,OAAO,GAAGR,IAAI,CAACO,GAAG,CAAC,CAAC,EAAER,YAAY,GAAG,CAAC,CAAC;EAC3C,IAAIU,OAAO,GAAGT,IAAI,CAACO,GAAG,CAAC,CAAC,EAAER,YAAY,CAAC;EAEvC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,IAAI,IAAI,CAACE,QAAQ,EAAE;IACnD,IAAIC,IAAI,GACN,CAACR,IAAI,CAACK,CAAC,CAAC,IAAIN,QAAQ,IAAII,OAAO,GAC/B,CAACH,IAAI,CAACK,CAAC,GAAG,CAAC,CAAC,IAAIN,QAAQ,IAAIK,OAAO,IAClCJ,IAAI,CAACK,CAAC,GAAG,CAAC,CAAC,IAAIN,QAAQ,CAAC;IAC3B,IAAIV,QAAQ,IAAI,IAAI,CAACoB,KAAK,EAAE;MAC1BR,MAAM,CAACO,IAAI,CAAC,IAAIR,IAAI,CAACK,CAAC,GAAG,IAAI,CAACE,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAACG,QAAQ;IAC7D,CAAC,MAAM;MACLT,MAAM,CAACO,IAAI,CAAC,EAAE;IAChB;EACF;EAEA,OAAOP,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}