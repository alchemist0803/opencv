{"ast":null,"code":"import convolution from '../operator/convolution';\n\n/**\n * Direction of a gradient filter\n * @typedef {('x'|'y'|'xy')} GradientDirection\n */\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {GradientDirection} [options.direction]\n * @param {Array<Array<number>>} [options.kernelX]\n * @param {Array<Array<number>>} [options.kernelY]\n * @param {string} [options.border='copy']\n * @param {*} [options.channels]\n * @param {number} [options.bitDepth=this.bitDepth] Specify the bitDepth of the resulting image\n * @return {Image}\n */\nexport default function gradientFilter(options = {}) {\n  let {\n    direction = 'xy',\n    border = 'copy',\n    kernelX,\n    kernelY,\n    channels,\n    bitDepth = this.bitDepth\n  } = options;\n  this.checkProcessable('gradientFilter', {\n    bitDepth: [8, 16]\n  });\n  switch (direction) {\n    case 'x':\n      if (!kernelX) throw new Error('kernelX option is missing');\n      return convolution.call(this, kernelX, {\n        channels: channels,\n        border: border,\n        bitDepth\n      });\n    case 'y':\n      if (!kernelY) throw new Error('kernelY option is missing');\n      return convolution.call(this, kernelY, {\n        channels: channels,\n        border: border,\n        bitDepth\n      });\n    case 'xy':\n      {\n        if (!kernelX) throw new Error('kernelX option is missing');\n        if (!kernelY) throw new Error('kernelY option is missing');\n        const gX = convolution.call(this, kernelX, {\n          channels: channels,\n          border: border,\n          bitDepth: 32\n        });\n        const gY = convolution.call(this, kernelY, {\n          channels: channels,\n          border: border,\n          bitDepth: 32\n        });\n        return gX.hypotenuse(gY, {\n          bitDepth,\n          channels: channels\n        });\n      }\n    default:\n      throw new Error(`Unknown parameter direction: ${direction}`);\n  }\n}","map":{"version":3,"names":["convolution","gradientFilter","options","direction","border","kernelX","kernelY","channels","bitDepth","checkProcessable","Error","call","gX","gY","hypotenuse"],"sources":["C:/Users/Admin/Documents/Workspace/opencv/opencv/node_modules/image-js/src/image/filter/gradientFilter.js"],"sourcesContent":["import convolution from '../operator/convolution';\n\n/**\n * Direction of a gradient filter\n * @typedef {('x'|'y'|'xy')} GradientDirection\n */\n\n/**\n * @memberof Image\n * @instance\n * @param {object} [options]\n * @param {GradientDirection} [options.direction]\n * @param {Array<Array<number>>} [options.kernelX]\n * @param {Array<Array<number>>} [options.kernelY]\n * @param {string} [options.border='copy']\n * @param {*} [options.channels]\n * @param {number} [options.bitDepth=this.bitDepth] Specify the bitDepth of the resulting image\n * @return {Image}\n */\nexport default function gradientFilter(options = {}) {\n  let {\n    direction = 'xy',\n    border = 'copy',\n    kernelX,\n    kernelY,\n    channels,\n    bitDepth = this.bitDepth,\n  } = options;\n\n  this.checkProcessable('gradientFilter', {\n    bitDepth: [8, 16],\n  });\n\n  switch (direction) {\n    case 'x':\n      if (!kernelX) throw new Error('kernelX option is missing');\n      return convolution.call(this, kernelX, {\n        channels: channels,\n        border: border,\n        bitDepth,\n      });\n    case 'y':\n      if (!kernelY) throw new Error('kernelY option is missing');\n      return convolution.call(this, kernelY, {\n        channels: channels,\n        border: border,\n        bitDepth,\n      });\n    case 'xy': {\n      if (!kernelX) throw new Error('kernelX option is missing');\n      if (!kernelY) throw new Error('kernelY option is missing');\n      const gX = convolution.call(this, kernelX, {\n        channels: channels,\n        border: border,\n        bitDepth: 32,\n      });\n      const gY = convolution.call(this, kernelY, {\n        channels: channels,\n        border: border,\n        bitDepth: 32,\n      });\n      return gX.hypotenuse(gY, { bitDepth, channels: channels });\n    }\n    default:\n      throw new Error(`Unknown parameter direction: ${direction}`);\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,yBAAyB;;AAEjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACnD,IAAI;IACFC,SAAS,GAAG,IAAI;IAChBC,MAAM,GAAG,MAAM;IACfC,OAAO;IACPC,OAAO;IACPC,QAAQ;IACRC,QAAQ,GAAG,IAAI,CAACA;EAClB,CAAC,GAAGN,OAAO;EAEX,IAAI,CAACO,gBAAgB,CAAC,gBAAgB,EAAE;IACtCD,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;EAClB,CAAC,CAAC;EAEF,QAAQL,SAAS;IACf,KAAK,GAAG;MACN,IAAI,CAACE,OAAO,EAAE,MAAM,IAAIK,KAAK,CAAC,2BAA2B,CAAC;MAC1D,OAAOV,WAAW,CAACW,IAAI,CAAC,IAAI,EAAEN,OAAO,EAAE;QACrCE,QAAQ,EAAEA,QAAQ;QAClBH,MAAM,EAAEA,MAAM;QACdI;MACF,CAAC,CAAC;IACJ,KAAK,GAAG;MACN,IAAI,CAACF,OAAO,EAAE,MAAM,IAAII,KAAK,CAAC,2BAA2B,CAAC;MAC1D,OAAOV,WAAW,CAACW,IAAI,CAAC,IAAI,EAAEL,OAAO,EAAE;QACrCC,QAAQ,EAAEA,QAAQ;QAClBH,MAAM,EAAEA,MAAM;QACdI;MACF,CAAC,CAAC;IACJ,KAAK,IAAI;MAAE;QACT,IAAI,CAACH,OAAO,EAAE,MAAM,IAAIK,KAAK,CAAC,2BAA2B,CAAC;QAC1D,IAAI,CAACJ,OAAO,EAAE,MAAM,IAAII,KAAK,CAAC,2BAA2B,CAAC;QAC1D,MAAME,EAAE,GAAGZ,WAAW,CAACW,IAAI,CAAC,IAAI,EAAEN,OAAO,EAAE;UACzCE,QAAQ,EAAEA,QAAQ;UAClBH,MAAM,EAAEA,MAAM;UACdI,QAAQ,EAAE;QACZ,CAAC,CAAC;QACF,MAAMK,EAAE,GAAGb,WAAW,CAACW,IAAI,CAAC,IAAI,EAAEL,OAAO,EAAE;UACzCC,QAAQ,EAAEA,QAAQ;UAClBH,MAAM,EAAEA,MAAM;UACdI,QAAQ,EAAE;QACZ,CAAC,CAAC;QACF,OAAOI,EAAE,CAACE,UAAU,CAACD,EAAE,EAAE;UAAEL,QAAQ;UAAED,QAAQ,EAAEA;QAAS,CAAC,CAAC;MAC5D;IACA;MACE,MAAM,IAAIG,KAAK,CAAC,gCAAgCP,SAAS,EAAE,CAAC;EAChE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}